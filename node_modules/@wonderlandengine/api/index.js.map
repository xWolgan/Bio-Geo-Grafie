{
  "version": 3,
  "sources": ["../../../node_modules/wasm-feature-detect/dist/esm/index.js", "../src/property.ts", "../src/decorators.ts", "../src/utils/object.ts", "../src/utils/event.ts", "../src/resources/resource.ts", "../src/utils/cbor.ts", "../src/component.ts", "../src/utils/fetch.ts", "../src/prefab.ts", "../src/utils/misc.ts", "../src/wonderland.ts", "../package.json", "../src/version.ts", "../src/resources/material-manager.ts", "../src/resources/mesh-manager.ts", "../src/resources/texture-manager.ts", "../src/webxr.ts", "../src/scene-gltf.ts", "../src/scene.ts", "../src/engine.ts", "../src/utils/bitset.ts", "../src/utils/logger.ts", "../src/wasm.ts", "../src/index.ts"],
  "sourcesContent": ["export const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),extendedConst=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,9,1,0,65,1,65,2,106,11,0])),gc=()=>(async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,95,1,120,0])))(),jspi=()=>(async()=>\"Suspending\"in WebAssembly)(),memory64=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,4,1])),multiMemory=()=>(async()=>{try{return new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,5,5,2,0,0,0,0])),!0}catch(e){return!1}})(),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),relaxedSimd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,15,1,13,0,65,1,253,15,65,2,253,15,253,128,2,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),streamingCompilation=()=>(async()=>\"compileStreaming\"in WebAssembly)(),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])),typeReflection=()=>(async()=>\"Function\"in WebAssembly)();\n", "/**\n * Component property type.\n */\nexport enum Type {\n    /**\n     * **Native**\n     *\n     * Property of a native component. Must not be used in custom components.\n     *\n     * @hidden\n     */\n    Native = 0,\n\n    /**\n     * **Bool**:\n     *\n     * Appears in the editor as a checkbox.\n     *\n     * Initial value is `false`, unless overridden by the `default` property.\n     */\n    Bool = 1,\n\n    /**\n     * **Int**:\n     *\n     * Appears in the editor as an integer input field.\n     *\n     * Initial value is `0`, unless overridden by the `default` property.\n     */\n    Int = 2,\n\n    /**\n     * **Float**:\n     *\n     * Appears in the editor as a floating point input field.\n     *\n     * Initial value is `0.0`, unless overridden by the `default` property.\n     */\n    Float = 3,\n\n    /**\n     * **String / Text**:\n     *\n     * Appears in the editor as a single-line text input field.\n     *\n     * Initial value is an empty string, unless overridden by the `default`\n     * property.\n     */\n    String = 4,\n\n    /**\n     * **Enumeration**:\n     *\n     * Appears in the editor as a dropdown with given values. The additional\n     * `values` parameter with selection options is mandatory.\n     *\n     * The property value is resolved to an **index** into the `values` array.\n     *\n     * Initial value is the first element in `values`, unless overridden by\n     * the `default` property. The `default` value can be a string or an index\n     * into `values`.\n     *\n     * @example\n     *\n     * ```js\n     *     camera: {type: Type.Enum, values: ['auto', 'back', 'front'], default: 'auto'},\n     * ```\n     */\n    Enum = 5,\n\n    /**\n     * **Object reference**:\n     *\n     * Appears in the editor as an object resource selection dropdown\n     * with object picker.\n     *\n     * Initial value is `null`.\n     */\n    Object = 6,\n\n    /**\n     * **Mesh reference**:\n     *\n     * Appears in the editor as a mesh resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Mesh = 7,\n\n    /**\n     * **Texture reference**:\n     *\n     * Appears in the editor as a texture resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Texture = 8,\n\n    /**\n     * **Material reference**:\n     *\n     * Appears in the editor as a material resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Material = 9,\n\n    /**\n     * **Animation reference**:\n     *\n     * Appears in the editor as an animation resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Animation = 10,\n\n    /**\n     * **Skin reference**:\n     *\n     * Appears in the editor as a skin resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Skin = 11,\n\n    /**\n     * **Color**:\n     *\n     * Appears in the editor as a color widget.\n     *\n     * Initial value is `[0.0, 0.0, 0.0, 1.0]`, unless overridden by the\n     * `default` property.\n     */\n    Color = 12,\n\n    /**\n     * **Vector of two floats**:\n     *\n     * Appears in the editor as a two-element floating point input field.\n     *\n     * Initial value is `[0.0, 0.0]`, unless overridden by the\n     * `default` property.\n     */\n    Vector2 = 13,\n\n    /**\n     * **Vector of three floats**:\n     *\n     * Appears in the editor as a three-element floating point input field.\n     *\n     * Initial value is `[0.0, 0.0, 0.0]`, unless overridden by the\n     * `default` property.\n     */\n    Vector3 = 14,\n\n    /**\n     * **Vector of four floats**:\n     *\n     * Appears in the editor as a four-element floating point input field.\n     *\n     * Initial value is `[0.0, 0.0, 0.0, 0.0]`, unless overridden by the\n     * `default` property.\n     */\n    Vector4 = 15,\n\n    /**\n     * **Array of property**:\n     *\n     * Appears in the editor as a list of **N** elements.\n     *\n     * Initial value is `[]`, unless overridden by the `default` property.\n     */\n    Array = 16,\n\n    /**\n     * **Class with sub-properties**:\n     *\n     * Appears in the editor as a nested properties structure.\n     *\n     * Initial value is `{}`, unless overridden by the `default` property.\n     */\n    Record = 17,\n\n    /**\n     * **Particle effect reference**:\n     *\n     * Appears in the editor as a particle effect resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    ParticleEffect = 18,\n\n    /** @hidden */\n    Count = 19,\n}\n\n/**\n * Cloning interface for component properties.\n *\n * Used for component initialization and cloning.\n */\nexport interface PropertyCloner {\n    /**\n     * Clone a property value.\n     * @param type Type of the property.\n     * @param value Value of the property.\n     * @returns The cloned value.\n     */\n    clone(type: Type, value: any): any;\n}\n\n/**\n * Interface describing a record class used in properties.\n *\n * ```ts\n * import {property, PropertyRecord} from '@wonderlandengine/api';\n * class Record implements PropertyRecord {\n *   @property.string()\n *   string: string;\n *   @property.record(SubRecord)\n *   subrecord: SubRecord;\n * }\n * ```\n *\n * @note Implementing `PropertyRecord` isn't required.\n */\nexport interface PropertyRecord {\n    new (): unknown;\n    /** Static properties definition, similar to {@link Component.Properties}. */\n    Properties?: Record<string, ComponentProperty>;\n    /** @hidden */\n    _propertyOrder?: string[];\n}\n\n/**\n * Default cloner implementation.\n *\n * Clones array-like properties and leaves all other types unchanged.\n */\nexport class DefaultPropertyCloner implements PropertyCloner {\n    clone(type: Type, value: any): any {\n        switch (type) {\n            case Type.Color:\n            case Type.Vector2:\n            case Type.Vector3:\n            case Type.Vector4:\n            case Type.Array:\n                /** @todo: Array should be deep cloned. */\n                return value.slice();\n            case Type.Record: {\n                if (!value || !value.constructor) return value;\n\n                const RecordClass = value.constructor as PropertyRecord;\n                const result = new RecordClass() as Record<string, any>;\n                for (const key in RecordClass.Properties) {\n                    const prop = RecordClass.Properties[key];\n                    result[key] = this.clone(prop.type, value[key]);\n                }\n                return result;\n            }\n            default:\n                return value;\n        }\n    }\n}\n\n/** Default cloner for property values. */\nexport const defaultPropertyCloner = new DefaultPropertyCloner();\n\n/**\n * Custom component property.\n *\n * For more information about component properties, have a look\n * at the {@link Component.Properties} attribute.\n */\nexport interface ComponentProperty {\n    /** Property type. */\n    type: Type;\n    /** Default value, depending on type. */\n    default?: any;\n    /** Values for {@link Type.Enum} */\n    values?: string[];\n    /** Record definition, used if the property type is {@link Type.Record}. */\n    record?: PropertyRecord;\n    element?: ComponentProperty;\n    required?: boolean;\n    /**\n     * Cloner for the property.\n     *\n     * If not defined, falls back to {@link defaultPropertyCloner}. To prevent\n     * any cloning, set a custom cloner that passes the original value back\n     * from {@link PropertyCloner.clone}. */\n    cloner?: PropertyCloner;\n}\n\n/**\n * Component property namespace.\n *\n * Usage:\n *\n * ```js\n * import {Component, Property} from '@wonderlandengine/api';\n *\n * class MyComponent extends Component {\n *     static Properties = {\n *         myBool: Property.bool(true),\n *         myInt: Property.int(42),\n *         myString: Property.string('Hello World!'),\n *         myMesh: Property.mesh()\n *     }\n * }\n * ```\n *\n * It's possible to nest properties using record, and array:\n *\n * ```js\n * import {Component, Property} from '@wonderlandengine/api';\n *\n * class Weapon {\n *     static Properties = {\n *         damage: Property.float(100.0),\n *         fireRate: Property.int(10)\n *     }\n * }\n * class Zombie {\n *     static Properties = {\n *         names: Property.string('Mad Zombie'),\n *         animation: Property.animation()\n *     }\n * }\n *\n * class Player extends Component {\n *     static Properties = {\n *         weapon: Property.record(Weapon),\n *         zombieTargets: Property.array(Zombie),\n *     }\n * }\n * ```\n *\n * For TypeScript users, you can use the decorators instead.\n */\nexport const Property = {\n    /**\n     * Create an boolean property.\n     *\n     * @param defaultValue The default value. If not provided, defaults to `false`.\n     */\n    bool(defaultValue: boolean = false): ComponentProperty {\n        return {type: Type.Bool, default: defaultValue};\n    },\n\n    /**\n     * Create an integer property.\n     *\n     * @param defaultValue The default value. If not provided, defaults to `0`.\n     */\n    int(defaultValue: number = 0): ComponentProperty {\n        return {type: Type.Int, default: defaultValue};\n    },\n\n    /**\n     * Create an float property.\n     *\n     * @param defaultValue The default value. If not provided, defaults to `0.0`.\n     */\n    float(defaultValue: number = 0.0): ComponentProperty {\n        return {type: Type.Float, default: defaultValue};\n    },\n\n    /**\n     * Create an string property.\n     *\n     * @param defaultValue The default value. If not provided, defaults to `''`.\n     */\n    string(defaultValue = ''): ComponentProperty {\n        return {type: Type.String, default: defaultValue};\n    },\n\n    /**\n     * Create an enumeration property.\n     *\n     * @param values The list of values.\n     * @param defaultValue The default value. Can be a string or an index into\n     *     `values`. If not provided, defaults to the first element.\n     */\n    enum(values: string[], defaultValue?: string | number): ComponentProperty {\n        return {type: Type.Enum, values, default: defaultValue};\n    },\n\n    /** Create an {@link Object3D} reference property. */\n    object(opts?: PropertyReferenceOptions): ComponentProperty {\n        return {type: Type.Object, default: null, required: opts?.required ?? false};\n    },\n\n    /** Create a {@link Mesh} reference property. */\n    mesh(opts?: PropertyReferenceOptions): ComponentProperty {\n        return {type: Type.Mesh, default: null, required: opts?.required ?? false};\n    },\n\n    /** Create a {@link Texture} reference property. */\n    texture(opts?: PropertyReferenceOptions): ComponentProperty {\n        return {type: Type.Texture, default: null, required: opts?.required ?? false};\n    },\n\n    /** Create a {@link Material} reference property. */\n    material(opts?: PropertyReferenceOptions): ComponentProperty {\n        return {type: Type.Material, default: null, required: opts?.required ?? false};\n    },\n\n    /** Create an {@link Animation} reference property. */\n    animation(opts?: PropertyReferenceOptions): ComponentProperty {\n        return {type: Type.Animation, default: null, required: opts?.required ?? false};\n    },\n\n    /** Create a {@link Skin} reference property. */\n    skin(opts?: PropertyReferenceOptions): ComponentProperty {\n        return {type: Type.Skin, default: null, required: opts?.required ?? false};\n    },\n\n    /** Create a {@link ParticleEffect} reference property. */\n    particleEffect(opts?: PropertyReferenceOptions): ComponentProperty {\n        return {\n            type: Type.ParticleEffect,\n            default: null,\n            required: opts?.required ?? false,\n        };\n    },\n\n    /**\n     * Create a color property.\n     *\n     * @param r The red component, in the range [0; 1].\n     * @param g The green component, in the range [0; 1].\n     * @param b The blue component, in the range [0; 1].\n     * @param a The alpha component, in the range [0; 1].\n     */\n    color(r = 0.0, g = 0.0, b = 0.0, a = 1.0): ComponentProperty {\n        return {type: Type.Color, default: [r, g, b, a]};\n    },\n\n    /**\n     * Create a two-element vector property.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     */\n    vector2(x = 0.0, y = 0.0): ComponentProperty {\n        return {type: Type.Vector2, default: [x, y]};\n    },\n\n    /**\n     * Create a three-element vector property.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     */\n    vector3(x = 0.0, y = 0.0, z = 0.0): ComponentProperty {\n        return {type: Type.Vector3, default: [x, y, z]};\n    },\n\n    /**\n     * Create a four-element vector property.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     * @param w The w component.\n     */\n    vector4(x = 0.0, y = 0.0, z = 0.0, w = 0.0): ComponentProperty {\n        return {type: Type.Vector4, default: [x, y, z, w]};\n    },\n\n    /**\n     * Create a class property.\n     *\n     * @param definition The template class, containing sub properties.\n     */\n    record(definition: PropertyRecord): ComponentProperty {\n        return {type: Type.Record, record: definition, default: new definition()};\n    },\n\n    /**\n     * Create an unsized array of properties.\n     *\n     * @note Array properties can only contain a single element type.\n     *\n     * @param element The element property.\n     */\n    array(element: ComponentProperty): ComponentProperty {\n        /** @todo: Implement ArrayBuffer, which are much faster to decode */\n        return {type: Type.Array, element, default: undefined};\n    },\n};\n\n/**\n * Options to create a reference property, i.e.,\n * object, mesh, animation, skin, etc...\n */\nexport interface PropertyReferenceOptions {\n    /** If `true`, the component will throw if the property isn't initialized. */\n    required?: boolean;\n}\n\n/** All the keys that exists on the {@link Property} object. */\nexport type PropertyKeys = keyof typeof Property;\n\n/** Retrieve all the argument types of a {@link Property} function. */\nexport type PropertyArgs<key extends PropertyKeys> = Parameters<(typeof Property)[key]>;\n", "import {Component, ComponentConstructor} from './wonderland.js';\nimport {Property, PropertyArgs, PropertyKeys, ComponentProperty, Type} from './property.js';\n\n/**\n * Decorator for JS component properties.\n *\n * @param data The property description as an object literal\n * @returns A decorator function modifying the `Properties` static\n *     attribute\n */\nfunction propertyDecorator(data: ComponentProperty) {\n    return function (target: any, propertyKey: string): void {\n        const ctor = target.constructor as ComponentConstructor;\n        ctor.Properties = ctor.hasOwnProperty('Properties') ? ctor.Properties : {};\n        ctor.Properties[propertyKey] = data;\n    };\n}\n\n/**\n * Decorator for making a getter enumerable.\n *\n * Usage:\n *\n * ```ts\n * class MyClass {\n *     @enumerable()\n *     get projectionMatrix(): Float32Array { ... }\n * }\n * ```\n */\nexport function enumerable() {\n    return function (_: any, __: string, descriptor: PropertyDescriptor) {\n        descriptor.enumerable = true;\n    };\n}\n\n/**\n * Decorator for native properties.\n *\n * Usage:\n *\n * ```ts\n * class MyClass {\n *     @nativeProperty()\n *     get projectionMatrix(): Float32Array { ... }\n * }\n * ```\n */\nexport function nativeProperty() {\n    return function (\n        target: Component,\n        propertyKey: string,\n        descriptor: PropertyDescriptor\n    ) {\n        enumerable()(target, propertyKey, descriptor);\n        propertyDecorator({type: Type.Native})(target, propertyKey);\n    };\n}\n\n/**\n * Property decorators namespace.\n *\n * You can use the decorators to mark a class attribute as\n * a Wonderland Engine property.\n *\n * Usage:\n *\n * ```ts\n * import {Mesh} from '@wonderlandengine/api';\n * import {property} from '@wonderlandengine/api/decorators.js';\n *\n * class MyComponent extends Component {\n *     @property.bool(true)\n *     myBool!: boolean;\n *\n *     @property.int(42)\n *     myInt!: number;\n *\n *     @property.string('Hello World!')\n *     myString!: string;\n *\n *     @property.mesh()\n *     myMesh!: Mesh;\n * }\n * ```\n *\n * For JavaScript users, please declare the properties statically.\n */\nexport const property = {} as {\n    [key in PropertyKeys]: (\n        ...args: PropertyArgs<key>\n    ) => ReturnType<typeof propertyDecorator>;\n};\n\nfor (const name in Property) {\n    /* Assign each property functor to a TypeScript decorator.\n     * This code extracts parameters and return type to provide proper\n     * typings to the user. */\n    property[name as PropertyKeys] = (...args: PropertyArgs<PropertyKeys>) => {\n        const functor = Property[name as PropertyKeys] as (\n            ...args: unknown[]\n        ) => ComponentProperty;\n        return propertyDecorator(functor(...args));\n    };\n}\n", "import {ImageLike} from '../types.js';\n\n/**\n * Check if a given value is a native string or a `String` instance.\n *\n * @param value The value to check.\n * @returns `true` if the `value` has type string literal or `String`, `false` otherwise.\n */\nexport function isString(value: any): value is string {\n    if (value === '') return true;\n    return value && (typeof value === 'string' || value.constructor === String);\n}\n\n/**\n * Check if a given value is a native number or a `Number` instance.\n *\n * @param value The value to check.\n * @returns `true` if the `value` has type number literal or `Number`, `false` otherwise.\n */\nexport function isNumber(value: any): value is number {\n    if (value === null || value === undefined) return false;\n    return typeof value === 'number' || value.constructor === Number;\n}\n\n/**\n * Check whether a given value is a visual media.\n *\n * @param value The value to check\n * @returns `true` if the `value` is an image, video, or canvas.\n */\nexport function isImageLike(value: any): value is ImageLike {\n    return (\n        value instanceof HTMLImageElement ||\n        value instanceof HTMLVideoElement ||\n        value instanceof HTMLCanvasElement\n    );\n}\n", "/**\n * Listener callback type, used in {@link Emitter.add}.\n */\nexport type ListenerCallback<T extends unknown[] = void[]> = (...data: T) => void;\n\n/**\n * Registration options for a listener in an {@link Emitter}.\n */\nexport interface ListenerOptions {\n    /**\n     * Listener identifier. This is used to find and remove the listener\n     * without needing the callback reference.\n     *\n     * The identifier can be any type. However, remember that the comparison will be\n     * by-value for primitive types (string, number), but by reference for objects.\n     *\n     * For more information, please look at the {@link Emitter.remove} method.\n     */\n    id: any | undefined;\n    /**\n     * If `true`, the listener is automatically removed after it's invoked.\n     * Defaults to `false`.\n     */\n    once: boolean;\n}\n\n/** Internal listener type. */\ntype Listener<T extends unknown[]> = ListenerOptions & {\n    callback: ListenerCallback<T>;\n};\n\n/** Internal type for transaction. */\nenum TransactionType {\n    Addition = 1,\n    Removal = 2,\n}\n\n/**\n * Event emitter.\n *\n * This class allows to register listeners that will get notified by the emitter.\n *\n * Usage example:\n *\n * ```js\n * // `onPreRender` is an `Emitter` instance.\n * scene.onPreRender.add(() => console.log('before rendering'));\n * // `onPostRender` is an `Emitter` instance.\n * scene.onPostRender.add(() => console.log('after rendering'));\n * ```\n *\n * You can create your own emitters:\n *\n * ```js\n * import {Emitter} from '@wonderlandengine/api';\n *\n * const emitter = new Emitter();\n * ```\n *\n * You can notify listeners in to your emitter using {@link Emitter.notify}:\n *\n * ```js\n * // Notifies all the listeners.\n * emitter.notify();\n * // Notifies all the listeners with some data.\n * emitter.notify({ myInt: 42, myStr: 'Hello World!' });\n * ```\n *\n * @category event\n */\nexport class Emitter<T extends unknown[] = void[]> {\n    /**\n     * List of listeners to trigger when `notify` is called.\n     *\n     * @hidden\n     */\n    protected readonly _listeners: Listener<T>[] = [];\n\n    /**\n     * `true` if the emitter is currently notifying listeners. This\n     * is used to defer addition and removal.\n     *\n     * @hidden\n     */\n    private _notifying = false;\n\n    /**\n     * Pending additions / removals, performed during a notification.\n     *\n     * @hidden\n     */\n    private readonly _transactions: {\n        type: TransactionType;\n        data: Listener<T> | ListenerCallback<T>;\n    }[] = [];\n\n    /**\n     * Register a new listener to be triggered on {@link Emitter.notify}.\n     *\n     * Basic usage:\n     *\n     * ```js\n     * emitter.add((data) => {\n     *     console.log('event received!');\n     *     console.log(data);\n     * });\n     * ```\n     *\n     * Automatically remove the listener when an event is received:\n     *\n     * ```js\n     * emitter.add((data) => {\n     *     console.log('event received!');\n     *     console.log(data);\n     * }, {once: true});\n     * ```\n     *\n     * @param listener The callback to register.\n     * @param opts The listener options. For more information, please have a look\n     *     at the {@link ListenerOptions} interface.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    add(listener: ListenerCallback<T>, opts: Partial<ListenerOptions> = {}): this {\n        const {once = false, id = undefined} = opts;\n        const data = {id, once, callback: listener};\n        if (this._notifying) {\n            this._transactions.push({type: TransactionType.Addition, data});\n            return this;\n        }\n        this._listeners.push(data);\n        return this;\n    }\n\n    /**\n     * Equivalent to {@link Emitter.add}.\n     *\n     * @param listeners The callback(s) to register.\n     * @returns Reference to self (for method chaining).\n     *\n     * @deprecated Please use {@link Emitter.add} instead.\n     */\n    push(...listeners: ListenerCallback<T>[]): this {\n        for (const cb of listeners) this.add(cb);\n        return this;\n    }\n\n    /**\n     * Register a new listener to be triggered on {@link Emitter.notify}.\n     *\n     * Once notified, the listener will be automatically removed.\n     *\n     * The method is equivalent to calling {@link Emitter.add} with:\n     *\n     * ```js\n     * emitter.add(listener, {once: true});\n     * ```\n     *\n     * @param listener The callback to register.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    once(listener: ListenerCallback<T>) {\n        return this.add(listener, {once: true});\n    }\n\n    /**\n     * Remove a registered listener.\n     *\n     * Usage with a callback:\n     *\n     * ```js\n     * const listener = (data) => console.log(data);\n     * emitter.add(listener);\n     *\n     * // Remove using the callback reference:\n     * emitter.remove(listener);\n     * ```\n     *\n     * Usage with an id:\n     *\n     * ```js\n     * emitter.add((data) => console.log(data), {id: 'my-callback'});\n     *\n     * // Remove using the id:\n     * emitter.remove('my-callback');\n     * ```\n     *\n     * Using identifiers, you will need to ensure your value is unique to avoid\n     * removing listeners from other libraries, e.g.,:\n     *\n     * ```js\n     * emitter.add((data) => console.log(data), {id: 'non-unique'});\n     * // This second listener could be added by a third-party library.\n     * emitter.add((data) => console.log('Hello From Library!'), {id: 'non-unique'});\n     *\n     * // Ho Snap! This also removed the library listener!\n     * emitter.remove('non-unique');\n     * ```\n     *\n     * The identifier can be any type. However, remember that the comparison will be\n     * by-value for primitive types (string, number), but by reference for objects.\n     *\n     * Example:\n     *\n     * ```js\n     * emitter.add(() => console.log('Hello'), {id: {value: 42}});\n     * emitter.add(() => console.log('World!'), {id: {value: 42}});\n     * emitter.remove({value: 42}); // None of the above listeners match!\n     * emitter.notify(); // Prints 'Hello' and 'World!'.\n     * ```\n     *\n     * Here, both emitters have id `{value: 42}`, but the comparison is made by reference. Thus,\n     * the `remove()` call has no effect. We can make it work by doing:\n     *\n     * ```js\n     * const id = {value: 42};\n     * emitter.add(() => console.log('Hello'), {id});\n     * emitter.add(() => console.log('World!'), {id});\n     * emitter.remove(id); // Same reference, it works!\n     * emitter.notify(); // Doesn't print.\n     * ```\n     *\n     * @param listener The registered callback or a value representing the `id`.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    remove(listener: ListenerCallback<T> | any): this {\n        if (this._notifying) {\n            this._transactions.push({type: TransactionType.Removal, data: listener});\n            return this;\n        }\n\n        const listeners = this._listeners;\n        for (let i = 0; i < listeners.length; ++i) {\n            const target = listeners[i];\n            if (target.callback === listener || target.id === listener) {\n                listeners.splice(i--, 1);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Check whether the listener is registered.\n     *\n     * @note This method performs a linear search.\n     *\n     * * @note Doesn't account for pending listeners, i.e.,\n     * listeners added / removed during a notification.\n     *\n     * @param listener The registered callback or a value representing the `id`.\n     * @returns `true` if the handle is found, `false` otherwise.\n     */\n    has(listener: ListenerCallback<T> | any): boolean {\n        const listeners = this._listeners;\n        for (let i = 0; i < listeners.length; ++i) {\n            const target = listeners[i];\n            if (target.callback === listener || target.id === listener) return true;\n        }\n        return false;\n    }\n\n    /**\n     * Notify listeners with the given data object.\n     *\n     * @note This method ensures all listeners are called even if\n     * an exception is thrown. For (possibly) faster notification,\n     * please use {@link Emitter.notifyUnsafe}.\n     *\n     * @param data The data to pass to listener when invoked.\n     */\n    notify(...data: T): void {\n        const listeners = this._listeners;\n\n        this._notifying = true;\n        for (let i = 0; i < listeners.length; ++i) {\n            const listener = listeners[i];\n            if (listener.once) listeners.splice(i--, 1);\n            try {\n                listener.callback(...data);\n            } catch (e) {\n                console.error(e);\n            }\n        }\n        this._notifying = false;\n\n        /* Process deferred additions & removals */\n        this._flushTransactions();\n    }\n\n    /**\n     * Notify listeners with the given data object.\n     *\n     * @note Because this method doesn't catch exceptions, some listeners\n     * will be skipped on a throw. Please use {@link Emitter.notify} for safe\n     * notification.\n     *\n     * @param data The data to pass to listener when invoked.\n     */\n    notifyUnsafe(...data: T): void {\n        const listeners = this._listeners;\n\n        for (let i = 0; i < listeners.length; ++i) {\n            const listener = listeners[i];\n            if (listener.once) listeners.splice(i--, 1);\n            listener.callback(...data);\n        }\n\n        /* Process deferred additions & removals */\n        this._flushTransactions();\n    }\n\n    /**\n     * Return a promise that will resolve on the next event.\n     *\n     * @note The promise might never resolve if no event is sent.\n     *\n     * @returns A promise that resolves with the data passed to\n     *     {@link Emitter.notify}.\n     */\n    promise(): Promise<T> {\n        return new Promise((res, _) => {\n            this.once((...args) => {\n                if (args.length > 1) {\n                    res(args);\n                } else {\n                    res(args[0] as T);\n                }\n            });\n        });\n    }\n\n    /**\n     * Number of listeners.\n     *\n     * @note Doesn't account for pending listeners, i.e.,\n     * listeners added / removed during a notification.\n     */\n    get listenerCount() {\n        return this._listeners.length;\n    }\n\n    /** `true` if it has no listeners, `false` otherwise. */\n    get isEmpty() {\n        return this.listenerCount === 0;\n    }\n\n    /**\n     * Flush all pending transactions.\n     *\n     * @hidden\n     */\n    private _flushTransactions() {\n        const listeners = this._listeners;\n        for (const transaction of this._transactions) {\n            if (transaction.type === TransactionType.Addition) {\n                listeners.push(transaction.data as Listener<T>);\n            } else {\n                this.remove(transaction.data as ListenerCallback<T>);\n            }\n        }\n        this._transactions.length = 0;\n    }\n}\n\n/**\n * Registration options for a listener in an {@link RetainEmitter}.\n *\n * Those options extend {@link ListenerOptions}.\n */\nexport interface RetainListenerOptions extends ListenerOptions {\n    /**\n     * If `true`, directly resolves if the emitter retains a value. If `false`,\n     * the listener isn't invoked until the next {@link Emitter.notify}.\n     *\n     * Defaults to `true`.\n     */\n    immediate: boolean;\n}\n\n/* Dummy value used with RetainEmitter. */\nconst RetainEmitterUndefined: Record<any, unknown> = {};\n\n/**\n * Event emitter that retains event data when notified.\n *\n * After a notification happens, subsequent calls to {@link RetainEmitter.add} will get\n * automatically notified.\n *\n * You can use another emitter in order to cancel the last retained event:\n *\n * ```js\n * import {Emitter, RetainedEmitter} from '@wonderlandengine/api';\n *\n * const onStart = new RetainedEmitter();\n *\n * onStart.notify(42);\n * onStart.add((data) => console.log(data)) // Prints '42'.\n * ```\n *\n * You can reset the state of the emitter, i.e., making it forget about the\n * last event using:\n *\n * ```js\n * import {Emitter, RetainedEmitter} from '@wonderlandengine/api';\n *\n * const onStart = new RetainedEmitter();\n * onStart.notify(42);\n * onStart.add((data) => console.log(data)) // Prints '42'.\n *\n * // Reset the state of the emitter.\n * onStart.reset();\n * onStart.add((data) => console.log(data)) // Doesn't print anything.\n * ```\n *\n * For more information about emitters, please have a look at the base {@link Emitter} class.\n *\n * @category event\n */\nexport class RetainEmitter<T extends unknown[] = void[]> extends Emitter<T> {\n    /** Pre-resolved data. @hidden */\n    protected _event: T | typeof RetainEmitterUndefined = RetainEmitterUndefined;\n\n    /**\n     * Emitter target used to reset the state of this emitter.\n     *\n     * @hidden\n     */\n    protected readonly _reset: Emitter<any> | undefined;\n\n    /** @override */\n    add(listener: ListenerCallback<T>, opts?: Partial<RetainListenerOptions>): this {\n        const immediate = opts?.immediate ?? true;\n        if (this._event !== RetainEmitterUndefined && immediate) {\n            listener(...(this._event as T));\n        }\n        super.add(listener, opts);\n        return this;\n    }\n\n    /**\n     * @override\n     *\n     * @param listener The callback to register.\n     * @param immediate If `true`, directly resolves if the emitter retains a value.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    once(listener: ListenerCallback<T>, immediate?: boolean) {\n        return this.add(listener, {once: true, immediate});\n    }\n\n    /** @override */\n    notify(...data: T): void {\n        this._event = data;\n        super.notify(...data);\n    }\n\n    /** @override */\n    notifyUnsafe(...data: T): void {\n        this._event = data;\n        super.notifyUnsafe(...data);\n    }\n\n    /**\n     * Reset the state of the emitter.\n     *\n     * Further call to {@link Emitter.add} will not automatically resolve,\n     * until a new call to {@link Emitter.notify} is performed.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    reset(): this {\n        this._event = RetainEmitterUndefined;\n        return this;\n    }\n\n    /** Returns the retained data, or `undefined` if no data was retained. */\n    get data(): T | undefined {\n        return this.isDataRetained ? this._event : undefined;\n    }\n\n    /** `true` if data is retained from the last event, `false` otherwise. */\n    get isDataRetained(): boolean {\n        return this._event !== RetainEmitterUndefined;\n    }\n}\n", "import {WonderlandEngine} from '../engine.js';\nimport {Prefab} from '../prefab.js';\nimport {Scene} from '../scene.js';\nimport {FirstConstructorParam} from '../types.js';\n\n/** Interface for a resource class */\ntype ResourceConstructor<T extends SceneResource | Resource> = {\n    new (host: FirstConstructorParam<T>, index: number): T;\n};\n\n/**\n * Create a proxy throwing destroyed errors upon access.\n *\n * @param type The type to display upon error\n * @returns The proxy instance\n */\nfunction createDestroyedProxy<T extends SceneResource | Resource>(\n    host: FirstConstructorParam<T>,\n    type: ResourceConstructor<T>\n) {\n    return new Proxy(\n        {},\n        {\n            get(_, param: string) {\n                if (param === 'isDestroyed') return true;\n                throw new Error(\n                    `Cannot read '${param}' of destroyed '${type.name}' resource from ${host}`\n                );\n            },\n            set(_, param: string) {\n                throw new Error(\n                    `Cannot write '${param}' of destroyed '${type.name}' resource from ${host}`\n                );\n            },\n        }\n    );\n}\n\n/**\n * Base class for engine resources, such as:\n * - {@link Texture}\n * - {@link Mesh}\n * - {@link Material}\n *\n * @since 1.2.0\n */\nexport abstract class Resource {\n    /** Relative index in the host. @hidden */\n    readonly _index: number = -1;\n    /** For compatibility with SceneResource. @hidden */\n    readonly _id: number = -1;\n    /** @hidden */\n    private readonly _engine: WonderlandEngine;\n\n    constructor(engine: WonderlandEngine, index: number) {\n        this._engine = engine;\n        this._index = index;\n        this._id = index;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n\n    /** Index of this resource in the {@link Scene}'s manager. */\n    get index() {\n        return this._index;\n    }\n\n    /**\n     * Checks equality by comparing ids and **not** the JavaScript reference.\n     *\n     * @deprecated Use JavaScript reference comparison instead:\n     *\n     * ```js\n     * const meshA = engine.meshes.create({vertexCount: 1});\n     * const meshB = engine.meshes.create({vertexCount: 1});\n     * const meshC = meshB;\n     * console.log(meshA === meshB); // false\n     * console.log(meshA === meshA); // true\n     * console.log(meshB === meshC); // true\n     * ```\n     */\n    equals(other: this | undefined | null): boolean {\n        if (!other) return false;\n        return this._index === other._index;\n    }\n\n    /**\n     * `true` if the object is destroyed, `false` otherwise.\n     *\n     * If {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`,\n     * reading a class attribute / method will throw.\n     */\n    get isDestroyed() {\n        return this._index <= 0;\n    }\n}\n\n/**\n * Base class for scene resources, such as:\n *  * - {@link Texture}\n * - {@link Mesh}\n * - {@link Material}\n * - {@link Skin}\n * - {@link Animation}\n *\n * @since 1.2.0\n */\nexport abstract class SceneResource {\n    /** @hidden */\n    static _pack(scene: number, index: number) {\n        return (scene << 22) | index;\n    }\n\n    /** Relative index in the host. @hidden */\n    readonly _index: number = -1;\n    /** For compatibility with SceneResource. @hidden */\n    readonly _id: number = -1;\n    /** @hidden */\n    protected readonly _scene: Prefab;\n\n    constructor(scene: Prefab, index: number) {\n        this._scene = scene;\n        this._index = index;\n        this._id = SceneResource._pack(scene._index, index);\n    }\n\n    /**\n     * Checks equality by comparing ids and **not** the JavaScript reference.\n     *\n     * @deprecated Use JavaScript reference comparison instead:\n     *\n     * ```js\n     * const meshA = engine.meshes.create({vertexCount: 1});\n     * const meshB = engine.meshes.create({vertexCount: 1});\n     * const meshC = meshB;\n     * console.log(meshA === meshB); // false\n     * console.log(meshA === meshA); // true\n     * console.log(meshB === meshC); // true\n     * ```\n     */\n    equals(other: this | undefined | null): boolean {\n        if (!other) return false;\n        return this._id === other._id;\n    }\n\n    /** Hosting instance. */\n    get scene() {\n        return this._scene;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._scene.engine;\n    }\n\n    /** Index of this resource in the {@link Scene}'s manager. */\n    get index() {\n        return this._index;\n    }\n\n    /**\n     * `true` if the object is destroyed, `false` otherwise.\n     *\n     * If {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`,\n     * reading a class attribute / method will throw.\n     */\n    get isDestroyed() {\n        return this._id <= 0;\n    }\n}\n\n/**\n * Manager for resources.\n *\n * Resources are accessed via the engine they belong to.\n *\n * @see {@link WonderlandEngine.textures}, {@link WonderlandEngine.meshes},\n * and {@link WonderlandEngine.materials}.\n *\n * @since 1.2.0\n */\nexport class ResourceManager<T extends SceneResource | Resource> {\n    /** @hidden */\n    protected readonly _host: FirstConstructorParam<T>;\n    /** Cache. @hidden */\n    protected readonly _cache: (T | null)[] = [];\n\n    /** Resource class. @hidden */\n    private readonly _template: ResourceConstructor<T>;\n\n    /** Destructor proxy, used if {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`. @hidden */\n    private _destructor: {} | null = null;\n\n    private readonly _engine: WonderlandEngine;\n\n    /**\n     * Create a new manager\n     *\n     * @param host The host containing the managed resources.\n     * @param Class The class to instantiate when wrapping an index.\n     *\n     * @hidden\n     */\n    constructor(host: FirstConstructorParam<T>, Class: ResourceConstructor<T>) {\n        this._host = host;\n        this._template = Class;\n        this._engine = (host as Prefab).engine ?? host;\n    }\n\n    /**\n     * Wrap the index into a resource instance.\n     *\n     * @note The index is relative to the host, i.e., doesn't pack the host index (if any).\n     *\n     * @param index The resource index.\n     * @returns\n     */\n    wrap(index: number) {\n        if (index <= 0) return null;\n        const texture =\n            this._cache[index] ??\n            (this._cache[index] = new this._template(this._host, index));\n        return texture;\n    }\n\n    /**\n     * Retrieve the resource at the given index.\n     *\n     * @note The index is relative to the host, i.e., doesn't pack the host index.\n     */\n    get(index: number): T | null {\n        return this._cache[index] ?? null;\n    }\n\n    /** Number of textures allocated in the manager. */\n    get allocatedCount() {\n        return this._cache.length;\n    }\n\n    /**\n     * Number of textures in the manager.\n     *\n     * @note For performance reasons, avoid calling this method when possible.\n     */\n    get count() {\n        let count = 0;\n        for (const res of this._cache) {\n            if (res && res.index >= 0) ++count;\n        }\n        return count;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n\n    /**\n     * Destroy the instance.\n     *\n     * @note This method takes care of the prototype destruction.\n     *\n     * @hidden\n     */\n    _destroy(instance: T) {\n        const index = instance.index;\n        (instance._index as number) = -1;\n        (instance._id as number) = -1;\n        this._cache[index] = null;\n\n        if (!this.engine.erasePrototypeOnDestroy) return;\n\n        if (!this._destructor)\n            this._destructor = createDestroyedProxy(this._host, this._template);\n        Object.setPrototypeOf(instance, this._destructor);\n    }\n\n    /**\n     * Mark all instances as destroyed.\n     *\n     * @hidden\n     */\n    _clear() {\n        if (!this.engine.erasePrototypeOnDestroy) return;\n        for (let i = 0; i < this._cache.length; ++i) {\n            const instance = this._cache[i];\n            if (instance) this._destroy(instance);\n        }\n        this._cache.length = 0;\n    }\n}\n", "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2014-2016 Patrick Gansterer <paroga@paroga.com>\n * Copyright (c) 2020-2023 Aaron Huggins <ahuggins@aaronhuggins.com>\n * Copyright (c) 2024 Wonderland GmbH <contact@wonderlandengine.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst kCborTagBignum = 2;\nconst kCborTagNegativeBignum = 3;\n/* RFC 8746 Tag values for typed little-endian arrays */\nconst kCborTagUint8 = 64;\nconst kCborTagUint16 = 69;\nconst kCborTagUint32 = 70;\nconst kCborTagUint64 = 71;\nconst kCborTagInt8 = 72;\nconst kCborTagInt16 = 77;\nconst kCborTagInt32 = 78;\nconst kCborTagInt64 = 79;\nconst kCborTagFloat32 = 85;\nconst kCborTagFloat64 = 86;\n\n/**\n * Whether key/value dictionaries should be decoded as objects or as\n * `Map<K, V>`. The latter is useful if non-string keys or iterating in\n * insertion order are required.\n */\nexport type DictionaryOption = 'object' | 'map';\n\n/** Options for the decoder. */\nexport interface Options {\n    /** The dictionary type to use. Defaults to `object`. */\n    dictionary?: DictionaryOption;\n}\n\n/** A function to modify tagged values which are encountered during decoding. */\nexport type Tagger = (tag: number | bigint, value: any) => any;\n\n/**\n * Converts a Concise Binary Object Representation (CBOR) buffer into an object.\n *\n * ```js\n * const buffer = new Uint8Array([0xa2, 0x01, 0x02, 0x03, 0x04]).buffer;\n * const decoded = decode(buffer);\n * console.log(decoded); // { \"1\": 2, \"3\": 4 }\n * ```\n *\n * CBOR values can be wrapped in a numeric tag. To handle and possibly\n * transform tagged values, pass a tagger function:\n *\n * ```js\n * const buffer = new Uint8Array([\n *   0xa1, 0x63, 0x75, 0x72, 0x6c, 0xd8, 0x20, 0x70,\n *   0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x73,\n *   0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f\n * ]);\n * const decoded = decode(buffer, (tag, value) => {\n *     if (tag === 32) return new URL(value);\n *     return value;\n * });\n * console.log(decoded); // { url: URL { href: \"http://site.com/\" } }\n * ```\n *\n * Decoded basic types generally match the equivalent JavaScript types. Byte\n * strings are decoded to Uint8Array.\n *\n * Tagged values are left as-is, with the following exceptions:\n * - Bignum values (byte strings with tag 2 or 3) are decoded to BigInt\n * - Little-endian versions of typed arrays as defined in RFC 8746 are decoded\n *   to JavaScript typed arrays\n *\n * @param data A valid CBOR buffer.\n * @param tagger Optional callback for transformation of tagged values.\n * @param options Options for decoding behavior.\n * @returns The CBOR buffer converted to a JavaScript value.\n */\nexport function decode<T = any>(\n    data: Uint8Array,\n    tagger: Tagger = (_, value) => value,\n    options: Options = {}\n): T {\n    const reader = new CBORReader(data);\n    reader.tagger = tagger;\n    if (options.dictionary) {\n        reader.dictionary = options.dictionary;\n    }\n\n    const ret = reader.decodeItem();\n    if (reader.offset !== data.byteLength) {\n        throw new Error('CBORError: Remaining bytes');\n    }\n    return ret;\n}\n\nexport enum CBORType {\n    Array = 0,\n    Record = 1,\n    Constant = 2,\n    Native = 3,\n}\n\n/**\n * Check whether the type is an array, a record,\n * or a native type (decodable without recursion).\n *\n * @param typeInfo Type information obtained using `readTypeInfo`.\n * @returns The type category.\n */\nexport function getType(typeInfo: number): CBORType {\n    const majorType = typeInfo >> 5;\n    const additionalInformation = typeInfo & 0x1f;\n    switch (majorType) {\n        case 4:\n            return CBORType.Array;\n        case 5:\n            return CBORType.Record;\n        case 7:\n            return CBORType.Constant;\n    }\n    return CBORType.Native;\n}\n\nexport function isUndefined(type: CBORType, length: number) {\n    return type === CBORType.Constant && length === 23;\n}\n\n/**\n * CBOR reader.\n */\nexport class CBORReader {\n    dataView: DataView;\n    data: Uint8Array;\n    offset: number;\n    tagger: Tagger = (_, value) => value;\n    dictionary: 'object' | 'map' = 'object';\n\n    constructor(data: Uint8Array) {\n        this.dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        this.data = data;\n        this.offset = 0;\n    }\n\n    /* Wonderland extra methods. */\n\n    /**\n     * Read type information and move the cursor.\n     *\n     * @note Must be called before reading the value.\n     */\n    readTypeInfo() {\n        return this.readUint8();\n    }\n\n    /**\n     * Read the array length.\n     *\n     * @note Must not be called if the type is a constant.\n     *\n     * @param typeInfo Type information obtained using `readTypeInfo`.\n     * @returns The array length.\n     */\n    readArrayLength(typeInfo: number) {\n        const majorType = typeInfo >> 5;\n        const additionalInformation = typeInfo & 0x1f;\n        const length = this.readLength(additionalInformation);\n        if (length < 0 && (majorType < 2 || 6 < majorType)) {\n            throw new Error('CBORError: Invalid length');\n        }\n        return length;\n    }\n\n    /* CBOR original decoding methods. */\n\n    /**\n     * Recursively read the item.\n     *\n     * @note This method will recursively allocate arrays and records\n     * based the item type.\n     *\n     * @param typeInfo Type information obtained using `readTypeInfo`.\n     * @returns The decoded value.\n     */\n    readItem(typeInfo: number, inputLen: number | null = null): any {\n        const majorType = typeInfo >> 5;\n        const additionalInformation = typeInfo & 0x1f;\n        let i;\n\n        if (majorType === 7) {\n            switch (additionalInformation) {\n                case 25:\n                    return this.readFloat16();\n                case 26:\n                    return this.readFloat32();\n                case 27:\n                    return this.readFloat64();\n            }\n        }\n\n        let length = inputLen === null ? this.readLength(additionalInformation) : inputLen;\n        if (length < 0 && (majorType < 2 || 6 < majorType)) {\n            throw new Error('CBORError: Invalid length');\n        }\n\n        switch (majorType) {\n            case 0:\n                return length;\n            case 1:\n                if (typeof length === 'number') {\n                    return -1 - length;\n                }\n                return -1n - length;\n            case 2: {\n                if (length < 0) {\n                    const elements = [];\n                    let fullArrayLength = 0;\n                    while ((length = this.readIndefiniteStringLength(majorType)) >= 0) {\n                        fullArrayLength += length;\n                        elements.push(this.readArrayBuffer(length));\n                    }\n                    const fullArray = new Uint8Array(fullArrayLength);\n                    let fullArrayOffset = 0;\n                    for (i = 0; i < elements.length; ++i) {\n                        fullArray.set(elements[i], fullArrayOffset);\n                        fullArrayOffset += elements[i].length;\n                    }\n                    return fullArray;\n                }\n                return this.readArrayBuffer(length as number).slice();\n            }\n            case 3: {\n                /* Can't use TextDecoder.decode() because not all browsers\n                 * support calling it with an underlying SharedArrayBuffer yet.\n                 * See https://github.com/whatwg/encoding/issues/172 */\n                /** @todo Re-evaluate browser support */\n                const utf16data: number[] = [];\n                if (length < 0) {\n                    while ((length = this.readIndefiniteStringLength(majorType)) >= 0) {\n                        this.appendUtf16Data(utf16data, length);\n                    }\n                } else {\n                    this.appendUtf16Data(utf16data, length as number);\n                }\n                let string = '';\n                const DECODE_CHUNK_SIZE = 8192;\n                for (i = 0; i < utf16data.length; i += DECODE_CHUNK_SIZE) {\n                    string += String.fromCharCode.apply(\n                        null,\n                        utf16data.slice(i, i + DECODE_CHUNK_SIZE)\n                    );\n                }\n                return string;\n            }\n            case 4: {\n                let retArray;\n                if (length < 0) {\n                    retArray = [];\n                    while (!this.readBreak()) {\n                        retArray.push(this.decodeItem());\n                    }\n                } else {\n                    retArray = new Array(length);\n                    for (i = 0; i < length; ++i) {\n                        retArray[i] = this.decodeItem();\n                    }\n                }\n                return retArray;\n            }\n            case 5: {\n                if (this.dictionary === 'map') {\n                    const retMap = new Map<any, any>();\n                    for (i = 0; i < length || (length < 0 && !this.readBreak()); ++i) {\n                        const key = this.decodeItem();\n                        if (retMap.has(key)) {\n                            throw new Error('CBORError: Duplicate key encountered');\n                        }\n                        retMap.set(key, this.decodeItem());\n                    }\n                    return retMap;\n                }\n                const retObject: any = {};\n                for (i = 0; i < length || (length < 0 && !this.readBreak()); ++i) {\n                    const key = this.decodeItem();\n                    if (Object.prototype.hasOwnProperty.call(retObject, key)) {\n                        throw new Error('CBORError: Duplicate key encountered');\n                    }\n                    retObject[key] = this.decodeItem();\n                }\n                return retObject;\n            }\n            case 6: {\n                const value = this.decodeItem();\n                const tag = length;\n                if (value instanceof Uint8Array) {\n                    switch (tag) {\n                        case kCborTagBignum:\n                        case kCborTagNegativeBignum:\n                            let num = value.reduce((acc, n) => (acc << 8n) + BigInt(n), 0n);\n                            if (tag == kCborTagNegativeBignum) {\n                                num = -1n - num;\n                            }\n                            return num;\n                        /* Little-endian typed arrays (RFC 8746) */\n                        case kCborTagUint8:\n                            return value;\n                        case kCborTagInt8:\n                            return new Int8Array(value.buffer);\n                        case kCborTagUint16:\n                            return new Uint16Array(value.buffer);\n                        case kCborTagInt16:\n                            return new Int16Array(value.buffer);\n                        case kCborTagUint32:\n                            return new Uint32Array(value.buffer);\n                        case kCborTagInt32:\n                            return new Int32Array(value.buffer);\n                        case kCborTagUint64:\n                            return new BigUint64Array(value.buffer);\n                        case kCborTagInt64:\n                            return new BigInt64Array(value.buffer);\n                        case kCborTagFloat32:\n                            return new Float32Array(value.buffer);\n                        case kCborTagFloat64:\n                            return new Float64Array(value.buffer);\n                    }\n                }\n                return this.tagger(tag, value);\n            }\n            case 7:\n                switch (length) {\n                    case 20:\n                        return false;\n                    case 21:\n                        return true;\n                    case 22:\n                        return null;\n                    case 23:\n                        return undefined;\n                    default:\n                        return length as number;\n                }\n        }\n    }\n\n    decodeItem(): any {\n        const initialByte = this.readUint8();\n        return this.readItem(initialByte);\n    }\n\n    readArrayBuffer(length: number) {\n        return this.commitRead(\n            length,\n            this.data.subarray(this.offset, this.offset + length)\n        );\n    }\n    readFloat16() {\n        const POW_2_24 = 5.960464477539063e-8;\n\n        const tempArrayBuffer = new ArrayBuffer(4);\n        const tempDataView = new DataView(tempArrayBuffer);\n        const value = this.readUint16();\n\n        const sign = value & 0x8000;\n        let exponent = value & 0x7c00;\n        const fraction = value & 0x03ff;\n\n        if (exponent === 0x7c00) exponent = 0xff << 10;\n        else if (exponent !== 0) exponent += (127 - 15) << 10;\n        else if (fraction !== 0) return (sign ? -1 : 1) * fraction * POW_2_24;\n\n        tempDataView.setUint32(0, (sign << 16) | (exponent << 13) | (fraction << 13));\n        return tempDataView.getFloat32(0);\n    }\n    readFloat32(): number {\n        return this.commitRead(4, this.dataView.getFloat32(this.offset));\n    }\n    readFloat64(): number {\n        return this.commitRead(8, this.dataView.getFloat64(this.offset));\n    }\n    readUint8(): number {\n        return this.commitRead(1, this.data[this.offset]);\n    }\n    readUint16(): number {\n        return this.commitRead(2, this.dataView.getUint16(this.offset));\n    }\n    readUint32(): number {\n        return this.commitRead(4, this.dataView.getUint32(this.offset));\n    }\n    readUint64(): bigint {\n        return this.commitRead(8, this.dataView.getBigUint64(this.offset));\n    }\n    readBreak(): boolean {\n        if (this.data[this.offset] !== 0xff) return false;\n        this.offset += 1;\n        return true;\n    }\n    readLength(additionalInformation: number): number | bigint {\n        if (additionalInformation < 24) return additionalInformation;\n        if (additionalInformation === 24) return this.readUint8();\n        if (additionalInformation === 25) return this.readUint16();\n        if (additionalInformation === 26) return this.readUint32();\n        if (additionalInformation === 27) {\n            const integer = this.readUint64();\n            if (integer <= Number.MAX_SAFE_INTEGER) return Number(integer);\n            return integer;\n        }\n        if (additionalInformation === 31) return -1;\n        throw new Error('CBORError: Invalid length encoding');\n    }\n\n    readIndefiniteStringLength(majorType: number): number {\n        const initialByte = this.readUint8();\n        if (initialByte === 0xff) return -1;\n        const length = this.readLength(initialByte & 0x1f);\n        if (length < 0 || initialByte >> 5 !== majorType) {\n            throw new Error('CBORError: Invalid indefinite length element');\n        }\n        return Number(length);\n    }\n    appendUtf16Data(utf16data: number[], length: number) {\n        for (let i = 0; i < length; ++i) {\n            let value = this.readUint8();\n            if (value & 0x80) {\n                if (value < 0xe0) {\n                    value = ((value & 0x1f) << 6) | (this.readUint8() & 0x3f);\n                    length -= 1;\n                } else if (value < 0xf0) {\n                    value =\n                        ((value & 0x0f) << 12) |\n                        ((this.readUint8() & 0x3f) << 6) |\n                        (this.readUint8() & 0x3f);\n                    length -= 2;\n                } else {\n                    value =\n                        ((value & 0x07) << 18) |\n                        ((this.readUint8() & 0x3f) << 12) |\n                        ((this.readUint8() & 0x3f) << 6) |\n                        (this.readUint8() & 0x3f);\n                    length -= 3;\n                }\n            }\n\n            if (value < 0x10000) {\n                utf16data.push(value);\n            } else {\n                value -= 0x10000;\n                utf16data.push(0xd800 | (value >> 10));\n                utf16data.push(0xdc00 | (value & 0x3ff));\n            }\n        }\n    }\n\n    private commitRead<T>(length: number, value: T): T {\n        this.offset += length;\n        return value;\n    }\n}\n", "import {Prefab} from './prefab.js';\nimport {\n    defaultPropertyCloner,\n    ComponentProperty,\n    Type,\n    PropertyRecord,\n} from './property.js';\nimport {\n    AnimationComponent,\n    BrokenComponent,\n    CollisionComponent,\n    Component,\n    ComponentConstructor,\n    DestroyedComponentInstance,\n    InputComponent,\n    LightComponent,\n    MeshComponent,\n    Object3D,\n    PhysXComponent,\n    TextComponent,\n    ViewComponent,\n    ParticleEffectComponent,\n    LogTag,\n    inheritProperties,\n} from './wonderland.js';\n\nimport {CBORReader, CBORType, getType, isUndefined} from './utils/cbor.js';\n\n/** Native components list */\nexport interface NativeComponents {\n    'collision': CollisionComponent;\n    'text': TextComponent;\n    'view': ViewComponent;\n    'mesh': MeshComponent;\n    'input': InputComponent;\n    'light': LightComponent;\n    'animation': AnimationComponent;\n    'physx': PhysXComponent;\n    'particle-effect': ParticleEffectComponent;\n}\n\n/**\n * Manage all component managers in a scene.\n *\n * @hidden\n */\nexport class ComponentManagers {\n    /** Animation manager index. */\n    readonly animation: number = -1;\n    /** Collision manager index. */\n    readonly collision: number = -1;\n    /** JavaScript manager index. */\n    readonly js: number = -1;\n    /** Physx manager index. */\n    readonly physx: number = -1;\n    /** View manager index. */\n    readonly view: number = -1;\n\n    /**\n     * Component class instances per type to avoid GC.\n     *\n     * @note Maps the manager index to the list of components.\n     *\n     * @todo: Refactor ResourceManager and re-use for components.\n     */\n    private readonly _cache: (Component | null)[][] = [];\n    /** Manager index to component class. */\n    private readonly _constructors: ComponentConstructor[];\n    /* Manager name to the manager index. */\n    private readonly _nativeManagers: Map<string, number> = new Map();\n\n    /** Host instance. */\n    private readonly _scene: Prefab;\n\n    constructor(scene: Prefab) {\n        this._scene = scene;\n        const wasm = this._scene.engine.wasm;\n\n        const native = [\n            AnimationComponent,\n            CollisionComponent,\n            InputComponent,\n            LightComponent,\n            MeshComponent,\n            PhysXComponent,\n            TextComponent,\n            ViewComponent,\n            ParticleEffectComponent,\n        ];\n        this._cache = new Array(native.length);\n        this._constructors = new Array(native.length);\n\n        for (const Class of native) {\n            const ptr = wasm.tempUTF8(Class.TypeName);\n            const manager = wasm._wl_scene_get_component_manager_index(scene._index, ptr);\n            this._constructors[manager] = Class;\n            this._cache[manager] = [] as Component[];\n            this._nativeManagers.set(Class.TypeName, manager);\n        }\n\n        this.animation = this._nativeManagers.get(AnimationComponent.TypeName)!;\n        this.collision = this._nativeManagers.get(CollisionComponent.TypeName)!;\n        this.physx = this._nativeManagers.get(PhysXComponent.TypeName)!;\n        this.view = this._nativeManagers.get(ViewComponent.TypeName)!;\n\n        const ptr = wasm.tempUTF8('js');\n        this.js = wasm._wl_scene_get_component_manager_index(scene._index, ptr);\n        this._cache[this.js] = [] as Component[];\n    }\n\n    createJs(index: number, id: number, type: number, object: number) {\n        const wasm = this._scene.engine.wasm;\n        const ctor = wasm._componentTypes[type];\n        if (!ctor) {\n            throw new Error(`Type index ${type} isn't registered`);\n        }\n\n        const log = this._scene.engine.log;\n\n        let component = null;\n        try {\n            component = new ctor(this._scene, this.js, id);\n        } catch (e) {\n            log.error(\n                LogTag.Component,\n                `Exception during instantiation of component ${ctor.TypeName}`\n            );\n            log.error(LogTag.Component, e);\n            component = new BrokenComponent(this._scene);\n        }\n        component._object = this._scene.wrap(object);\n\n        try {\n            component.resetProperties();\n        } catch (e) {\n            log.error(\n                LogTag.Component,\n                `Exception during ${component.type} resetProperties() on object ${component.object.name}`\n            );\n            log.error(LogTag.Component, e);\n        }\n\n        this._scene._jsComponents[index] = component;\n\n        /* Add to cache. This is required because destruction is\n         * ID-based and not index-based. */\n        this._cache[this.js][id] = component;\n\n        return component;\n    }\n\n    /**\n     * Get components of type T.\n     *\n     * @param type Component class.\n     * @returns An array containing all components in this scene.\n     */\n    components<T extends Component>(type: ComponentConstructor<T>, active: boolean): T[] {\n        return this.componentsFromTypename(type.TypeName, active) as T[];\n    }\n\n    /**\n     * Similar to {@link getComponents}, but directly from string.\n     *\n     * @param typename The component `TypeName` attribute.\n     */\n    componentsFromTypename(typename: string, active: boolean): Component[] {\n        const wasm = this._scene.engine.wasm;\n\n        const manager = this.getNativeManager(typename) ?? this.js;\n        const subTypeIndex =\n            manager === this.js ? wasm._componentTypeIndices[typename] ?? 0 : 0;\n\n        const maxRead = wasm._tempMemSize / 4;\n        const components: Component[] = [];\n        let read = 0;\n        let offset = 0;\n        while (\n            (read = wasm._wl_scene_get_components(\n                this._scene._index,\n                manager,\n                subTypeIndex,\n                active,\n                offset,\n                maxRead,\n                wasm._tempMem\n            ))\n        ) {\n            for (let i = 0; i < read; ++i) {\n                const id = wasm._tempMemUint32[i];\n                components.push(this.wrapAny(manager, id) as Component);\n            }\n            /* Offset by `maxRead` because js components of different types are contiguous.\n             * `read` could be less than `maxRead`, and we want to skip all\n             * the components already processed. */\n            offset += maxRead;\n        }\n\n        return components;\n    }\n\n    /**\n     * Get component of type T.\n     *\n     * @note Currently only works for native components, but we will extend this later (and expose it in the API)\n     */\n    componentAt<T extends Component>(type: ComponentConstructor<T>, index: number): T {\n        const wasm = this._scene.engine.wasm;\n        const manager = this.getNativeManager(type.TypeName)!;\n        const id = wasm._wl_scene_get_component(this._scene._index, manager, index);\n        return this.wrapAny(manager, id) as T;\n    }\n\n    /**\n     * Retrieve a cached component.\n     *\n     * @param manager The manager index.\n     * @param id The component id.\n     * @returns The component if cached, `null` otherwise.\n     */\n    get(manager: number, id: number) {\n        return this._cache[manager][id] ?? null;\n    }\n\n    /**\n     * Wrap the animation.\n     *\n     * @param id Id to wrap.\n     * @returns The previous instance if it was cached, or a new one.\n     */\n    wrapAnimation(id: number): AnimationComponent {\n        return this.wrapNative(this.animation, id) as AnimationComponent;\n    }\n\n    /**\n     * Wrap the collision.\n     *\n     * @param id Id to wrap.\n     * @returns The previous instance if it was cached, or a new one.\n     */\n    wrapCollision(id: number): CollisionComponent {\n        return this.wrapNative(this.collision, id) as CollisionComponent;\n    }\n\n    /**\n     * Wrap the view.\n     *\n     * @param id Id to wrap.\n     * @returns The previous instance if it was cached, or a new one.\n     */\n    wrapView(id: number): ViewComponent {\n        return this.wrapNative(this.view, id) as ViewComponent;\n    }\n\n    /**\n     * Wrap the physx.\n     *\n     * @param id Id to wrap.\n     * @returns The previous instance if it was cached, or a new one.\n     */\n    wrapPhysx(id: number): PhysXComponent {\n        return this.wrapNative(this.physx, id) as PhysXComponent;\n    }\n\n    /**\n     * Retrieves a component instance if it exists, or create and cache\n     * a new one.\n     *\n     * @note This api is meant to be used internally. Please have a look at\n     * {@link Object3D.addComponent} instead.\n     *\n     * @param componentType Component manager index\n     * @param componentId Component id in the manager\n     *\n     * @returns JavaScript instance wrapping the native component\n     */\n    wrapNative(manager: number, id: number) {\n        if (id < 0) return null;\n\n        const cache = this._cache[manager];\n        if (cache[id]) return cache[id];\n\n        const scene = this._scene;\n        const Class = this._constructors[manager];\n        const component = new Class(scene, manager, id);\n        cache[id] = component;\n        return component;\n    }\n\n    /**\n     * Wrap a native or js component.\n     *\n     * @throws For JavaScript components that weren't previously cached,\n     * since that would be a bug in the runtime / api.\n     *\n     * @param manager The manager index.\n     * @param id The id to wrap.\n     * @returns The previous instance if it was cached, or a new one.\n     */\n    wrapAny(manager: number, id: number) {\n        if (id < 0) return null;\n\n        if (manager === this.js) {\n            const found = this._cache[this.js][id];\n            if (!found) {\n                throw new Error('JS components must always be cached');\n            }\n            return found.constructor !== BrokenComponent ? found : null;\n        }\n\n        return this.wrapNative(manager, id);\n    }\n\n    getNativeManager(name: string): number | null {\n        const manager = this._nativeManagers.get(name);\n        return manager !== undefined ? manager : null;\n    }\n\n    /**\n     * Perform cleanup upon component destruction.\n     *\n     * @param instance The instance to destroy.\n     *\n     * @hidden\n     */\n    destroy(instance: Component) {\n        const localId = instance._localId;\n        const manager = instance._manager;\n        (instance._id as number) = -1;\n        (instance._localId as number) = -1;\n        (instance._manager as number) = -1;\n\n        const erasePrototypeOnDestroy = this._scene.engine.erasePrototypeOnDestroy;\n        /* Destroy the prototype of this instance to avoid using a dangling component */\n        if (erasePrototypeOnDestroy && instance) {\n            Object.setPrototypeOf(instance, DestroyedComponentInstance);\n        }\n\n        /* Remove from the cache to avoid side-effects when\n         * re-creating a component with the same id. */\n        this._cache[manager][localId] = null;\n    }\n\n    /** Number of managers **registered** in the scene, i.e., `js`, `names`, etc... */\n    get managersCount() {\n        return this._scene.engine.wasm._wl_scene_get_component_manager_count(\n            this._scene._index\n        );\n    }\n}\n\nexport function resetComponentProperties(record: Component) {\n    const ctor = record.constructor as ComponentConstructor;\n    const properties = ctor.Properties;\n    if (!properties) return;\n    for (const name in properties) {\n        const property = properties[name];\n        const cloner = property.cloner ?? defaultPropertyCloner;\n        (record as Record<string, any>)[name] = cloner.clone(\n            property.type,\n            property.default\n        );\n    }\n}\n\nexport function setupComponentClass(ctor: ComponentConstructor | PropertyRecord) {\n    inheritProperties(ctor);\n    /** @todo: Merge the _setupDefaults and _setPropertyOrder calls with this function. */\n    for (const name in ctor.Properties) {\n        const prop = ctor.Properties[name];\n        let record = null;\n        switch (prop.type) {\n            case Type.Record:\n                record = prop.record;\n                break;\n            case Type.Array:\n                record = prop.element?.record;\n                break;\n            default:\n                break;\n        }\n        if (record && !record._propertyOrder) setupComponentClass(record);\n    }\n    _setupDefaults(ctor);\n    _setPropertyOrder(ctor);\n}\n\n/**\n * Decode component properties from CBOR encoded data.\n *\n * ## Failure\n *\n * When decoding properties, failures will not be treated as errors. Failures include:\n * - Invalid parameters count\n * - Wrongly defined property\n *\n * When a failure occurs, the cbor reader will be consumed to prevent\n * errors to cascade in the following components.\n */\nexport class ComponentPropertyDecoder {\n    scene: Prefab;\n    offsets: Uint32Array;\n\n    constructor(scene: Prefab, offsets: Uint32Array) {\n        this.scene = scene;\n        this.offsets = offsets;\n    }\n\n    decode(cbor: CBORReader, component: Component) {\n        const ctor = component.constructor as ComponentConstructor;\n        if (!ctor._propertyOrder) setupComponentClass(ctor);\n\n        const typeInfo = cbor.readTypeInfo();\n        if (ctor === BrokenComponent) {\n            return cbor.readItem(typeInfo); /* Consumme the cbor state */\n        }\n\n        const cborType = getType(typeInfo);\n        if (cborType !== CBORType.Array) {\n            this._error(`${component} parameters not encoded as an array.`);\n            return cbor.readItem(typeInfo);\n        }\n\n        const paramNames = ctor._propertyOrder;\n        const count = cbor.readArrayLength(typeInfo) as number;\n        if (count !== paramNames.length) {\n            this._error(\n                `${component} has ${count} parameters encoded, but expected ${paramNames.length}`\n            );\n            return cbor.readItem(typeInfo, count);\n        }\n\n        for (let j = 0; j < count; ++j) {\n            const name = paramNames[j];\n            const property = ctor.Properties[name];\n            (component as any)[name] = this.decodeProperty(cbor, name, property);\n        }\n    }\n\n    decodeProperty(cbor: CBORReader, name: string, property: ComponentProperty) {\n        const typeInfo = cbor.readTypeInfo();\n\n        if (property.type === Type.Record) {\n            return this.decodeRecordProperty(cbor, name, property, typeInfo);\n        } else if (property.type === Type.Array) {\n            return this.decodeArrayProperty(cbor, name, property, typeInfo);\n        }\n\n        let value = cbor.readItem(typeInfo);\n\n        /* Default values are sent as undefined to avoid wasting space */\n        if (value === undefined) {\n            const cloner = property.cloner ?? defaultPropertyCloner;\n            value = cloner.clone(property.type, property.default);\n            return value;\n        }\n        /* This skips unset resource parameters as those are sent\n         * directly with type null. Offsets for Int and Float types\n         * should always be 0. */\n        /** @todo CBOR tag to mark resources? Wastes a byte though. */\n        if (typeof value === 'number') {\n            value += this.offsets[property.type];\n        }\n\n        const engine = this.scene.engine;\n        switch (property.type) {\n            case Type.Bool:\n            case Type.Int:\n            case Type.Float:\n            case Type.String:\n            case Type.Enum:\n            case Type.Vector2:\n            case Type.Vector3:\n            case Type.Vector4:\n                /* Nothing to do */\n                return value;\n            case Type.Object: {\n                const wasm = engine.wasm;\n                return value\n                    ? this.scene.wrap(wasm._wl_object_id(this.scene._index, value))\n                    : null;\n            }\n            case Type.Mesh:\n                return engine.meshes.wrap(value);\n            case Type.Texture:\n                return engine.textures.wrap(value);\n            case Type.Material:\n                return engine.materials.wrap(value);\n            case Type.ParticleEffect:\n                return engine.particleEffects.wrap(value);\n            case Type.Animation:\n                return this.scene.animations.wrap(value);\n            case Type.Skin:\n                return this.scene.skins.wrap(value);\n            case Type.Color: {\n                /* Colors are sent as Uint8Array. Normalize positive\n                 * integer values to 0-1. Don't assume any bit size\n                 * here, could become Uint16Array as well. */\n                const max = (1 << (value.BYTES_PER_ELEMENT * 8)) - 1;\n                return Float32Array.from(value, (f: number, _) => f / max);\n            }\n        }\n    }\n\n    decodeRecordProperty(\n        cbor: CBORReader,\n        name: string,\n        property: ComponentProperty,\n        typeInfo: number\n    ) {\n        const cborType = getType(typeInfo);\n        if (cborType !== CBORType.Array && cborType !== CBORType.Constant) {\n            /* For memory/performance reason, records are serialized as arrays,\n             * since keys aren't needed during the decoding phase. */\n            this._error(`Record parameter '${name}' not serialized as an array`);\n            cbor.readItem(typeInfo);\n            return null;\n        }\n        const record = property.record;\n        if (!record) {\n            this._error(`Record parameter '${name}' .record is undefined`);\n            cbor.readItem(typeInfo);\n            return null;\n        }\n\n        if (!record._propertyOrder) setupComponentClass(record);\n        const propertyOrder = record._propertyOrder as string[];\n\n        const count = cbor.readArrayLength(typeInfo) as number;\n        if (isUndefined(cborType, count)) {\n            const cloner = property.cloner ?? defaultPropertyCloner;\n            return cloner.clone(property.type, property.default);\n        }\n\n        const result = new (record as any)();\n        if (count !== propertyOrder.length) {\n            const propsCount = propertyOrder.length;\n            this._error(\n                `Record parameter ${name} has ${count} sub-parameters encoded, but expected ${propsCount}`\n            );\n            cbor.readItem(typeInfo, count);\n            return result;\n        }\n        const order = record._propertyOrder!;\n        for (let i = 0; i < order.length; ++i) {\n            const key = order[i];\n            const prop = record.Properties![key];\n            (result as any)[key] = this.decodeProperty(cbor, key, prop);\n        }\n        return result;\n    }\n\n    decodeArrayProperty(\n        cbor: CBORReader,\n        name: string,\n        property: ComponentProperty,\n        typeInfo: number\n    ) {\n        const log = this.scene.engine.log;\n        const cborType = getType(typeInfo);\n        if (cborType !== CBORType.Array && cborType !== CBORType.Constant) {\n            /* For memory/performance reason, records are serialized as arrays,\n             * since keys aren't needed during the decoding phase. */\n            this._error(`Array parameter '${name}' not serialized as an array`);\n            cbor.readItem(typeInfo);\n            return [];\n        }\n\n        if (!property.element) {\n            this._error(`Array parameter '${name}' .element property is undefined`);\n            cbor.readItem(typeInfo);\n            return [];\n        }\n\n        const count = cbor.readArrayLength(typeInfo) as number;\n        if (isUndefined(cborType, count)) return [];\n\n        const result = new Array(count);\n        for (let i = 0; i < count; ++i) {\n            result[i] = this.decodeProperty(cbor, name, property.element);\n        }\n        return result;\n    }\n\n    private _error(msg: string) {\n        const log = this.scene.engine.log;\n        log.error(LogTag.Engine, msg);\n    }\n}\n\n/**\n * Default component parameter value per type.\n */\nconst _componentDefaults = new Map<Type, any>([\n    [Type.Bool, false],\n    [Type.Int, 0],\n    [Type.Float, 0.0],\n    [Type.String, ''],\n    [Type.Enum, undefined],\n    [Type.Object, null],\n    [Type.Mesh, null],\n    [Type.Texture, null],\n    [Type.Material, null],\n    [Type.Animation, null],\n    [Type.Skin, null],\n    [Type.ParticleEffect, null],\n    [Type.Color, Float32Array.from([0.0, 0.0, 0.0, 1.0])],\n    [Type.Vector2, Float32Array.from([0.0, 0.0])],\n    [Type.Vector3, Float32Array.from([0.0, 0.0, 0.0])],\n    [Type.Vector4, Float32Array.from([0.0, 0.0, 0.0, 0.0])],\n    [Type.Record, undefined],\n    [Type.Array, []],\n]);\n\n/**\n * Setup the defaults value of the properties on a given\n * component class.\n *\n * @param ctor The component class\n */\nfunction _setupDefaults(ctor: ComponentConstructor | PropertyRecord) {\n    for (const name in ctor.Properties) {\n        const p = ctor.Properties[name];\n\n        if (p.type === Type.Enum) {\n            /* Enum default can be a string or an index. Convert to and/or\n             * sanity-check the index. */\n            if (p.values?.length) {\n                /* Don't try to look up the default if the user specified a\n                 * number or we already converted to one. */\n                if (typeof p.default !== 'number') {\n                    /* If undefined, missing element or wrong type this returns\n                     * -1 which becomes 0 below. This matches editor behavior. */\n                    p.default = p.values.indexOf(p.default);\n                }\n                if (p.default < 0 || p.default >= p.values.length) {\n                    p.default = 0;\n                }\n            } else {\n                /* There's no index value that makes sense */\n                p.default = undefined;\n            }\n        } else if (\n            (p.type === Type.Color ||\n                p.type === Type.Vector2 ||\n                p.type === Type.Vector3 ||\n                p.type === Type.Vector4) &&\n            Array.isArray(p.default)\n        ) {\n            /* Defaults provided by user code are currently always a standard\n             * array, but become a typed array on the property */\n            p.default = Float32Array.from(p.default);\n        } else if (p.type === Type.Record && p.record) {\n            p.default = new p.record();\n            resetComponentProperties(p.default);\n        } else if (p.default === undefined) {\n            const cloner = p.cloner ?? defaultPropertyCloner;\n            p.default = cloner.clone(p.type, _componentDefaults.get(p.type));\n        }\n        ctor.prototype[name] = p.default;\n    }\n}\n\n/**\n * Determines a fixed order for property attributes used for deserialization.\n *\n * @param ctor The component class\n */\nfunction _setPropertyOrder(ctor: ComponentConstructor | PropertyRecord) {\n    ctor._propertyOrder = ctor.hasOwnProperty('Properties')\n        ? Object.keys(ctor.Properties!).sort()\n        : [];\n}\n", "import {ImageLike, ProgressCallback} from '../types.js';\n\n/**\n * Transformer for {@link TransformStream} that passes read progress to a\n * callback.\n *\n * Invokes the callback for each streamed chunk, and one final time when the\n * stream closes.\n *\n * @hidden\n */\nclass FetchProgressTransformer implements Transformer<Uint8Array, Uint8Array> {\n    #progress = 0;\n    #callback: ProgressCallback;\n    #totalSize: number;\n\n    /**\n     * Constructor.\n     * @param callback Callback that receives the progress.\n     * @param totalSize Total size of the data. Pass 0 to indicate that the\n     *     size is unknown, then the callback will only be called once after\n     *     all data was transferred.\n     */\n    constructor(callback: ProgressCallback, totalSize = 0) {\n        this.#callback = callback;\n        this.#totalSize = totalSize;\n    }\n\n    transform(chunk: Uint8Array, controller: TransformStreamDefaultController<Uint8Array>) {\n        controller.enqueue(chunk);\n        this.#progress += chunk.length;\n        if (this.#totalSize > 0) {\n            this.#callback(this.#progress, this.#totalSize);\n        }\n    }\n\n    flush() {\n        this.#callback(this.#progress, this.#progress);\n    }\n}\n\n/**\n * Sink for `WritableStream` that writes data to an `ArrayBuffer`.\n *\n * @hidden\n */\nexport class ArrayBufferSink implements UnderlyingSink<Uint8Array> {\n    #buffer: Uint8Array;\n    #offset = 0;\n\n    /**\n     * Constructor.\n     * @param size Initial size of the buffer. If less than the received data,\n     *     the buffer is dynamically reallocated.\n     */\n    constructor(size = 0) {\n        this.#buffer = new Uint8Array(size);\n    }\n\n    /** Get the received data as an `ArrayBuffer`. */\n    get arrayBuffer() {\n        const arrayBuffer = this.#buffer.buffer;\n        if (this.#offset < arrayBuffer.byteLength) {\n            return arrayBuffer.slice(0, this.#offset);\n        }\n        return arrayBuffer;\n    }\n\n    write(chunk: Uint8Array) {\n        const newLength = this.#offset + chunk.length;\n        if (newLength > this.#buffer.length) {\n            const newBuffer = new Uint8Array(\n                Math.max(this.#buffer.length * 1.5, newLength)\n            );\n            newBuffer.set(this.#buffer);\n            this.#buffer = newBuffer;\n        }\n        this.#buffer.set(chunk, this.#offset);\n        this.#offset = newLength;\n    }\n}\n\n/**\n * Source for `ReadableStream` that reads data from an`ArrayBuffer`.\n *\n * @hidden\n */\nexport class ArrayBufferSource implements UnderlyingSource<Uint8Array> {\n    #buffer: ArrayBuffer;\n\n    /**\n     * Constructor.\n     * @param buffer Buffer to read from.\n     */\n    constructor(buffer: ArrayBuffer) {\n        this.#buffer = buffer;\n    }\n\n    start(controller: ReadableStreamController<Uint8Array>) {\n        if (this.#buffer.byteLength > 0) {\n            controller.enqueue(new Uint8Array(this.#buffer));\n        }\n        controller.close();\n    }\n}\n\n/**\n * Fetch a file as an `ArrayBuffer`, with fetch progress passed to a callback.\n *\n * @param path Path of the file to fetch.\n * @param onProgress Callback receiving the current fetch progress and total\n *     size, in bytes. Also called a final time on completion.\n * @param signal Abort signal passed to `fetch()`.\n * @returns Promise that resolves when the fetch successfully completes.\n */\nexport async function fetchWithProgress(\n    path: string,\n    onProgress?: ProgressCallback,\n    signal?: AbortSignal\n): Promise<ArrayBuffer> {\n    const res = await fetch(path, {signal});\n    if (!res.ok) throw res.statusText;\n    if (!onProgress || !res.body) return res.arrayBuffer();\n    let size = Number(res.headers.get('Content-Length') ?? 0);\n    if (Number.isNaN(size)) size = 0;\n    const sink = new ArrayBufferSink(size);\n    await res.body\n        .pipeThrough(new TransformStream(new FetchProgressTransformer(onProgress, size)))\n        .pipeTo(new WritableStream(sink));\n    return sink.arrayBuffer;\n}\n\n/**\n * Fetch a file as a `ReadableStream`, with fetch progress passed to a\n * callback.\n *\n * @param path Path of the file to fetch.\n * @param onProgress Callback receiving the current fetch progress and total\n *     size, in bytes. Also called a final time on completion.\n * @param signal Abort signal passed to `fetch()`.\n * @returns Promise that resolves when the fetch successfully completes.\n */\nexport async function fetchStreamWithProgress(\n    path: string,\n    onProgress?: ProgressCallback,\n    signal?: AbortSignal\n): Promise<ReadableStream<Uint8Array>> {\n    const res = await fetch(path, {signal});\n    if (!res.ok) throw res.statusText;\n    const body = res.body ?? new ReadableStream();\n    let size = Number(res.headers.get('Content-Length') ?? 0);\n    if (Number.isNaN(size)) size = 0;\n    if (!onProgress) return body;\n    const stream = body.pipeThrough(\n        new TransformStream(new FetchProgressTransformer(onProgress, size))\n    );\n    return stream;\n}\n\n/**\n * Get parent path from a URL.\n *\n * @param url URL to get the parent from.\n * @returns Parent URL without trailing slash.\n */\nexport function getBaseUrl(url: string): string {\n    return url.substring(0, url.lastIndexOf('/'));\n}\n\n/**\n * Get the filename of a url.\n *\n * @param url The url to extract the name from.\n * @returns A string containing the filename. If no filename is found,\n *     returns the input string.\n */\nexport function getFilename(url: string): string {\n    if (url.endsWith('/')) {\n        /* Remove trailing slash. */\n        url = url.substring(0, url.lastIndexOf('/'));\n    }\n    const lastSlash = url.lastIndexOf('/');\n    if (lastSlash < 0) return url;\n    return url.substring(lastSlash + 1);\n}\n\n/**\n * Promise resolved once the image is ready to be used\n *\n * @param image The image, video, or canvas to wait for.\n * @returns A promise with the image, once it's ready to be used.\n */\nexport function onImageReady<T extends ImageLike>(image: T): Promise<T> {\n    return new Promise((res, rej) => {\n        if (image instanceof HTMLVideoElement) {\n            if (image.readyState >= 2) {\n                res(image as T);\n                return;\n            }\n            image.addEventListener(\n                'loadeddata',\n                () => {\n                    if (image.readyState >= 2) res(image);\n                },\n                {once: true}\n            );\n            return;\n        } else if (\n            !(image instanceof HTMLImageElement) ||\n            (image as HTMLImageElement).complete\n        ) {\n            res(image);\n            return;\n        }\n        image.addEventListener('load', () => res(image), {once: true});\n        image.addEventListener('error', rej, {once: true});\n    });\n}\n", "import {ComponentManagers, NativeComponents} from './component.js';\nimport {WonderlandEngine} from './engine.js';\nimport {ResourceManager, SceneResource} from './resources/resource.js';\nimport {ProgressCallback} from './types.js';\nimport {\n    fetchStreamWithProgress,\n    fetchWithProgress,\n    getBaseUrl,\n    getFilename,\n    onImageReady,\n} from './utils/fetch.js';\nimport {isString} from './utils/object.js';\nimport {\n    Animation,\n    AnimationGraph,\n    CollisionCallback,\n    Component,\n    ComponentConstructor,\n    DestroyedObjectInstance,\n    Object3D,\n    Skin,\n} from './wonderland.js';\n\n/** Scene loading options. */\nexport interface SceneLoadOptions {\n    /** An in-memory buffer, containing the bytes of a `.bin` file. */\n    buffer: ArrayBuffer;\n\n    /** Path from which resources are resolved (images, languages, etc...). */\n    baseURL: string;\n\n    /** If `true`, dispatches a ready event in the document. */\n    dispatchReadyEvent?: boolean;\n}\n\n/** Loading options for in-memory data. */\nexport interface InMemoryLoadOptions {\n    /** An in-memory buffer, containing the bytes of a `.bin` file. */\n    buffer: ArrayBuffer;\n    /** Path from which resources are resolved (images, languages, etc...). */\n    baseURL: string;\n    /** Name of the file. This is the same that will be retrieved via {@link Scene#filename} */\n    filename?: string;\n    /**\n     * Force to re-download the components bundle, and not use the version from cache.\n     *\n     * If not set, defaults to `false`.\n     *\n     * @note For now, this setting only affects the main scene loading.\n     */\n    nocache?: boolean;\n}\n\n/**\n * Loading options for streamed data.\n *\n * @hidden\n */\nexport interface StreamLoadOptions {\n    /** Stream that transfers the bytes of a `.bin` file. */\n    stream: ReadableStream<Uint8Array>;\n    /** Path from which resources are resolved (images, languages, etc...). */\n    baseURL: string;\n    /** Name of the file. This is the same that will be retrieved via {@link Scene#filename} */\n    filename?: string;\n}\n\n/** Options for loading files from a URL. */\nexport interface UrlLoadOptions {\n    /** URL to load. */\n    url: string;\n    /** Signal to abort the file fetch request. */\n    signal?: AbortSignal;\n    /**\n     * Whether to load the file as parts of it are fetched. If `false`,\n     * fetches the entire file first before loading. Streamed loading reduces\n     * memory usage. If not set, defaults to `true`.\n     */\n    streamed?: boolean;\n    /**\n     * Force to re-download the components bundle, and not use the version from cache.\n     *\n     * If not set, defaults to `false`.\n     *\n     * @note For now, this setting only affects the main scene loading.\n     */\n    nocache?: boolean;\n}\n\n/** Options used during loading. */\nexport type LoadOptions<Extra = {}> = string | (UrlLoadOptions & Partial<Extra>);\n\n/**\n * Base class for prefabs, scenes, and glTF.\n *\n * For more information have a look at the derived types:\n * - {@link Scene} for Wonderland Engine activatable scenes (.bin)\n * - {@link PrefabGLTF} for glTF scenes\n *\n * #### Resources\n *\n * While **meshes**, **textures**, and **materials** are shared\n * on the {@link WonderlandEngine} instance, a scene comes with:\n * - Animations: Managed using {@link Prefab.animations}\n * - Skins: Managed using {@link Prefab.skins}\n *\n * Those resources are bound to the object hierarchy and are thus required to be\n * per-scene.\n *\n * #### Destruction\n *\n * For now, destroying a scene doesn't automatically remove the resources it\n * references in the engine. For more information, have a look at the\n * {@link Scene.destroy} method.\n *\n * #### Isolation\n *\n * It's forbidden to mix objects and components from different scenes, e.g.,\n *\n * ```js\n * const objA = sceneA.addChild();\n * const objB = sceneB.addChild();\n * objA.parent = objB; // Throws\n * ```\n *\n * @category scene\n *\n * @since 1.2.0\n */\nexport class Prefab {\n    /**\n     * Create an object with shape `{url: string}`.\n     *\n     * - If the parameter is a string, a new object is returned\n     * - If the parameter is an object, the same reference is returned\n     *\n     * @param options The url or options object.\n     * @returns An object of the form `{url: string, ...}`.\n     *\n     * @hidden\n     */\n    static makeUrlLoadOptions<E>(options: LoadOptions<E>): UrlLoadOptions & Partial<E> {\n        return isString(options)\n            ? ({url: options} as UrlLoadOptions & Partial<E>)\n            : options;\n    }\n\n    /**\n     * Load an `ArrayBuffer` using fetch.\n     *\n     * @param opts The url or options.\n     * @param progress Progress callback\n     * @returns An {@link InMemoryLoadOptions} object.\n     *\n     * @hidden\n     */\n    static async loadBuffer(\n        options: LoadOptions,\n        progress?: ProgressCallback\n    ): Promise<InMemoryLoadOptions> {\n        const opts = Prefab.makeUrlLoadOptions(options);\n        const buffer = await fetchWithProgress(opts.url, progress, opts.signal);\n        const baseURL = getBaseUrl(opts.url);\n        const filename = getFilename(opts.url);\n        return {...opts, buffer, baseURL, filename};\n    }\n\n    /**\n     * Load a `ReadableStream` using fetch.\n     *\n     * @param opts The url or options.\n     * @param progress Progress callback\n     * @returns A {@link StreamLoadOptions} object.\n     *\n     * @hidden\n     */\n    static async loadStream(\n        options: LoadOptions,\n        progress?: ProgressCallback\n    ): Promise<StreamLoadOptions> {\n        const opts = Prefab.makeUrlLoadOptions(options);\n        const stream = await fetchStreamWithProgress(opts.url, progress, opts.signal);\n        const baseURL = getBaseUrl(opts.url);\n        const filename = getFilename(opts.url);\n        return {...opts, stream, baseURL, filename};\n    }\n\n    /**\n     * Validate the in-memory load options.\n     *\n     * @param options Options to validate.\n     * @returns Validated options object.\n     *\n     * @hidden\n     */\n    static validateBufferOptions(options: InMemoryLoadOptions): {\n        buffer: ArrayBuffer;\n        baseURL: string;\n        url: string;\n    } {\n        const {buffer, baseURL, filename = 'scene.bin'} = options;\n        if (!buffer) {\n            throw new Error(\"missing 'buffer' in options\");\n        }\n        if (!isString(baseURL)) {\n            throw new Error(\"missing 'baseURL' in options\");\n        }\n        const url = baseURL ? `${baseURL}/${filename}` : filename;\n        return {buffer, baseURL, url};\n    }\n\n    /**\n     * Validate the stream load options.\n     *\n     * @param options Options to validate.\n     * @returns Validated options object.\n     *\n     * @hidden\n     */\n    static validateStreamOptions(options: StreamLoadOptions): {\n        stream: ReadableStream<Uint8Array>;\n        baseURL: string;\n        url: string;\n    } {\n        const {stream, baseURL, filename = 'scene.bin'} = options;\n        if (!stream) {\n            throw new Error(\"missing 'stream' in options\");\n        }\n        if (!isString(baseURL)) {\n            throw new Error(\"missing 'baseURL' in options\");\n        }\n        const url = baseURL ? `${baseURL}/${filename}` : filename;\n        return {stream, baseURL, url};\n    }\n\n    /** Index in the scene manager. @hidden */\n    readonly _index;\n    /** @hidden */\n    protected _engine: WonderlandEngine;\n\n    /**\n     * Component manager caching to avoid GC.\n     *\n     * @hidden\n     */\n    readonly _components: ComponentManagers;\n    /**\n     * JavaScript components for this scene.\n     *\n     * This array is moved into the WASM instance upon activation.\n     *\n     * @hidden\n     */\n    readonly _jsComponents: Component[] = [];\n\n    /**\n     * The map is indexed using the physx component id.\n     *\n     * @hidden\n     */\n    readonly _pxCallbacks: Map<number, CollisionCallback[]> = new Map();\n\n    /** @hidden */\n    private readonly _animations;\n    /** @hidden */\n    private readonly _animationGraphs;\n    /** @hidden */\n    private readonly _skins;\n\n    /**\n     * Object class instances to avoid GC.\n     *\n     * @hidden\n     */\n    private readonly _objectCache: (Object3D | null)[] = [];\n\n    /**\n     * `onDestroy()` depth.\n     *\n     * Multiple components can stack `onDestroy()` calls.\n     */\n    private _pendingDestroy: number = 0;\n\n    /**\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    constructor(engine: WonderlandEngine, index: number) {\n        this._engine = engine;\n        this._index = index;\n\n        this._components = new ComponentManagers(this);\n        this._animations = new ResourceManager(this as Prefab, Animation);\n        this._animationGraphs = new ResourceManager(this as Prefab, AnimationGraph);\n        this._skins = new ResourceManager(this as Prefab, Skin);\n    }\n\n    /**\n     * Add a new {@link Object3D} to the root object.\n     *\n     * See {@link Object3D.addChild} for more information.\n     *\n     * @returns A new {@link Object3D}.\n     */\n    addChild() {\n        return this.wrap(0).addChild();\n    }\n\n    /**\n     * Add an object to the scene.\n     *\n     * Alternatively, you can use {@link Prefab.addChild} to add the object\n     * to the root, or {@link Object3D.addChild} to add the object to a given parent:\n     *\n     * ```js\n     * const parent = scene.addChild();\n     * const child = parent.addChild();\n     * // Equivalent using scene.addObject\n     * const sibling = scene.addObject(parent);\n     * ```\n     *\n     * @param parent Parent object or `null`.\n     * @returns A newly created object.\n     */\n    addObject(parent: Object3D | null = null): Object3D {\n        if (parent?.markedDestroyed) {\n            throw new Error(`Failed to add object. ${parent} is marked as destroyed.`);\n        }\n        this.assertOrigin(parent);\n        return (parent ?? this.wrap(0)).addChild();\n    }\n\n    /**\n     * Batch-add objects to the scene.\n     *\n     * Will provide better performance for adding multiple objects (e.g. > 16)\n     * than calling {@link Scene#addObject} repeatedly in a loop.\n     *\n     * By providing upfront information of how many objects will be required,\n     * the engine is able to batch-allocate the required memory rather than\n     * convervatively grow the memory in small steps.\n     *\n     * @experimental This API might change in upcoming versions.\n     *\n     * @param count Number of objects to add.\n     * @param parent Parent object or `null`, default `null`.\n     * @param componentCountHint Hint for how many components in total will\n     *      be added to the created objects afterwards, default `0`.\n     * @returns Newly created objects\n     */\n    addObjects(\n        count: number,\n        parent: Object3D | null = null,\n        componentCountHint: number = 0\n    ): Object3D[] {\n        const parentId = parent ? parent._id : 0;\n        this.engine.wasm.requireTempMem(count * 2);\n        const actualCount = this.engine.wasm._wl_scene_add_objects(\n            this._index,\n            parentId,\n            count,\n            componentCountHint || 0,\n            this.engine.wasm._tempMem,\n            this.engine.wasm._tempMemSize >> 1\n        );\n        const ids = this.engine.wasm._tempMemUint16.subarray(0, actualCount);\n        const wrapper = this.wrap.bind(this);\n        const objects = Array.from(ids, wrapper);\n        return objects;\n    }\n\n    /**\n     * Pre-allocate memory for a given amount of objects and components.\n     *\n     * Will provide better performance for adding objects later with {@link Scene#addObject}\n     * and {@link Scene#addObjects}.\n     *\n     * By providing upfront information of how many objects will be required,\n     * the engine is able to batch-allocate the required memory rather than\n     * conservatively grow the memory in small steps.\n     *\n     * **Experimental:** This API might change in upcoming versions.\n     *\n     * @param objectCount Number of objects to add.\n     * @param componentCountPerType Amount of components to\n     *      allocate for {@link Object3D.addComponent}, e.g. `{mesh: 100, collision: 200, \"my-comp\": 100}`.\n     * @since 0.8.10\n     */\n    reserveObjects(objectCount: number, componentCountPerType: Record<string, number>) {\n        const wasm = this.engine.wasm;\n        if (!componentCountPerType) return;\n\n        const countsPerTypeIndex = wasm._tempMemInt;\n        const managerCount = this._components.managersCount;\n        for (let i = 0; i < managerCount; ++i) countsPerTypeIndex[i] = 0;\n\n        const names = Object.keys(componentCountPerType);\n        for (const name of names) {\n            const count = componentCountPerType[name];\n            const nativeIndex = this._components.getNativeManager(name);\n            countsPerTypeIndex[nativeIndex !== null ? nativeIndex : this._components.js] +=\n                count;\n        }\n        wasm._wl_scene_reserve_objects(this._index, objectCount, wasm._tempMem);\n    }\n\n    /**\n     * Root object's children.\n     *\n     * See {@link Object3D.getChildren} for more information.\n     *\n     * @param out Destination array, expected to have at least `this.childrenCount` elements.\n     * @returns The `out` parameter.\n     */\n    getChildren(out: Object3D[] = new Array(this.childrenCount)): Object3D[] {\n        const root = this.wrap(0);\n        return root.getChildren(out);\n    }\n\n    /** @overload */\n    getComponents<K extends keyof NativeComponents>(typeOrClass: K): NativeComponents[K][];\n    /** @overload */\n    getComponents(typeOrClass: string): Component[];\n    /**\n     * Get all the components of a given type.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const meshes = scene.getComponents('mesh');\n     * const zombies = scene.getComponents(ZombieComponent);\n     * ```\n     *\n     * @param typeOrClass Typename to create a component of. Can be native or\n     *     custom JavaScript component type. It's also possible to give a class definition.\n     *     In this case, the method will use the `class.TypeName` field.\n     * @returns An array containing all components in this scene.\n     *     Returns an empty array if the component isn't registered.\n     */\n    getComponents<T extends Component>(typeOrClass: ComponentConstructor<T>): T[];\n    getComponents(typeOrClass: ComponentConstructor | string): Component[] {\n        const typename = isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName;\n        return this._components.componentsFromTypename(typename, false);\n    }\n\n    /** @overload */\n    getActiveComponents<K extends keyof NativeComponents>(\n        typeOrClass: K\n    ): NativeComponents[K][];\n    /** @overload */\n    getActiveComponents(typeOrClass: string): Component[];\n    /**\n     * Get all the **active** components of a given type.\n     *\n     * ```js\n     * const zombies = scene.getActiveComponents(ZombieComponent);\n     * for(const zombie of zombies) zombie.active = false;\n     *\n     * const list = scene.getActiveComponents(ZombieComponent);\n     * console.log(list.length); // Prints `0`\n     * ```\n     *\n     * @param typeOrClass Typename to create a component of. Can be native or\n     *     custom JavaScript component type. It's also possible to give a class definition.\n     *     In this case, the method will use the `class.TypeName` field.\n     * @returns An array containing all components in this scene.\n     *     Returns an empty array if the component isn't registered.\n     */\n    getActiveComponents<T extends Component>(typeOrClass: ComponentConstructor<T>): T[];\n    getActiveComponents(typeOrClass: ComponentConstructor | string): Component[] {\n        const typename = isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName;\n        return this._components.componentsFromTypename(typename, true);\n    }\n\n    /**\n     * Top-level objects of this scene.\n     *\n     * See {@link Object3D.children} for more information.\n     *\n     * @since 1.2.0\n     */\n    get children(): Object3D[] {\n        const root = this.wrap(0);\n        return root.children;\n    }\n\n    /** The number of children of the root object. */\n    get childrenCount(): number {\n        const root = this.wrap(0);\n        return this.engine.wasm._wl_object_get_children_count(root._id);\n    }\n\n    /**\n     * Search for objects matching the name.\n     *\n     * See {@link Object3D.findByName} for more information.\n     *\n     * @param name The name to search for.\n     * @param recursive If `true`, the method will look at all the objects of\n     *     this scene. If `false`, this method will only perform the search in\n     *     root objects.\n     * @returns An array of {@link Object3D} matching the name.\n     *\n     * @since 1.2.0\n     */\n    findByName(name: string, recursive = false): Object3D[] {\n        const root = this.wrap(0);\n        return root.findByName(name, recursive);\n    }\n\n    /**\n     * Search for all **top-level** objects matching the name.\n     *\n     * See {@link Object3D.findByNameDirect} for more information.\n     *\n     * @param name The name to search for.\n     * @returns An array of {@link Object3D} matching the name.\n     *\n     * @since 1.2.0\n     */\n    findByNameDirect(name: string): Object3D[] {\n        const root = this.wrap(0);\n        return root.findByNameDirect(name);\n    }\n\n    /**\n     * Search for **all objects** matching the name.\n     *\n     * See {@link Object3D.findByNameRecursive} for more information.\n     *\n     * @param name The name to search for.\n     * @returns An array of {@link Object3D} matching the name.\n     *\n     * @since 1.2.0\n     */\n    findByNameRecursive(name: string): Object3D[] {\n        const root = this.wrap(0);\n        return root.findByNameRecursive(name);\n    }\n\n    /**\n     * Wrap an object ID using {@link Object}.\n     *\n     * @note This method performs caching and will return the same\n     * instance on subsequent calls.\n     *\n     * @param objectId ID of the object to create.\n     *\n     * @returns The object\n     */\n    wrap(objectId: number): Object3D {\n        const cache = this._objectCache;\n        const o = cache[objectId] || (cache[objectId] = new Object3D(this, objectId));\n        return o;\n    }\n\n    /**\n     * Destroy the scene.\n     *\n     * For now, destroying a scene doesn't remove the resources it references. Thus,\n     * you will need to reload a main scene to free the memory.\n     *\n     * For more information about destruction, have a look at the {@link Scene.destroy} method.\n     */\n    destroy() {\n        if (this._pendingDestroy > 0) {\n            throw new Error(\"It's forbidden to destroy a scene from onDestroy().\");\n        }\n        this._pxCallbacks.clear();\n        this.engine._destroyScene(this);\n    }\n\n    /* Public Getters & Setters */\n\n    /**\n     * `true` if the scene is active, `false` otherwise.\n     *\n     * Always false for {@link Prefab} and {@link PrefabGLTF}.\n     */\n    get isActive() {\n        return !!this.engine.wasm._wl_scene_active(this._index);\n    }\n\n    /**\n     * Relative directory of the scene that was loaded.\n     *\n     * This is used for loading any files relative to the scene.\n     */\n    get baseURL(): string {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_scene_get_baseURL(this._index);\n        if (!ptr) return '';\n\n        return wasm.UTF8ToString(ptr);\n    }\n\n    /**\n     * Filename used when loading the file.\n     *\n     * If the scenes was loaded from memory and no filename was provided,\n     * this accessor will return an empty string.\n     */\n    get filename(): string {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_scene_get_filename(this._index);\n        if (!ptr) return '';\n        return wasm.UTF8ToString(ptr);\n    }\n\n    /** Animation resources */\n    get animations() {\n        return this._animations;\n    }\n\n    /**\n     * Animation graph resources\n     *\n     * @since 1.4.6\n     */\n    get animationsGraphs() {\n        return this._animationGraphs;\n    }\n\n    /** Skin resources */\n    get skins() {\n        return this._skins;\n    }\n\n    /** Hosting engine instance. */\n    get engine(): WonderlandEngine {\n        return this._engine;\n    }\n\n    /**\n     * `true` if the object is destroyed, `false` otherwise.\n     *\n     * If {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`,\n     * reading a class attribute / method will throw.\n     */\n    get isDestroyed(): boolean {\n        return this._index < 0;\n    }\n\n    toString() {\n        if (this.isDestroyed) {\n            return 'Scene(destroyed)';\n        }\n        return `Scene('${this.filename}', ${this._index})`;\n    }\n\n    /**\n     * Checks that the input's scene is the same as this instance.\n     *\n     * It is forbidden to mix objects and components from different scenes, e.g.,\n     *\n     * ```js\n     * const objA = sceneA.addObject();\n     * const objB = sceneA.addObject();\n     * objA.parent = objB; // Throws\n     * ```\n     *\n     * @param other Object / component to check.\n     *\n     * @throws If other's scene isn't the same reference as this.\n     */\n    assertOrigin(other: Object3D | Component | SceneResource | undefined | null) {\n        if (other && (other.scene as Prefab) !== this) {\n            throw new Error(`Attempt to use ${other} from ${other.scene} in ${this}`);\n        }\n    }\n\n    /**\n     * Download components and initialize the scene.\n     *\n     * @hidden\n     */\n    _initialize() {\n        const wasm = this.engine.wasm;\n        /* Initialize component parameters */\n        wasm._wl_scene_initialize(this._index);\n    }\n\n    /**\n     * Perform cleanup upon object destruction.\n     *\n     * @param localId The id to destroy.\n     *\n     * @hidden\n     */\n    _destroyObject(localId: number) {\n        const instance = this._objectCache[localId];\n        if (!instance) return;\n\n        (instance._id as number) = -1;\n        (instance._localId as number) = -1;\n\n        /* Destroy the prototype of this instance to avoid using a dangling object */\n        if (this.engine.erasePrototypeOnDestroy && instance) {\n            Object.setPrototypeOf(instance, DestroyedObjectInstance);\n        }\n\n        /* Remove from the cache to avoid side-effects when\n         * re-creating an object with the same id. */\n        this._objectCache[localId] = null;\n    }\n\n    /**\n     * Performs JavaScript only destrution of a component.\n     *\n     * @note Prefer to use this method to manually calling the destruction code,\n     * to protect the user from illegal method calls in {@link Component.onDestroy}.\n     *\n     * @param manager The component manager index.\n     * @param id The component id.\n     *\n     * @hidden\n     */\n    _destroyComponent(manager: number, id: number) {\n        const component = this._components.get(manager, id);\n        ++this._pendingDestroy;\n        component?._triggerOnDestroy();\n        --this._pendingDestroy;\n    }\n}\n", "/**\n * Schedule a timeout, resolving in `time` milliseconds.\n *\n * @note `setTimeout` being a macro-task, this method can\n * be use as a debounce call.\n *\n * @param time The time until it resolves, in milliseconds.\n * @returns A promise resolving in `time` ms.\n */\nexport function timeout(time: number): Promise<void> {\n    return new Promise((res) => setTimeout(res, time));\n}\n\n/**\n * Clamp the value in the range [min; max].\n *\n * @param val The value to clamp.\n * @param min The minimum value (inclusive).\n * @param max The maximum value (inclusive).\n * @returns The clamped value.\n */\nexport function clamp(val: number, min: number, max: number): number {\n    return Math.max(Math.min(max, val), min);\n}\n\n/**\n * Capitalize the first letter in a string.\n *\n * @note The string must be UTF-8.\n *\n * @param str The string to format.\n * @returns The string with the first letter capitalized.\n */\nexport function capitalizeFirstUTF8(str: string) {\n    return `${str[0].toUpperCase()}${str.substring(1)}`;\n}\n\n/**\n * Create a proxy throwing destroyed errors upon access.\n *\n * @param type The type to display upon error\n * @returns The proxy instance\n */\nexport function createDestroyedProxy(type: string) {\n    return new Proxy(\n        {},\n        {\n            get(_, param: string) {\n                if (param === 'isDestroyed') return true;\n                throw new Error(`Cannot read '${param}' of destroyed ${type}`);\n            },\n            set(_, param: string) {\n                throw new Error(`Cannot write '${param}' of destroyed ${type}`);\n            },\n        }\n    );\n}\n", "/**\n * Types\n */\n\nimport {nativeProperty, enumerable} from './decorators.js';\nimport {WonderlandEngine} from './engine.js';\nimport {isImageLike, isNumber, isString} from './utils/object.js';\nimport {Emitter} from './utils/event.js';\nimport {Material} from './resources/material-manager.js';\nimport {\n    ComponentProperty,\n    PropertyRecord,\n    Type,\n    defaultPropertyCloner,\n} from './property.js';\nimport {Constructor, ImageLike, NumberArray, TypedArray, TypedArrayCtor} from './types.js';\nimport {Resource, SceneResource} from './resources/resource.js';\nimport {Prefab} from './prefab.js';\nimport {Scene} from './scene.js';\nimport {createDestroyedProxy} from './utils/misc.js';\nimport {NativeComponents, resetComponentProperties} from './component.js';\n\n/**\n * Component constructor type.\n *\n * For more information, please have a look at the {@link Component} class.\n */\nexport type ComponentConstructor<T extends Component = Component> = {\n    new (scene: Prefab, manager: number, id: number): T;\n} & {\n    _isBaseComponent: boolean;\n    _propertyOrder: string[];\n    TypeName: string;\n    Properties: Record<string, ComponentProperty>;\n    InheritProperties?: boolean;\n    onRegister?: (engine: WonderlandEngine) => void;\n};\n\n/**\n * Component prototype interface.\n *\n * User component's should have the same structure.\n */\nexport interface ComponentProto {\n    /**\n     * Triggered after the component instantiation.\n     * For more information, please have a look at {@link Component.init}.\n     */\n    init?: () => void;\n    /**\n     * Triggered after the component is activated for the first time.\n     * For more information, please have a look at {@link Component.start}.\n     */\n    start?: () => void;\n    /**\n     * Triggered once per frame.\n     * For more information, please have a look at {@link Component.update}.\n     *\n     * @param dt Delta time, time since last update.\n     */\n    update?: (dt: number) => void;\n    /**\n     * Triggered when the component goes from deactivated to activated.\n     * For more information, please have a look at {@link Component.onActivate}.\n     */\n    onActivate?: () => void;\n    /**\n     * Triggered when the component goes from activated to deactivated.\n     * For more information, please have a look at {@link Component.onDeactivate}.\n     */\n    onDeactivate?: () => void;\n    /**\n     * Triggered when the component is removed from its object.\n     * For more information, please have a look at {@link Component.onDestroy}.\n     *\n     * @since 0.9.0\n     */\n    onDestroy?: () => void;\n}\n\n/**\n * Callback triggered on collision event.\n *\n * @param type Type of the event.\n * @param other Other component that was (un)collided with\n */\nexport type CollisionCallback = (type: CollisionEventType, other: PhysXComponent) => void;\n\n/** @todo Remove at 1.0.0 */\ndeclare const WL: WonderlandEngine;\n\n/**\n * Wonderland Engine API\n * @namespace WL\n */\n\n/**\n * Default set of logging tags used by the API.\n */\nexport enum LogTag {\n    /** Initialization, component registration, etc... */\n    Engine = 0,\n    /** Scene loading */\n    Scene = 1,\n    /** Component init, update, etc... */\n    Component = 2,\n}\n\n/**\n * Collider type enum for {@link CollisionComponent}.\n */\nexport enum Collider {\n    /**\n     * **Sphere Collider**:\n     *\n     * Simplest and most performant collision shape. If this type is set on a\n     * {@link CollisionComponent}, only the first component of\n     * {@link CollisionComponent#extents} will be used to determine the radius.\n     */\n    Sphere = 0,\n\n    /**\n     * **Axis Aligned Bounding Box Collider**:\n     *\n     * Box that is always aligned to XYZ axis. It cannot be rotated but is more\n     * efficient than {@link Collider.Box}.\n     */\n    AxisAlignedBox = 1,\n\n    /**\n     * **Aligned Bounding Box Collider**:\n     *\n     * Box that matches the object's rotation and translation correctly. This\n     * is the least efficient collider and should only be chosen over\n     * {@link Collider.Sphere} and {@link Collider.AxisAlignedBox} if really\n     * necessary.\n     */\n    Box = 2,\n}\n\n/**\n * Alignment type enum for {@link TextComponent}.\n */\nexport enum Alignment {\n    /** Text start is at object origin */\n    Left = 0,\n\n    /** Text center is at object origin */\n    Center = 1,\n\n    /** Text end is at object origin */\n    Right = 2,\n}\n\n/**\n * Vertical alignment type enum for {@link TextComponent}.\n */\nexport enum VerticalAlignment {\n    /** Text line is at object origin */\n    Line = 0,\n\n    /** Text middle is at object origin */\n    Middle = 1,\n\n    /** Text top is at object origin */\n    Top = 2,\n\n    /** Text bottom is at object origin */\n    Bottom = 3,\n}\n\n/**\n * Justification type enum for {@link TextComponent}.\n *\n * @deprecated Please use {@link VerticalAlignment} instead.\n */\nexport const Justification = VerticalAlignment;\n\n/**\n * Effect type enum for {@link TextComponent}.\n */\nexport enum TextEffect {\n    /** Text is rendered normally */\n    None = 0,\n\n    /** Text is rendered with an outline */\n    Outline = 1,\n\n    /** Text is rendered with a drop shadow */\n    Shadow = 2,\n}\n\n/**\n * Wrap mode enum for {@link TextComponent}.\n *\n * @since 1.2.1\n */\nexport enum TextWrapMode {\n    /** Text doesn't wrap automatically, only with explicit newline */\n    None = 0,\n\n    /** Text wraps at word boundaries */\n    Soft = 1,\n\n    /** Text wraps anywhere */\n    Hard = 2,\n\n    /** Text is cut off */\n    Clip = 3,\n}\n\n/**\n * Input type enum for {@link InputComponent}.\n */\nexport enum InputType {\n    /** Head input */\n    Head = 0,\n\n    /** Left eye input */\n    EyeLeft = 1,\n\n    /** Right eye input */\n    EyeRight = 2,\n\n    /** Left controller input */\n    ControllerLeft = 3,\n\n    /** Right controller input */\n    ControllerRight = 4,\n\n    /** Left ray input */\n    RayLeft = 5,\n\n    /** Right ray input */\n    RayRight = 6,\n}\n\n/**\n * Projection type enum for {@link ViewComponent}.\n */\nexport enum ProjectionType {\n    /** Perspective projection */\n    Perspective = 0,\n\n    /** Orthographic projection */\n    Orthographic = 1,\n}\n\n/**\n * Light type enum for {@link LightComponent}.\n */\nexport enum LightType {\n    /** Point light */\n    Point = 0,\n\n    /** Spot light */\n    Spot = 1,\n\n    /** Sun light / Directional light */\n    Sun = 2,\n}\n\n/**\n * Animation state of {@link AnimationComponent}.\n */\nexport enum AnimationState {\n    /** Animation is currently playing */\n    Playing = 0,\n\n    /** Animation is paused and will continue at current playback\n     * time on {@link AnimationComponent#play} */\n    Paused = 1,\n\n    /** Animation is stopped */\n    Stopped = 2,\n}\n\n/**\n * Root motion mode of {@link AnimationComponent}.\n */\nexport enum RootMotionMode {\n    /** Do nothing */\n    None = 0,\n    /** Move and rotate root with the delta of its motion */\n    ApplyToOwner = 1,\n    /** Store the motion to be retrieved by a JS script */\n    Script = 2,\n}\n\n/**\n * Rigid body force mode for {@link PhysXComponent#addForce} and {@link PhysXComponent#addTorque}.\n *\n * [PhysX API Reference](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxapi/files/structPxForceMode.html)\n */\nexport enum ForceMode {\n    /** Apply as force */\n    Force = 0,\n\n    /** Apply as impulse */\n    Impulse = 1,\n\n    /** Apply as velocity change, mass dependent */\n    VelocityChange = 2,\n\n    /** Apply as mass dependent force */\n    Acceleration = 3,\n}\n\n/**\n * Collision callback event type.\n */\nexport enum CollisionEventType {\n    /** Touch/contact detected, collision */\n    Touch = 0,\n\n    /** Touch/contact lost, uncollide */\n    TouchLost = 1,\n\n    /** Touch/contact with trigger detected */\n    TriggerTouch = 2,\n\n    /** Touch/contact with trigger lost */\n    TriggerTouchLost = 3,\n}\n\n/**\n * Rigid body {@link PhysXComponent#shape}.\n *\n * [PhysX SDK Guide](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/Geometry.html#geometry-types).\n */\nexport enum Shape {\n    /** No shape. */\n    None = 0,\n\n    /** Sphere shape. */\n    Sphere = 1,\n\n    /** Capsule shape. */\n    Capsule = 2,\n\n    /** Box shape. */\n    Box = 3,\n\n    /** Plane shape. */\n    Plane = 4,\n\n    /** Convex mesh shape. */\n    ConvexMesh = 5,\n\n    /** Triangle mesh shape. */\n    TriangleMesh = 6,\n}\n\n/**\n * Mesh attribute enum.\n * @since 0.9.0\n */\nexport enum MeshAttribute {\n    /** Position attribute, 3 floats */\n    Position = 0,\n\n    /** Tangent attribute, 4 floats */\n    Tangent = 1,\n\n    /** Normal attribute, 3 floats */\n    Normal = 2,\n\n    /** Texture coordinate attribute, 2 floats */\n    TextureCoordinate = 3,\n\n    /** Color attribute, 4 floats, RGBA, range `0` to `1` */\n    Color = 4,\n\n    /** Joint id attribute, 8 unsigned ints */\n    JointId = 5,\n\n    /** Joint weights attribute, 8 floats */\n    JointWeight = 6,\n\n    /** Secondary texture coordinate attribute, 2 floats */\n    SecondaryTextureCoordinate = 7,\n}\n\n/** Proxy used to override prototypes of destroyed objects. */\nexport const DestroyedObjectInstance = createDestroyedProxy('object');\n/** Proxy used to override prototypes of destroyed components. */\nexport const DestroyedComponentInstance = createDestroyedProxy('component');\n/** Proxy used to override prototypes of destroyed prefabs. */\nexport const DestroyedPrefabInstance = createDestroyedProxy('prefab/scene');\n\n/**\n * Check whether a given shape is a mesh or not.\n *\n * @param shape The shape to check.\n * @returns `true` if the shape is a mesh, `false` if it's a primitive.\n */\nfunction isMeshShape(shape: Shape): boolean {\n    return shape === Shape.ConvexMesh || shape === Shape.TriangleMesh;\n}\n\n/**\n * Check whether an object is the {@link Component} class or not,\n *\n * @note This method if foolproof to developers inadvertently using\n * multiple Wonderland Engine API in a bundle.\n *\n * @param value The object to check.\n * @returns `true` if the object is a {@link Component} class, `false` otherwise.\n */\nfunction isBaseComponentClass(\n    value: Constructor<any> | null\n): value is ComponentConstructor {\n    return (\n        !!value &&\n        value.hasOwnProperty('_isBaseComponent') &&\n        (value as ComponentConstructor)._isBaseComponent\n    );\n}\n\n/**\n * Constants.\n */\n\n/**\n * Default world up vector.\n */\nconst UP_VECTOR = [0, 1, 0];\n\nconst SQRT_3 = Math.sqrt(3);\n\n/**\n * Provides access to a component instance of a specified component type.\n *\n * @example\n *\n * This is how you extend this class to create your own custom\n * component:\n *\n * ```js\n * import { Component, Type } from '@wonderlandengine/api';\n *\n * export class MyComponent extends Component {\n *     static TypeName = 'my-component';\n *     static Properties = {\n *         myBoolean: { type: Type.Boolean, default: false },\n *     };\n *     start() {}\n *     onActivate() {}\n *     onDeactivate() {}\n *     update(dt) {}\n * }\n * ```\n *\n * In a component, the scene can be accessed using `this.scene`:\n *\n * ```js\n * import { Component, Type } from '@wonderlandengine/api';\n *\n * export class MyComponent extends Component {\n *     static TypeName = 'my-component';\n *     start() {\n *         const obj = this.scene.addObject();\n *     }\n * }\n * ```\n */\nexport class Component {\n    /**\n     * Pack scene index and component id.\n     *\n     * @param scene Scene index.\n     * @param id Component id.\n     * @returns The packed id.\n     *\n     * @hidden\n     */\n    static _pack(scene: number, id: number) {\n        return (scene << 22) | id;\n    }\n\n    /**\n     * `true` for every class inheriting from this class.\n     *\n     * @note This is a workaround for `instanceof` to prevent issues\n     * that could arise when an application ends up using multiple API versions.\n     *\n     * @hidden\n     */\n    static readonly _isBaseComponent = true;\n\n    /**\n     * Fixed order of attributes in the `Properties` array.\n     *\n     * @note This is used for parameter deserialization and is filled during\n     * component registration.\n     *\n     * @hidden\n     */\n    static _propertyOrder: string[] = [];\n\n    /**\n     * Unique identifier for this component class.\n     *\n     * This is used to register, add, and retrieve components of a given type.\n     */\n    static TypeName: string;\n\n    /**\n     * Properties of this component class.\n     *\n     * Properties are public attributes that can be configured via the\n     * Wonderland Editor.\n     *\n     * Example:\n     *\n     * ```js\n     * import { Component, Type } from '@wonderlandengine/api';\n     * class MyComponent extends Component {\n     *     static TypeName = 'my-component';\n     *     static Properties = {\n     *         myBoolean: { type: Type.Boolean, default: false },\n     *         myFloat: { type: Type.Float, default: false },\n     *         myTexture: { type: Type.Texture, default: null },\n     *     };\n     * }\n     * ```\n     *\n     * Properties are automatically added to each component instance, and are\n     * accessible like any JS attribute:\n     *\n     * ```js\n     * // Creates a new component and set each properties value:\n     * const myComponent = object.addComponent(MyComponent, {\n     *     myBoolean: true,\n     *     myFloat: 42.0,\n     *     myTexture: null\n     * });\n     *\n     * // You can also override the properties on the instance:\n     * myComponent.myBoolean = false;\n     * myComponent.myFloat = -42.0;\n     * ```\n     *\n     * #### References\n     *\n     * Reference types (i.e., mesh, object, etc...) can also be listed as **required**:\n     *\n     * ```js\n     * import {Component, Property} from '@wonderlandengine/api';\n     *\n     * class MyComponent extends Component {\n     *     static Properties = {\n     *         myObject: Property.object({required: true}),\n     *         myAnimation: Property.animation({required: true}),\n     *         myTexture: Property.texture({required: true}),\n     *         myMesh: Property.mesh({required: true}),\n     *     }\n     * }\n     * ```\n     *\n     * Please note that references are validated **once** before the call to {@link Component.start} only,\n     * via the {@link Component.validateProperties} method.\n     */\n    static Properties: Record<string, ComponentProperty>;\n\n    /**\n     * When set to `true`, the child class inherits from the parent\n     * properties, as shown in the following example:\n     *\n     * ```js\n     * import {Component, Property} from '@wonderlandengine/api';\n     *\n     * class Parent extends Component {\n     *     static TypeName = 'parent';\n     *     static Properties = {parentName: Property.string('parent')}\n     * }\n     *\n     * class Child extends Parent {\n     *     static TypeName = 'child';\n     *     static Properties = {name: Property.string('child')}\n     *     static InheritProperties = true;\n     *\n     *     start() {\n     *         // Works because `InheritProperties` is `true`.\n     *         console.log(`${this.name} inherits from ${this.parentName}`);\n     *     }\n     * }\n     * ```\n     *\n     * @note Properties defined in descendant classes will override properties\n     * with the same name defined in ancestor classes.\n     *\n     * Defaults to `true`.\n     */\n    static InheritProperties?: boolean;\n\n    /**\n     * Called when this component class is registered.\n     *\n     * @example\n     *\n     * This callback can be used to register dependencies of a component,\n     * e.g., component classes that need to be registered in order to add\n     * them at runtime with {@link Object3D.addComponent}, independent of whether\n     * they are used in the editor.\n     *\n     * ```js\n     * class Spawner extends Component {\n     *     static TypeName = 'spawner';\n     *\n     *     static onRegister(engine) {\n     *         engine.registerComponent(SpawnedComponent);\n     *     }\n     *\n     *     // You can now use addComponent with SpawnedComponent\n     * }\n     * ```\n     *\n     * @example\n     *\n     * This callback can be used to register different implementations of a\n     * component depending on client features or API versions.\n     *\n     * ```js\n     * // Properties need to be the same for all implementations!\n     * const SharedProperties = {};\n     *\n     * class Anchor extends Component {\n     *     static TypeName = 'spawner';\n     *     static Properties = SharedProperties;\n     *\n     *     static onRegister(engine) {\n     *         if(navigator.xr === undefined) {\n     *             /* WebXR unsupported, keep this dummy component *\\/\n     *             return;\n     *         }\n     *         /* WebXR supported! Override already registered dummy implementation\n     *          * with one depending on hit-test API support *\\/\n     *         engine.registerComponent(window.HitTestSource === undefined ?\n     *             AnchorWithoutHitTest : AnchorWithHitTest);\n     *     }\n     *\n     *     // This one implements no functions\n     * }\n     * ```\n     */\n    static onRegister?: (engine: WonderlandEngine) => void;\n\n    /**\n     * Allows to inherit properties directly inside the editor.\n     *\n     * @note Do not use directly, prefer using {@link inheritProperties}.\n     *\n     * @hidden\n     */\n    static _inheritProperties() {\n        inheritProperties(this);\n    }\n\n    /**\n     * Triggered when the component is initialized by the runtime. This method\n     * will only be triggered **once** after instantiation.\n     *\n     * @note During the initialization phase, `this.scene` will not match\n     * `engine.scene`, since `engine.scene` references the **active** scene:\n     *\n     * ```js\n     * import {Component} from '@wonderlandengine/api';\n     *\n     * class MyComponent extends Component{\n     *     init() {\n     *         const activeScene = this.engine.scene;\n     *         console.log(this.scene === activeScene); // Prints `false`\n     *     }\n     *     start() {\n     *         const activeScene = this.engine.scene;\n     *         console.log(this.scene === activeScene); // Prints `true`\n     *     }\n     * }\n     * ```\n     */\n    init?(): void;\n\n    /**\n     * Triggered when the component is started by the runtime, or activated.\n     *\n     * You can use that to re-initialize the state of the component.\n     */\n    start?(): void;\n\n    /**\n     * Triggered  **every frame** by the runtime.\n     *\n     * You should perform your business logic in this method. Example:\n     *\n     * ```js\n     * import { Component, Type } from '@wonderlandengine/api';\n     *\n     * class TranslateForwardComponent extends Component {\n     *     static TypeName = 'translate-forward-component';\n     *     static Properties = {\n     *         speed: { type: Type.Float, default: 1.0 }\n     *     };\n     *     constructor() {\n     *         this._forward = new Float32Array([0, 0, 0]);\n     *     }\n     *     update(dt) {\n     *         this.object.getForward(this._forward);\n     *         this._forward[0] *= this.speed;\n     *         this._forward[1] *= this.speed;\n     *         this._forward[2] *= this.speed;\n     *         this.object.translate(this._forward);\n     *     }\n     * }\n     * ```\n     *\n     * @param delta Elapsed time between this frame and the previous one, in **seconds**.\n     */\n    update?(delta: number): void;\n\n    /**\n     * Triggered when the component goes from an inactive state to an active state.\n     *\n     * @note When using ({@link WonderlandEngine.switchTo}), all the components\n     * that were previously active will trigger this method.\n     *\n     * @note You can manually activate or deactivate a component using: {@link Component.active:setter}.\n     */\n    onActivate?(): void;\n\n    /**\n     * Triggered when the component goes from an activated state to an inactive state.\n     *\n     * @note When using ({@link WonderlandEngine.switchTo}), the components of\n     * the scene getting deactivated will trigger this method.\n     *\n     * @note You can manually activate or deactivate a component using: {@link Component.active:setter}.\n     */\n    onDeactivate?(): void;\n\n    /**\n     * Triggered when the component is removed from its object.\n     * For more information, please have a look at {@link Component.onDestroy}.\n     *\n     * @note This method will not be triggered for inactive scene being destroyed.\n     *\n     * @since 0.9.0\n     */\n    onDestroy?(): void;\n\n    /** Manager index. @hidden */\n    readonly _manager: number;\n    /** Packed id, containing the scene and the local id. @hidden */\n    readonly _id: number;\n    /** Id relative to the scene component's manager. @hidden */\n    readonly _localId: number;\n\n    /**\n     * Object containing this object.\n     *\n     * **Note**: This is cached for faster retrieval.\n     *\n     * @hidden\n     */\n    _object: Object3D | null;\n\n    /** Scene instance. @hidden */\n    protected readonly _scene: Prefab;\n\n    /**\n     * Create a new instance\n     *\n     * @param engine The engine instance.\n     * @param manager Index of the manager.\n     * @param id WASM component instance index.\n     *\n     * @hidden\n     */\n    constructor(scene: Prefab, manager: number = -1, id: number = -1) {\n        this._scene = scene;\n        this._manager = manager;\n        this._localId = id;\n        this._id = Component._pack(scene._index, id);\n        this._object = null;\n    }\n\n    /** Scene this component is part of. */\n    get scene() {\n        return this._scene;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._scene.engine;\n    }\n\n    /** The name of this component's type */\n    get type(): string {\n        const ctor = this.constructor as ComponentConstructor;\n        return ctor.TypeName;\n    }\n\n    /** The object this component is attached to. */\n    get object(): Object3D {\n        if (!this._object) {\n            const objectId = this.engine.wasm._wl_component_get_object(\n                this._manager,\n                this._id\n            );\n            this._object = this._scene.wrap(objectId);\n        }\n        return this._object;\n    }\n\n    /**\n     * Set whether this component is active.\n     *\n     * Activating/deactivating a component comes at a small cost of reordering\n     * components in the respective component manager. This function therefore\n     * is not a trivial assignment.\n     *\n     * Does nothing if the component is already activated/deactivated.\n     *\n     * @param active New active state.\n     */\n    set active(active: boolean) {\n        this.engine.wasm._wl_component_setActive(this._manager, this._id, active);\n    }\n\n    /** `true` if the component is marked as active and its scene is active. */\n    get active(): boolean {\n        return this.markedActive && this._scene.isActive;\n    }\n\n    /**\n     * `true` if the component is marked as active in the scene, `false` otherwise.\n     *\n     * @note At the opposite of {@link Component.active}, this accessor doesn't\n     * take into account whether the scene is active or not.\n     */\n    get markedActive(): boolean {\n        return this.engine.wasm._wl_component_isActive(this._manager, this._id) != 0;\n    }\n\n    /**\n     * Copy all the properties from `src` into this instance.\n     *\n     * @note Only properties are copied. If a component needs to\n     * copy extra data, it needs to override this method.\n     *\n     * #### Example\n     *\n     * ```js\n     * class MyComponent extends Component {\n     *     nonPropertyData = 'Hello World';\n     *\n     *     copy(src) {\n     *         super.copy(src);\n     *         this.nonPropertyData = src.nonPropertyData;\n     *         return this;\n     *     }\n     * }\n     * ```\n     *\n     * @note This method is called by {@link Object3D.clone}. Do not attempt to:\n     *     - Create new component\n     *     - Read references to other objects\n     *\n     * When cloning via {@link Object3D.clone}, this method will be called before\n     * {@link Component.start}.\n     *\n     * @note JavaScript component properties aren't retargeted. Thus, references\n     * inside the source object will not be retargeted to the destination object,\n     * at the exception of the skin data on {@link MeshComponent} and {@link AnimationComponent}.\n     *\n     * @param src The source component to copy from.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    copy(src: Record<string, any>): this {\n        const ctor = this.constructor as ComponentConstructor;\n        const properties = ctor.Properties;\n        if (!properties) return this;\n        for (const name in properties) {\n            const property = properties[name];\n            const value = src[name];\n            if (value === undefined) continue;\n            const cloner = property.cloner ?? defaultPropertyCloner;\n            (this as Record<string, any>)[name] = cloner.clone(property.type, value);\n        }\n        return this;\n    }\n\n    /**\n     * Remove this component from its objects and destroy it.\n     *\n     * It is best practice to set the component to `null` after,\n     * to ensure it does not get used later.\n     *\n     * ```js\n     *    c.destroy();\n     *    c = null;\n     * ```\n     * @since 0.9.0\n     */\n    destroy(): void {\n        const manager = this._manager;\n        if (manager < 0 || this._id < 0) return;\n\n        /* This call will mark the component destroyed,\n         * automatically calling `_triggerOnDestroy`.  */\n        this.engine.wasm._wl_component_remove(manager, this._id);\n    }\n\n    /**\n     * Checks equality by comparing ids and **not** the JavaScript reference.\n     *\n     * @deprecate Use JavaScript reference comparison instead:\n     *\n     * ```js\n     * const componentA = obj.addComponent('mesh');\n     * const componentB = obj.addComponent('mesh');\n     * const componentC = componentB;\n     * console.log(componentA === componentB); // false\n     * console.log(componentA === componentA); // true\n     * console.log(componentB === componentC); // true\n     * ```\n     */\n    equals(otherComponent: Component | undefined | null): boolean {\n        /** @todo(2.0.0): Remove this method. */\n        if (!otherComponent) return false;\n        return this._manager === otherComponent._manager && this._id === otherComponent._id;\n    }\n\n    /**\n     * Reset the component properties to default.\n     *\n     * @note This is automatically called during the component instantiation.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetProperties(): this {\n        resetComponentProperties(this);\n        return this;\n    }\n\n    /** @deprecated Use {@link Component.resetProperties} instead. */\n    reset(): this {\n        return this.resetProperties();\n    }\n\n    /**\n     * Validate the properties on this instance.\n     *\n     * @throws If any of the required properties isn't initialized\n     * on this instance.\n     */\n    validateProperties(): void {\n        const ctor = this.constructor as ComponentConstructor;\n        if (!ctor.Properties) return;\n\n        for (const name in ctor.Properties) {\n            if (!ctor.Properties[name].required) continue;\n            if (!(this as Record<string, any>)[name]) {\n                throw new Error(`Property '${name}' is required but was not initialized`);\n            }\n        }\n    }\n\n    toString() {\n        if (this.isDestroyed) {\n            return 'Component(destroyed)';\n        }\n        return `Component('${this.type}', ${this._localId})`;\n    }\n\n    /**\n     * `true` if the component is destroyed, `false` otherwise.\n     *\n     * If {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`,\n     * reading a custom property will not work:\n     *\n     * ```js\n     * engine.erasePrototypeOnDestroy = true;\n     *\n     * const comp = obj.addComponent('mesh');\n     * comp.customParam = 'Hello World!';\n     *\n     * console.log(comp.isDestroyed); // Prints `false`\n     * comp.destroy();\n     * console.log(comp.isDestroyed); // Prints `true`\n     * console.log(comp.customParam); // Throws an error\n     * ```\n     *\n     * @since 1.1.1\n     */\n    get isDestroyed(): boolean {\n        return this._id < 0;\n    }\n\n    /** @hidden */\n    _copy(src: this, offsetsPtr: number, copyInfoPtr: number) {\n        const wasm = this.engine.wasm;\n\n        /** @todo: Support retargeting for `Object3D.clone` as well. */\n        const offsets = wasm.HEAPU32;\n        const offsetsStart = offsetsPtr >>> 2;\n\n        const copyInfoStart = copyInfoPtr >>> 1;\n        const srcRootIndex = wasm.HEAPU16[copyInfoStart]; /* Defaults to max ushort */\n        const srcRootSize = wasm.HEAPU16[copyInfoStart + 1]; /* Defaults to 0 */\n        const dstRootIndex = wasm.HEAPU16[copyInfoStart + 2]; /* Defaults to 0 */\n\n        const destScene = this._scene;\n\n        const ctor = this.constructor as ComponentConstructor;\n        for (const name in ctor.Properties) {\n            const value = (src as Record<string, any>)[name];\n            if (value === null) {\n                (this as Record<string, any>)[name] = null;\n                continue;\n            }\n\n            const prop = ctor.Properties[name];\n            const offset = offsets[offsetsStart + prop.type];\n\n            let retargeted = null;\n            switch (prop.type) {\n                case Type.Object: {\n                    let index = wasm._wl_object_index((value as Object3D)._id) + offset;\n                    const dist = index - srcRootIndex;\n                    if (dist >= 0 && dist <= srcRootSize) {\n                        /* Only retarget if a reference points into the source hierarchy. */\n                        index = dstRootIndex + dist;\n                    }\n                    const id = wasm._wl_object_id(destScene._index, index);\n                    retargeted = destScene.wrap(id);\n                    break;\n                }\n                case Type.Animation:\n                    retargeted = destScene.animations.wrap(\n                        offset + (value as Animation)._index\n                    );\n                    break;\n                case Type.Skin:\n                    retargeted = destScene.skins.wrap(offset + (value as Skin)._index);\n                    break;\n                default:\n                    const cloner = prop.cloner ?? defaultPropertyCloner;\n                    retargeted = cloner.clone(prop.type, value);\n                    break;\n            }\n            (this as Record<string, any>)[name] = retargeted;\n        }\n        return this;\n    }\n\n    /**\n     * Trigger the component {@link Component.init} method.\n     *\n     * @note Use this method instead of directly calling {@link Component.init},\n     * because this method creates an handler for the {@link Component.start}.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _triggerInit() {\n        if (this.init) {\n            try {\n                this.init();\n            } catch (e) {\n                this.engine.log.error(\n                    LogTag.Component,\n                    `Exception during ${this.type} init() on object ${this.object.name}`\n                );\n                this.engine.log.error(LogTag.Component, e);\n            }\n        }\n\n        /* Arm onActivate() with the initial start() call */\n        const oldActivate = this.onActivate;\n        this.onActivate = function () {\n            this.onActivate = oldActivate;\n            let failed = false;\n            try {\n                this.validateProperties();\n            } catch (e) {\n                this.engine.log.error(\n                    LogTag.Component,\n                    `Exception during ${this.type} validateProperties() on object ${this.object.name}`\n                );\n                this.engine.log.error(LogTag.Component, e);\n                failed = true;\n            }\n\n            try {\n                this.start?.();\n            } catch (e) {\n                this.engine.log.error(\n                    LogTag.Component,\n                    `Exception during ${this.type} start() on object ${this.object.name}`\n                );\n                this.engine.log.error(LogTag.Component, e);\n                failed = true;\n            }\n\n            if (failed) {\n                this.active = false;\n                return;\n            }\n\n            if (!this.onActivate) return;\n\n            try {\n                this.onActivate();\n            } catch (e) {\n                this.engine.log.error(\n                    LogTag.Component,\n                    `Exception during ${this.type} onActivate() on object ${this.object.name}`\n                );\n                this.engine.log.error(LogTag.Component, e);\n            }\n        };\n    }\n\n    /**\n     * Trigger the component {@link Component.update} method.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _triggerUpdate(dt: number) {\n        if (!this.update) return;\n        try {\n            this.update(dt);\n        } catch (e) {\n            this.engine.log.error(\n                LogTag.Component,\n                `Exception during ${this.type} update() on object ${this.object.name}`\n            );\n            this.engine.log.error(LogTag.Component, e);\n            if (this.engine.wasm._deactivate_component_on_error) {\n                this.active = false;\n            }\n        }\n    }\n\n    /**\n     * Trigger the component {@link Component.onActivate} method.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _triggerOnActivate() {\n        if (!this.onActivate) return;\n        try {\n            this.onActivate();\n        } catch (e) {\n            this.engine.log.error(\n                LogTag.Component,\n                `Exception during ${this.type} onActivate() on object ${this.object.name}`\n            );\n            this.engine.log.error(LogTag.Component, e);\n        }\n    }\n\n    /**\n     * Trigger the component {@link Component.onDeactivate} method.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _triggerOnDeactivate() {\n        if (!this.onDeactivate) return;\n        try {\n            this.onDeactivate();\n        } catch (e) {\n            this.engine.log.error(\n                LogTag.Component,\n                `Exception during ${this.type} onDeactivate() on object ${this.object.name}`\n            );\n            this.engine.log.error(LogTag.Component, e);\n        }\n    }\n\n    /**\n     * Trigger the component {@link Component.onDestroy} method.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _triggerOnDestroy() {\n        try {\n            if (this.onDestroy) this.onDestroy();\n        } catch (e) {\n            this.engine.log.error(\n                LogTag.Component,\n                `Exception during ${this.type} onDestroy() on object ${this.object.name}`\n            );\n            this.engine.log.error(LogTag.Component, e);\n        }\n        this._scene._components.destroy(this);\n    }\n}\n\n/**\n * Components must be registered before loading / appending a scene.\n *\n * It's possible to end up with a broken component in the following cases:\n *\n * - Component wasn't registered when the scene was loaded\n * - Component instantiation failed\n *\n * This dummy component is thus used as a placeholder by the engine.\n */\nexport class BrokenComponent extends Component {\n    static TypeName = '__broken-component__';\n}\n\n/**\n * Merge the ascendant properties of class\n *\n * This method walks the prototype chain, and merges\n * all the properties found in parent components.\n *\n * Example:\n *\n * ```js\n * import {Property, inheritProperties} from '@wonderlandengine/api';\n *\n * class Parent {\n *     static Properties = { parentProp: Property.string('parent') };\n * }\n *\n * class Child extends Parent {\n *     static Properties = { childProp: Property.string('child') };\n * }\n * inheritProperties(Child);\n * ```\n *\n * @param target The class in which properties should be merged\n *\n * @hidden\n */\nexport function inheritProperties(target: ComponentConstructor | PropertyRecord) {\n    const chain: ComponentConstructor[] = [];\n    let curr: Constructor<any> | null = target;\n    while (curr && !isBaseComponentClass(curr)) {\n        const comp = curr as ComponentConstructor;\n\n        /* Stop at the first class that doesn't require properties merging */\n        const needsMerge = comp.hasOwnProperty('InheritProperties')\n            ? comp.InheritProperties\n            : true;\n        if (!needsMerge) break;\n\n        if (comp.hasOwnProperty('Properties')) {\n            /* We push properties even if the object isn't deriving from a Component class.\n             * This could theoretically lead to issue, when inheriting from another type\n             * of component (lit-like elements) but extremely unlikely. */\n            chain.push(comp);\n        }\n        curr = Object.getPrototypeOf(curr);\n    }\n\n    /* No prototype merge is needed. */\n    if (!chain.length || (chain.length === 1 && chain[0] === target)) {\n        return;\n    }\n\n    const merged: Record<string, ComponentProperty> = {};\n    for (let i = chain.length - 1; i >= 0; --i) {\n        Object.assign(merged, chain[i].Properties);\n    }\n    target.Properties = merged;\n}\n\n/**\n * Native collision component.\n *\n * Provides access to a native collision component instance.\n */\nexport class CollisionComponent extends Component {\n    /** @override */\n    static TypeName = 'collision';\n\n    /** @overload */\n    getExtents(): Float32Array;\n    /**\n     * Collision component extents.\n     *\n     * If {@link collider} returns {@link Collider.Sphere}, only the first\n     * component of the returned vector is used.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     */\n    getExtents<T extends NumberArray>(out: T): T;\n    getExtents(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_collision_component_get_extents(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        return out;\n    }\n\n    /** Collision component collider */\n    @nativeProperty()\n    get collider(): Collider {\n        return this.engine.wasm._wl_collision_component_get_collider(this._id);\n    }\n\n    /**\n     * Set collision component collider.\n     *\n     * @param collider Collider of the collision component.\n     */\n    set collider(collider: Collider) {\n        this.engine.wasm._wl_collision_component_set_collider(this._id, collider);\n    }\n\n    /**\n     * Equivalent to {@link CollisionComponent.getExtents}.\n     *\n     * @note Prefer to use {@link CollisionComponent.getExtents} for performance.\n     */\n    @nativeProperty()\n    get extents(): Float32Array {\n        /** @todo: Break at 2.0.0. Do not allow modifying memory in-place. */\n        const wasm = this.engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_collision_component_get_extents(this._id),\n            3\n        );\n    }\n\n    /**\n     * Set collision component extents.\n     *\n     * If {@link collider} returns {@link Collider.Sphere}, only the first\n     * component of the passed vector is used.\n     *\n     * Example:\n     *\n     * ```js\n     * // Spans 1 unit on the x-axis, 2 on the y-axis, 3 on the z-axis.\n     * collision.extent = [1, 2, 3];\n     * ```\n     *\n     * @param extents Extents of the collision component, expects a\n     *      3 component array.\n     */\n    set extents(extents: Readonly<NumberArray>) {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_collision_component_get_extents(this._id) / 4; /* Align F32 */\n        wasm.HEAPF32[ptr] = extents[0];\n        wasm.HEAPF32[ptr + 1] = extents[1];\n        wasm.HEAPF32[ptr + 2] = extents[2];\n    }\n\n    /**\n     * Get collision component radius.\n     *\n     * @note If {@link collider} is not {@link Collider.Sphere}, the returned value\n     * corresponds to the radius of a sphere enclosing the shape.\n     *\n     * Example:\n     *\n     * ```js\n     * sphere.radius = 3.0;\n     * console.log(sphere.radius); // 3.0\n     *\n     * box.extents = [2.0, 2.0, 2.0];\n     * console.log(box.radius); // 1.732...\n     * ```\n     *\n     */\n    get radius(): number {\n        const wasm = this.engine.wasm;\n        if (this.collider === Collider.Sphere)\n            return wasm.HEAPF32[wasm._wl_collision_component_get_extents(this._id) >> 2];\n        const extents = new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_collision_component_get_extents(this._id),\n            3\n        );\n        const x2 = extents[0] * extents[0];\n        const y2 = extents[1] * extents[1];\n        const z2 = extents[2] * extents[2];\n        return Math.sqrt(x2 + y2 + z2) / 2;\n    }\n\n    /**\n     * Set collision component radius.\n     *\n     * @param radius Radius of the collision component\n     *\n     * @note If {@link collider} is not {@link Collider.Sphere},\n     * the extents are set to form a square that fits a sphere with the provided radius.\n     *\n     * Example:\n     *\n     * ```js\n     * aabbCollision.radius = 2.0; // AABB fits a sphere of radius 2.0\n     * boxCollision.radius = 3.0; // Box now fits a sphere of radius 3.0, keeping orientation\n     * ```\n     *\n     */\n    set radius(radius: number) {\n        const length = this.collider === Collider.Sphere ? radius : (2 * radius) / SQRT_3;\n        this.extents.set([length, length, length]);\n    }\n\n    /**\n     * Collision component group.\n     *\n     * The groups is a bitmask that is compared to other components in {@link CollisionComponent#queryOverlaps}\n     * or the group in {@link Scene#rayCast}.\n     *\n     * Colliders that have no common groups will not overlap with each other. If a collider\n     * has none of the groups set for {@link Scene#rayCast}, the ray will not hit it.\n     *\n     * Each bit represents belonging to a group, see example.\n     *\n     * ```js\n     *    // c belongs to group 2\n     *    c.group = (1 << 2);\n     *\n     *    // c belongs to group 0\n     *    c.group = (1 << 0);\n     *\n     *    // c belongs to group 0 *and* 2\n     *    c.group = (1 << 0) | (1 << 2);\n     *\n     *    (c.group & (1 << 2)) != 0; // true\n     *    (c.group & (1 << 7)) != 0; // false\n     * ```\n     */\n    @nativeProperty()\n    get group(): number {\n        return this.engine.wasm._wl_collision_component_get_group(this._id);\n    }\n\n    /**\n     * Set collision component group.\n     *\n     * @param group Group mask of the collision component.\n     */\n    set group(group: number) {\n        this.engine.wasm._wl_collision_component_set_group(this._id, group);\n    }\n\n    /**\n     * Query overlapping objects.\n     *\n     * Usage:\n     *\n     * ```js\n     * const collision = object.getComponent('collision');\n     * const overlaps = collision.queryOverlaps();\n     * for(const otherCollision of overlaps) {\n     *     const otherObject = otherCollision.object;\n     *     console.log(`Collision with object ${otherObject.objectId}`);\n     * }\n     * ```\n     *\n     * @returns Collision components overlapping this collider.\n     */\n    queryOverlaps(): CollisionComponent[] {\n        const count = this.engine.wasm._wl_collision_component_query_overlaps(\n            this._id,\n            this.engine.wasm._tempMem,\n            this.engine.wasm._tempMemSize >> 1\n        );\n        const overlaps: CollisionComponent[] = new Array(count);\n        for (let i = 0; i < count; ++i) {\n            const id = this.engine.wasm._tempMemUint16[i];\n            overlaps[i] = this._scene._components.wrapCollision(id);\n        }\n        return overlaps;\n    }\n}\n\n/**\n * Native text component\n *\n * Provides access to a native text component instance\n */\nexport class TextComponent extends Component {\n    /** @override */\n    static TypeName = 'text';\n\n    /** Text component alignment. */\n    @nativeProperty()\n    get alignment(): Alignment {\n        return this.engine.wasm._wl_text_component_get_horizontal_alignment(this._id);\n    }\n\n    /**\n     * Set text component alignment.\n     *\n     * @param alignment Alignment for the text component.\n     */\n    set alignment(alignment: Alignment) {\n        this.engine.wasm._wl_text_component_set_horizontal_alignment(this._id, alignment);\n    }\n\n    /**\n     * Text component vertical alignment.\n     * @since 1.2.0\n     */\n    @nativeProperty()\n    get verticalAlignment(): VerticalAlignment {\n        return this.engine.wasm._wl_text_component_get_vertical_alignment(this._id);\n    }\n\n    /**\n     * Set text component vertical alignment.\n     *\n     * @param verticalAlignment Vertical for the text component.\n     * @since 1.2.0\n     */\n    set verticalAlignment(verticalAlignment: VerticalAlignment) {\n        this.engine.wasm._wl_text_component_set_vertical_alignment(\n            this._id,\n            verticalAlignment\n        );\n    }\n\n    /**\n     * Text component justification.\n     *\n     * @deprecated Please use {@link TextComponent.verticalAlignment} instead.\n     */\n    @nativeProperty()\n    get justification() {\n        return this.verticalAlignment;\n    }\n\n    /**\n     * Set text component justification.\n     *\n     * @param justification Justification for the text component.\n     *\n     * @deprecated Please use {@link TextComponent.verticalAlignment} instead.\n     */\n    set justification(justification: VerticalAlignment) {\n        this.verticalAlignment = justification;\n    }\n\n    /**\n     * Whether text is justified horizontally.\n     *\n     * Aligns text horizontally to both margins by adding space between words.\n     *\n     * Requires {@link wrapMode} to be {@link TextWrapMode.Soft} or\n     * {@link TextWrapMode.Hard} and non-0 {@link wrapWidth}.\n     *\n     * The last line in a paragraph is never justified and respects\n     * {@link alignment}.\n     *\n     * @since 1.3.0\n     */\n    @nativeProperty()\n    get justified(): boolean {\n        return !!this.engine.wasm._wl_text_component_get_justified(this._id);\n    }\n\n    /**\n     * Set whether text is justified horizontally.\n     *\n     * @param justified New justified state for the text component.\n     * @since 1.3.0\n     */\n    set justified(justified: boolean) {\n        this.engine.wasm._wl_text_component_set_justified(this._id, justified);\n    }\n\n    /** Text component character spacing. */\n    @nativeProperty()\n    get characterSpacing(): number {\n        return this.engine.wasm._wl_text_component_get_character_spacing(this._id);\n    }\n\n    /**\n     * Set text component character spacing.\n     *\n     * @param spacing Character spacing for the text component.\n     */\n    set characterSpacing(spacing: number) {\n        this.engine.wasm._wl_text_component_set_character_spacing(this._id, spacing);\n    }\n\n    /** Text component line spacing. */\n    @nativeProperty()\n    get lineSpacing(): number {\n        return this.engine.wasm._wl_text_component_get_line_spacing(this._id);\n    }\n\n    /**\n     * Set text component line spacing.\n     *\n     * @param spacing Line spacing for the text component\n     */\n    set lineSpacing(spacing: number) {\n        this.engine.wasm._wl_text_component_set_line_spacing(this._id, spacing);\n    }\n\n    /** Text component effect. */\n    @nativeProperty()\n    get effect(): TextEffect {\n        return this.engine.wasm._wl_text_component_get_effect(this._id);\n    }\n\n    /**\n     * Set text component effect.\n     *\n     * @param effect Effect for the text component\n     */\n    set effect(effect: TextEffect) {\n        this.engine.wasm._wl_text_component_set_effect(this._id, effect);\n    }\n\n    /**\n     * Equivalent to {@link getEffectOffset}.\n     *\n     * @note Prefer to use {@link getEffectOffset} for performance.\n     *\n     * @since 1.3.0\n     */\n    @nativeProperty()\n    get effectOffset(): Float32Array {\n        return this.getEffectOffset();\n    }\n\n    /**\n     * Equivalent to {@link setEffectOffset}.\n     *\n     * @since 1.3.0\n     */\n    set effectOffset(offset: Readonly<NumberArray>) {\n        this.setEffectOffset(offset);\n    }\n\n    /** @overload */\n    getEffectOffset(): Float32Array;\n    /**\n     * Get text component effect offset.\n     *\n     * @param out Destination array, expected to have at least 2 elements.\n     * @returns The `out` parameter.\n     *\n     * @since 1.3.0\n     */\n    getEffectOffset<T extends NumberArray>(out: T): T;\n    getEffectOffset(out: NumberArray = new Float32Array(2)): NumberArray {\n        const wasm = this.engine.wasm;\n        wasm._wl_text_component_get_effectOffset(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        return out;\n    }\n\n    /**\n     * Set text component effect offset.\n     *\n     * The offset is given as X and Y factors for {@link Font.emHeight}. E.g. a\n     * value of 2 in one axis offsets the effect by two font line heights. A\n     * positive Y value moves the effect **upwards**.\n     *\n     * @param offset Array with new offset, expected to have at least 2 elements.\n     *\n     * @since 1.3.0\n     */\n    setEffectOffset(offset: Readonly<NumberArray>) {\n        const wasm = this.engine.wasm;\n        wasm._tempMemFloat.set(offset);\n        wasm._wl_text_component_set_effectOffset(this._id, wasm._tempMem);\n    }\n\n    /**\n     * Text component line wrap mode.\n     * @since 1.2.1\n     */\n    @nativeProperty()\n    get wrapMode(): TextWrapMode {\n        return this.engine.wasm._wl_text_component_get_wrapMode(this._id);\n    }\n\n    /**\n     * Set text component line wrap mode.\n     *\n     * @param wrapMode Line wrap mode for the text component.\n     * @since 1.2.1\n     */\n    set wrapMode(wrapMode: TextWrapMode) {\n        this.engine.wasm._wl_text_component_set_wrapMode(this._id, wrapMode);\n    }\n\n    /**\n     * Text component line wrap width, in object space.\n     * @since 1.2.1\n     */\n    @nativeProperty()\n    get wrapWidth(): number {\n        return this.engine.wasm._wl_text_component_get_wrapWidth(this._id);\n    }\n\n    /**\n     * Set text component line wrap width.\n     *\n     * Only takes effect when {@link wrapMode} is something other than\n     * {@link TextWrapMode.None}.\n     *\n     * @param width Line wrap width for the text component, in object space.\n     * @since 1.2.1\n     */\n    set wrapWidth(width: number) {\n        this.engine.wasm._wl_text_component_set_wrapWidth(this._id, width);\n    }\n\n    /** Text component text. */\n    @nativeProperty()\n    get text(): string {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_text_component_get_text(this._id);\n        return wasm.UTF8ToString(ptr);\n    }\n\n    /**\n     * Set text component text.\n     *\n     * @param text Text of the text component.\n     */\n    set text(text: any) {\n        const wasm = this.engine.wasm;\n        wasm._wl_text_component_set_text(this._id, wasm.tempUTF8(text.toString()));\n    }\n\n    /**\n     * Set material to render the text with.\n     *\n     * @param material New material.\n     */\n    set material(material: Material | null | undefined) {\n        const matIndex = material ? material._id : 0;\n        this.engine.wasm._wl_text_component_set_material(this._id, matIndex);\n    }\n\n    /** Material used to render the text. */\n    @nativeProperty()\n    get material(): Material | null {\n        const index = this.engine.wasm._wl_text_component_get_material(this._id);\n        return this.engine.materials.wrap(index);\n    }\n\n    /** @overload */\n    getBoundingBoxForText(text: string): Float32Array;\n    /**\n     * Axis-aligned bounding box for a given text, in object space.\n     *\n     * To calculate the size for the currently set text, use\n     * {@link getBoundingBox}.\n     *\n     * Useful for calculating the text size before an update and potentially\n     * adjusting the text:\n     *\n     * ```js\n     * let updatedName = 'some very long name';\n     * const box = new Float32Array(4);\n     * text.getBoundingBoxForText(updatedName, box);\n     * const width = box[2] - box[0];\n     * if(width > 2.0) {\n     *     updatedName = updatedName.slice(0, 5) + '...';\n     * }\n     * text.text = updatedName;\n     * ```\n     *\n     * @param text Text string to calculate the bounding box for.\n     * @param out Preallocated array to write into, to avoid garbage,\n     *     otherwise will allocate a new Float32Array.\n     *\n     * @returns Bounding box - left, bottom, right, top.\n     */\n    getBoundingBoxForText<T extends NumberArray>(text: string, out: T): T;\n    /** @overload */\n    getBoundingBoxForText<T extends NumberArray>(\n        text: string,\n        out: T | Float32Array = new Float32Array(4)\n    ): T | Float32Array {\n        const wasm = this.engine.wasm;\n        /* Offset by 4 floats, output is written to _tempMem */\n        const textPtr = wasm.tempUTF8(text, 4 * 4);\n        this.engine.wasm._wl_text_component_get_boundingBox(\n            this._id,\n            textPtr,\n            wasm._tempMem\n        );\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n        return out as T;\n    }\n\n    /** @overload */\n    getBoundingBox(): Float32Array;\n    /**\n     * Axis-aligned bounding box, in object space.\n     *\n     * The bounding box is computed using the current component properties\n     * that influence the position and size of the text. The bounding box is\n     * affected by alignment, spacing, effect type and the font set in the\n     * material.\n     *\n     * To calculate the size for a different text, use\n     * {@link getBoundingBoxForText}.\n     *\n     * Useful for adjusting text position or scaling:\n     *\n     * ```js\n     * const box = new Float32Array(4);\n     * text.getBoundingBox(box);\n     * const width = box[2] - box[0];\n     * // Make text 1m wide\n     * text.object.setScalingLocal([1/width, 1, 1]);\n     * ```\n     *\n     * @param text Text string to calculate the bounding box for.\n     * @param out Preallocated array to write into, to avoid garbage,\n     *     otherwise will allocate a new Float32Array.\n     *\n     * @returns Bounding box - left, bottom, right, top.\n     */\n    getBoundingBox<T extends NumberArray>(out: T): T;\n    /** @overload */\n    getBoundingBox<T extends NumberArray>(\n        out: T | Float32Array = new Float32Array(4)\n    ): T | Float32Array {\n        const wasm = this.engine.wasm;\n        this.engine.wasm._wl_text_component_get_boundingBox(this._id, 0, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n        return out as T;\n    }\n}\n\n/**\n * Native view component.\n *\n * Provides access to a native view component instance.\n */\nexport class ViewComponent extends Component {\n    /** @override */\n    static TypeName = 'view';\n\n    /**\n     * Projection type of the view.\n     *\n     * @since 1.2.2\n     */\n    @nativeProperty()\n    get projectionType(): ProjectionType {\n        return this.engine.wasm._wl_view_component_get_projectionType(this._id);\n    }\n\n    /**\n     * Set the projection type of the view.\n     *\n     * @param type New projection type.\n     * @since 1.2.2\n     */\n    set projectionType(type) {\n        this.engine.wasm._wl_view_component_set_projectionType(this._id, type);\n    }\n\n    /** @overload */\n    getProjectionMatrix(): Float32Array;\n    /**\n     * Projection matrix.\n     *\n     * A 4x4 matrix that transforms from view space to a WebGL-compatible clip\n     * space (-1 to 1 on all axes, near plane at -1, far plane at 1).\n     *\n     * If an XR session is active and this is the left or right eye view, this\n     * returns the projection matrix reported by the device.\n     *\n     * @note This is not necessarily the final projection matrix used for\n     * rendering. You can use it for unprojecting from screen space coordinates\n     * to view space.\n     *\n     * @param out Destination array/vector, expected to have at least 16 elements.\n     * @returns The `out` parameter.\n     */\n    getProjectionMatrix<T extends NumberArray>(out: T): T;\n    getProjectionMatrix(out: NumberArray = new Float32Array(16)): NumberArray {\n        const wasm = this.engine.wasm;\n        wasm.requireTempMem(16 * 4);\n        wasm._wl_view_component_get_projectionMatrix(this._id, wasm._tempMem);\n        for (let i = 0; i < 16; ++i) {\n            out[i] = wasm._tempMemFloat[i];\n        }\n        return out;\n    }\n\n    /**\n     * Equivalent to {@link ViewComponent.getProjectionMatrix}.\n     *\n     * @note Prefer to use {@link ViewComponent.getProjectionMatrix} for performance.\n     */\n    @enumerable()\n    get projectionMatrix(): Float32Array {\n        return this.getProjectionMatrix();\n    }\n\n    /**\n     * Override projection matrix for this view.\n     *\n     * Bypasses the generation of the projection matrix from viewport, fov, near, far.\n     *\n     * @hidden\n     */\n    _setProjectionMatrix(v: Readonly<NumberArray>) {\n        const wasm = this._scene.engine.wasm;\n        wasm.requireTempMem(16 * 4);\n        wasm._tempMemFloat.set(v);\n        wasm._wl_view_component_set_projectionMatrix(this._id, wasm._tempMem);\n    }\n\n    /**\n     * Generate projection matrix from viewport, fov, near, far.\n     *\n     * Overwrites any projection matrix set manually.\n     *\n     * @hidden\n     */\n    _generateProjectionMatrix() {\n        const wasm = this._scene.engine.wasm;\n        wasm._wl_view_component_generate_projectionMatrix(this._id);\n    }\n\n    /** ViewComponent near clipping plane value. */\n    @nativeProperty()\n    get near(): number {\n        return this.engine.wasm._wl_view_component_get_near(this._id);\n    }\n\n    /**\n     * Set near clipping plane distance for the view.\n     *\n     * If an XR session is active, the change will apply in the\n     * following frame, otherwise the change is immediate.\n     *\n     * @param near Near depth value.\n     */\n    set near(near: number) {\n        this.engine.wasm._wl_view_component_set_near(this._id, near);\n        /* Projection parameters must be updated for WebXR as well */\n        if (this.engine.xr && this.scene.isActive && this.active) {\n            this.engine.webxr.updateProjectionParams(near, this.far);\n        }\n    }\n\n    /** Far clipping plane value. */\n    @nativeProperty()\n    get far(): number {\n        return this.engine.wasm._wl_view_component_get_far(this._id);\n    }\n\n    /**\n     * Set far clipping plane distance for the view.\n     *\n     * If an XR session is active, the change will apply in the\n     * following frame, otherwise the change is immediate.\n     *\n     * @param far Near depth value.\n     */\n    set far(far: number) {\n        this.engine.wasm._wl_view_component_set_far(this._id, far);\n        /* Projection parameters must be updated for WebXR as well */\n        if (this.engine.xr && this.scene.isActive && this.active) {\n            this.engine.webxr.updateProjectionParams(this.near, far);\n        }\n    }\n\n    /**\n     * Get the horizontal field of view for the view, **in degrees**.\n     *\n     * If an XR session is active and this is the left or right eye view, this\n     * returns the field of view reported by the device, regardless of the fov\n     * that was set.\n     */\n    @nativeProperty()\n    get fov(): number {\n        return this.engine.wasm._wl_view_component_get_fov(this._id);\n    }\n\n    /**\n     * Set the horizontal field of view for the view, **in degrees**.\n     *\n     * Only has an effect if {@link projectionType} is\n     * {@link ProjectionType.Perspective}.\n     *\n     * If an XR session is active and this is the left or right eye view, the\n     * field of view reported by the device is used and this value is ignored.\n     * After the XR session ends, the new value is applied.\n     *\n     * @param fov Horizontal field of view, **in degrees**.\n     */\n    set fov(fov) {\n        this.engine.wasm._wl_view_component_set_fov(this._id, fov);\n    }\n\n    /** @overload */\n    getViewport(): Int32Array;\n    /**\n     * Get viewport of the view of the form: [x, y, width, height].\n     *\n     * @param out Destination array/vector, expected to have at least 4 elements.\n     * @returns The `out` parameter.\n     */\n    getViewport<T extends NumberArray>(out: T): T;\n    getViewport(out: NumberArray = new Int32Array(4)): NumberArray {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_view_component_get_viewport(this._id);\n        for (let i = 0; i < 4; ++i) {\n            out[i] = wasm.HEAPF32[ptr + i];\n        }\n        return out;\n    }\n\n    /**\n     * Get viewport of the view of the form: [x, y, width, height].\n     */\n    @enumerable()\n    get viewport(): Int32Array {\n        return this.getViewport();\n    }\n\n    /**\n     * Set viewport.\n     *\n     * @hidden\n     */\n    _setViewport(x: number, y: number, width: number, height: number) {\n        const wasm = this._scene.engine.wasm;\n        wasm._wl_view_component_set_viewport(this._id, x, y, width, height);\n    }\n\n    /**\n     * Get the width of the orthographic viewing volume.\n     *\n     * @since 1.2.2\n     */\n    @nativeProperty()\n    get extent(): number {\n        return this.engine.wasm._wl_view_component_get_extent(this._id);\n    }\n\n    /**\n     * Set the width of the orthographic viewing volume.\n     *\n     * Only has an effect if {@link projectionType} is\n     * {@link ProjectionType.Orthographic}.\n     *\n     * @param extent New extent.\n     * @since 1.2.2\n     */\n    set extent(extent) {\n        this.engine.wasm._wl_view_component_set_extent(this._id, extent);\n    }\n}\n\n/**\n * Native input component.\n *\n * Provides access to a native input component instance.\n */\nexport class InputComponent extends Component {\n    /** @override */\n    static TypeName = 'input';\n\n    /** Input component type */\n    @nativeProperty()\n    get inputType(): InputType {\n        return this.engine.wasm._wl_input_component_get_type(this._id);\n    }\n\n    /**\n     * Set input component type.\n     *\n     * @params New input component type.\n     */\n    set inputType(type: InputType) {\n        this.engine.wasm._wl_input_component_set_type(this._id, type);\n    }\n\n    /**\n     * WebXR Device API input source associated with this input component,\n     * if type {@link InputType.ControllerLeft} or {@link InputType.ControllerRight}.\n     */\n    @enumerable()\n    get xrInputSource(): XRInputSource | null {\n        const xr = this.engine.xr;\n        if (!xr) return null;\n\n        for (let inputSource of xr.session.inputSources) {\n            if (inputSource.handedness == this.handedness) {\n                return inputSource;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * 'left', 'right' or `null` depending on the {@link InputComponent#inputType}.\n     */\n    @enumerable()\n    get handedness(): 'left' | 'right' | null {\n        const inputType = this.inputType;\n        if (\n            inputType == InputType.ControllerRight ||\n            inputType == InputType.RayRight ||\n            inputType == InputType.EyeRight\n        )\n            return 'right';\n        if (\n            inputType == InputType.ControllerLeft ||\n            inputType == InputType.RayLeft ||\n            inputType == InputType.EyeLeft\n        )\n            return 'left';\n\n        return null;\n    }\n}\n\n/**\n * Native light component.\n *\n * Provides access to a native light component instance.\n */\nexport class LightComponent extends Component {\n    /** @override */\n    static TypeName = 'light';\n\n    /** @overload */\n    getColor(): Float32Array;\n    /**\n     * Get light color.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     * @since 1.0.0\n     */\n    getColor<T extends NumberArray>(out: T): T;\n    getColor(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_light_component_get_color(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        return out;\n    }\n\n    /**\n     * Set light color.\n     *\n     * @param c New color array/vector, expected to have at least 3 elements.\n     * @since 1.0.0\n     */\n    setColor(c: Readonly<NumberArray>): void {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_light_component_get_color(this._id) / 4; /* Align F32 */\n        wasm.HEAPF32[ptr] = c[0];\n        wasm.HEAPF32[ptr + 1] = c[1];\n        wasm.HEAPF32[ptr + 2] = c[2];\n    }\n\n    /**\n     * View on the light color.\n     *\n     * @note Prefer to use {@link getColor} in performance-critical code.\n     */\n    @nativeProperty()\n    get color(): Float32Array {\n        const wasm = this.engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_light_component_get_color(this._id),\n            3\n        );\n    }\n\n    /**\n     * Set light color.\n     *\n     * @param c Color of the light component.\n     *\n     * @note Prefer to use {@link setColor} in performance-critical code.\n     */\n    set color(c: Readonly<NumberArray>) {\n        this.color.set(c);\n    }\n\n    /** Light type. */\n    @nativeProperty()\n    get lightType(): LightType {\n        return this.engine.wasm._wl_light_component_get_type(this._id);\n    }\n\n    /**\n     * Set light type.\n     *\n     * @param lightType Type of the light component.\n     */\n    set lightType(t: LightType) {\n        this.engine.wasm._wl_light_component_set_type(this._id, t);\n    }\n\n    /**\n     * Light intensity.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get intensity(): number {\n        return this.engine.wasm._wl_light_component_get_intensity(this._id);\n    }\n\n    /**\n     * Set light intensity.\n     *\n     * @param intensity Intensity of the light component.\n     * @since 1.0.0\n     */\n    set intensity(intensity: number) {\n        this.engine.wasm._wl_light_component_set_intensity(this._id, intensity);\n    }\n\n    /**\n     * Outer angle for spot lights, in degrees.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get outerAngle(): number {\n        return this.engine.wasm._wl_light_component_get_outerAngle(this._id);\n    }\n\n    /**\n     * Set outer angle for spot lights.\n     *\n     * @param angle Outer angle, in degrees.\n     * @since 1.0.0\n     */\n    set outerAngle(angle: number) {\n        this.engine.wasm._wl_light_component_set_outerAngle(this._id, angle);\n    }\n\n    /**\n     * Inner angle for spot lights, in degrees.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get innerAngle(): number {\n        return this.engine.wasm._wl_light_component_get_innerAngle(this._id);\n    }\n\n    /**\n     * Set inner angle for spot lights.\n     *\n     * @param angle Inner angle, in degrees.\n     * @since 1.0.0\n     */\n    set innerAngle(angle: number) {\n        this.engine.wasm._wl_light_component_set_innerAngle(this._id, angle);\n    }\n\n    /**\n     * Whether the light casts shadows.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get shadows(): boolean {\n        return !!this.engine.wasm._wl_light_component_get_shadows(this._id);\n    }\n\n    /**\n     * Set whether the light casts shadows.\n     *\n     * @param b Whether the light casts shadows.\n     * @since 1.0.0\n     */\n    set shadows(b: boolean) {\n        this.engine.wasm._wl_light_component_set_shadows(this._id, b);\n    }\n\n    /**\n     * Range for shadows.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get shadowRange(): number {\n        return this.engine.wasm._wl_light_component_get_shadowRange(this._id);\n    }\n\n    /**\n     * Set range for shadows.\n     *\n     * @param range Range for shadows.\n     * @since 1.0.0\n     */\n    set shadowRange(range: number) {\n        this.engine.wasm._wl_light_component_set_shadowRange(this._id, range);\n    }\n\n    /**\n     * Bias value for shadows.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get shadowBias(): number {\n        return this.engine.wasm._wl_light_component_get_shadowBias(this._id);\n    }\n\n    /**\n     * Set bias value for shadows.\n     *\n     * @param bias Bias for shadows.\n     * @since 1.0.0\n     */\n    set shadowBias(bias: number) {\n        this.engine.wasm._wl_light_component_set_shadowBias(this._id, bias);\n    }\n\n    /**\n     * Normal bias value for shadows.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get shadowNormalBias(): number {\n        return this.engine.wasm._wl_light_component_get_shadowNormalBias(this._id);\n    }\n\n    /**\n     * Set normal bias value for shadows.\n     *\n     * @param bias Normal bias for shadows.\n     * @since 1.0.0\n     */\n    set shadowNormalBias(bias: number) {\n        this.engine.wasm._wl_light_component_set_shadowNormalBias(this._id, bias);\n    }\n\n    /**\n     * Texel size for shadows.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get shadowTexelSize(): number {\n        return this.engine.wasm._wl_light_component_get_shadowTexelSize(this._id);\n    }\n\n    /**\n     * Set texel size for shadows.\n     *\n     * @param size Texel size for shadows.\n     * @since 1.0.0\n     */\n    set shadowTexelSize(size: number) {\n        this.engine.wasm._wl_light_component_set_shadowTexelSize(this._id, size);\n    }\n\n    /**\n     * Cascade count for {@link LightType.Sun} shadows.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get cascadeCount(): number {\n        return this.engine.wasm._wl_light_component_get_cascadeCount(this._id);\n    }\n\n    /**\n     * Set cascade count for {@link LightType.Sun} shadows.\n     *\n     * @param count Cascade count.\n     * @since 1.0.0\n     */\n    set cascadeCount(count: number) {\n        this.engine.wasm._wl_light_component_set_cascadeCount(this._id, count);\n    }\n}\n\n/**\n * Native animation component.\n *\n * Provides access to a native animation component instance.\n */\nexport class AnimationComponent extends Component {\n    /** @override */\n    static TypeName = 'animation';\n\n    /**\n     * Emitter for animation events triggered on this component.\n     *\n     * The first argument is the name of the event.\n     */\n    readonly onEvent = new Emitter<[string]>();\n\n    /**\n     * Set animation to play.\n     *\n     * Make sure to {@link Animation#retarget} the animation to affect the\n     * right objects.\n     *\n     * @param anim Animation or animation graph to play.\n     */\n    set animation(anim: Animation | AnimationGraph | null | undefined) {\n        this.scene.assertOrigin(anim);\n        if (anim instanceof AnimationGraph) {\n            this.animationGraph = anim;\n            return;\n        }\n\n        this.engine.wasm._wl_animation_component_set_animation(\n            this._id,\n            anim ? anim._id : 0\n        );\n    }\n\n    /** Animation set for this component */\n    @nativeProperty()\n    get animation(): Animation | null {\n        const index = this.engine.wasm._wl_animation_component_get_animation(this._id);\n        return this._scene.animations.wrap(index);\n    }\n\n    /**\n     * Animation graph set for this component\n     *\n     * @since 1.4.6\n     */\n    @nativeProperty()\n    get animationGraph(): AnimationGraph | null {\n        const index = this.engine.wasm._wl_animation_component_get_animationGraph(this._id);\n        return this.scene.animationsGraphs.wrap(index);\n    }\n\n    /**\n     * Set animation graph to play.\n     *\n     * @param graph Animation graph to play.\n     *\n     * @since 1.4.6\n     */\n    set animationGraph(graph: AnimationGraph | null) {\n        this.engine.wasm._wl_animation_component_set_animationGraph(\n            this._id,\n            graph ? graph._id : 0\n        );\n    }\n\n    /**\n     * Set play count. Set to `0` to loop indefinitely.\n     *\n     * @param playCount Number of times to repeat the animation.\n     */\n    set playCount(playCount: number) {\n        this.engine.wasm._wl_animation_component_set_playCount(this._id, playCount);\n    }\n\n    /** Number of times the animation is played. */\n    @nativeProperty()\n    get playCount(): number {\n        return this.engine.wasm._wl_animation_component_get_playCount(this._id);\n    }\n\n    /**\n     * Set speed. Set to negative values to run the animation backwards.\n     *\n     * Setting speed has an immediate effect for the current frame's update\n     * and will continue with the speed from the current point in the animation.\n     *\n     * @param speed New speed at which to play the animation.\n     * @since 0.8.10\n     */\n    set speed(speed: number) {\n        this.engine.wasm._wl_animation_component_set_speed(this._id, speed);\n    }\n\n    /**\n     * Speed factor at which the animation is played.\n     *\n     * @since 0.8.10\n     */\n    @nativeProperty()\n    get speed(): number {\n        return this.engine.wasm._wl_animation_component_get_speed(this._id);\n    }\n\n    /** Current playing state of the animation */\n    @enumerable()\n    get state(): AnimationState {\n        return this.engine.wasm._wl_animation_component_state(this._id);\n    }\n\n    /**\n     * How to handle root motion on this component.\n     *\n     * @since 1.2.2\n     */\n    @nativeProperty()\n    get rootMotionMode(): RootMotionMode {\n        return this.engine.wasm._wl_animation_component_get_rootMotionMode(this._id);\n    }\n\n    /**\n     * Set how to handle root motion.\n     *\n     * @param mode Mode to handle root motion, see {@link RootMotionMode}.\n     * @since 1.2.2\n     */\n    set rootMotionMode(mode: RootMotionMode) {\n        this.engine.wasm._wl_animation_component_set_rootMotionMode(this._id, mode);\n    }\n\n    /**\n     * Current iteration of the animation.\n     *\n     * If {@link playCount} is not unlimited, the value is in the range from\n     * `0` to `playCount`.\n     *\n     * @since 1.2.3\n     */\n    get iteration(): number {\n        return this.engine.wasm._wl_animation_component_get_iteration(this._id);\n    }\n\n    /**\n     * Current playing position of the animation within the current iteration,\n     * in seconds.\n     *\n     * The value is in the range from `0.0` to {@link AnimationComponent#duration},\n     * if playing in reverse, this range is reversed as well.\n     *\n     * @since 1.2.3\n     */\n    get position(): number {\n        return this.engine.wasm._wl_animation_component_get_position(this._id);\n    }\n\n    /**\n     * Current duration to loop one iteration in seconds, offers a more accurate duration\n     * than {@link Animation#duration} when blending multiple animations.\n     *\n     * @since 1.2.3\n     */\n    get duration(): number {\n        return this.engine.wasm._wl_animation_component_get_duration(this._id);\n    }\n\n    /**\n     * Play animation.\n     *\n     * If the animation is currently paused, resumes from that position. If the\n     * animation is already playing, does nothing.\n     *\n     * To restart the animation, {@link AnimationComponent#stop} it first.\n     */\n    play(): void {\n        this.engine.wasm._wl_animation_component_play(this._id);\n    }\n\n    /** Stop animation. */\n    stop(): void {\n        this.engine.wasm._wl_animation_component_stop(this._id);\n    }\n\n    /** Pause animation. */\n    pause(): void {\n        this.engine.wasm._wl_animation_component_pause(this._id);\n    }\n\n    /**\n     * Get the value of a float parameter in the attached graph.\n     * Throws if the parameter is missing.\n     *\n     * @param name Name of the parameter.\n     * @since 1.2.0\n     */\n    getFloatParameter(name: string): number | null {\n        const wasm = this.engine.wasm;\n        const index = wasm._wl_animation_component_getGraphParamIndex(\n            this._id,\n            wasm.tempUTF8(name)\n        );\n        if (index === -1) {\n            throw Error(`Missing parameter '${name}'`);\n        }\n        wasm._wl_animation_component_getGraphParamValue(this._id, index, wasm._tempMem);\n        return wasm._tempMemFloat[0];\n    }\n\n    /**\n     * Set the value of a float parameter in the attached graph\n     * Throws if the parameter is missing.\n     *\n     * @param name Name of the parameter.\n     * @param value Float value to set.\n     * @returns 1 if the parameter was successfully set, 0 on fail.\n     * @since 1.2.0\n     */\n    setFloatParameter(name: string, value: number): void {\n        const wasm = this.engine.wasm;\n        const index = wasm._wl_animation_component_getGraphParamIndex(\n            this._id,\n            wasm.tempUTF8(name)\n        );\n        if (index === -1) {\n            throw Error(`Missing parameter '${name}'`);\n        }\n        wasm._tempMemFloat[0] = value;\n        wasm._wl_animation_component_setGraphParamValue(this._id, index, wasm._tempMem);\n    }\n\n    /** @overload */\n    getRootMotionTranslation(): Float32Array;\n    /**\n     * Get the root motion translation in **local space** calculated for the current frame.\n     *\n     * @note If {@link AnimationComponent.rootMotionMode} is not\n     * set to {@link RootMotionMode.Script} this will always return an identity translation.\n     *\n     * @since 1.2.2\n     */\n    getRootMotionTranslation<T extends NumberArray>(out: T): T;\n    getRootMotionTranslation(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        wasm._wl_animation_component_get_rootMotion_translation(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /** @overload */\n    getRootMotionRotation(): Float32Array;\n    /**\n     * Get the root motion rotation in **local space** calculated for the current frame.\n     *\n     * @note If {@link AnimationComponent.rootMotionMode} is not\n     * set to {@link RootMotionMode.Script} this will always return an identity rotation.\n     *\n     * @since 1.2.2\n     */\n    getRootMotionRotation<T extends NumberArray>(out: T): T;\n    getRootMotionRotation(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        wasm._wl_animation_component_get_rootMotion_rotation(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n}\n\n/**\n * Native mesh component.\n *\n * Provides access to a native mesh component instance.\n */\nexport class MeshComponent extends Component {\n    /** @override */\n    static TypeName = 'mesh';\n\n    /**\n     * Set material to render the mesh with.\n     *\n     * @param material Material to render the mesh with.\n     */\n    set material(material: Material | null | undefined) {\n        this.engine.wasm._wl_mesh_component_set_material(\n            this._id,\n            material ? material._id : 0\n        );\n    }\n\n    /** Material used to render the mesh. */\n    @nativeProperty()\n    get material(): Material | null {\n        const index = this.engine.wasm._wl_mesh_component_get_material(this._id);\n        return this.engine.materials.wrap(index);\n    }\n\n    /** Mesh rendered by this component. */\n    @nativeProperty()\n    get mesh(): Mesh | null {\n        const index = this.engine.wasm._wl_mesh_component_get_mesh(this._id);\n        return this.engine.meshes.wrap(index);\n    }\n\n    /**\n     * Set mesh to rendered with this component.\n     *\n     * @param mesh Mesh rendered by this component.\n     */\n    set mesh(mesh: Mesh | null | undefined) {\n        this.engine.wasm._wl_mesh_component_set_mesh(this._id, mesh?._id ?? 0);\n    }\n\n    /** Skin for this mesh component. */\n    @nativeProperty()\n    get skin(): Skin | null {\n        const index = this.engine.wasm._wl_mesh_component_get_skin(this._id);\n        return this._scene.skins.wrap(index);\n    }\n\n    /**\n     * Set skin to transform this mesh component.\n     *\n     * @param skin Skin to use for rendering skinned meshes.\n     */\n    set skin(skin: Skin | null | undefined) {\n        this.scene.assertOrigin(skin);\n        this.engine.wasm._wl_mesh_component_set_skin(this._id, skin ? skin._id : 0);\n    }\n\n    /**\n     * Morph targets for this mesh component.\n     *\n     * @since 1.2.0\n     */\n    @nativeProperty()\n    get morphTargets(): MorphTargets | null {\n        const index = this.engine.wasm._wl_mesh_component_get_morph_targets(this._id);\n        return this.engine.morphTargets.wrap(index);\n    }\n\n    /**\n     * Set morph targets to transform this mesh component.\n     *\n     * @param morphTargets Morph targets to use for rendering.\n     *\n     * @since 1.2.0\n     */\n    set morphTargets(morphTargets: MorphTargets | null | undefined) {\n        this.engine.wasm._wl_mesh_component_set_morph_targets(\n            this._id,\n            morphTargets?._id ?? 0\n        );\n    }\n\n    /**\n     * Equivalent to {@link getMorphTargetWeights}.\n     *\n     * @note Prefer to use {@link getMorphTargetWeights} for performance.\n     *\n     * @since 1.2.0\n     */\n    @nativeProperty()\n    get morphTargetWeights(): Float32Array {\n        return this.getMorphTargetWeights();\n    }\n\n    /**\n     * Set the morph target weights to transform this mesh component.\n     *\n     * @param weights New weights.\n     *\n     * @since 1.2.0\n     */\n    set morphTargetWeights(weights: Readonly<NumberArray>) {\n        this.setMorphTargetWeights(weights);\n    }\n\n    /** @overload */\n    getMorphTargetWeights(): Float32Array;\n    /**\n     * Get morph target weights for this mesh component.\n     *\n     * @param out Destination array, expected to have at least as many elements\n     *     as {@link MorphTargets.count}.\n     * @returns The `out` parameter.\n     *\n     * @since 1.2.0\n     */\n    getMorphTargetWeights<T extends NumberArray>(out: T): T;\n    getMorphTargetWeights(out?: NumberArray): NumberArray {\n        const wasm = this.engine.wasm;\n        const count = wasm._wl_mesh_component_get_morph_target_weights(\n            this._id,\n            wasm._tempMem\n        );\n        if (!out) {\n            out = new Float32Array(count);\n        }\n        for (let i = 0; i < count; ++i) {\n            out[i] = wasm._tempMemFloat[i];\n        }\n        return out;\n    }\n\n    /**\n     * Get the weight of a single morph target.\n     *\n     * @param target Index of the morph target.\n     * @returns The weight.\n     *\n     * @since 1.2.0\n     */\n    getMorphTargetWeight(target: number) {\n        const count = this.morphTargets?.count ?? 0;\n        if (target >= count) {\n            throw new Error(`Index ${target} is out of bounds for ${count} targets`);\n        }\n        return this.engine.wasm._wl_mesh_component_get_morph_target_weight(\n            this._id,\n            target\n        );\n    }\n\n    /**\n     * Set morph target weights for this mesh component.\n     *\n     * @param weights Array of new weights, expected to have at least as many\n     *     elements as {@link MorphTargets.count}.\n     *\n     * @since 1.2.0\n     */\n    setMorphTargetWeights(weights: Readonly<NumberArray>) {\n        const count = this.morphTargets?.count ?? 0;\n        if (weights.length !== count) {\n            throw new Error(`Expected ${count} weights but got ${weights.length}`);\n        }\n        const wasm = this.engine.wasm;\n        wasm._tempMemFloat.set(weights);\n        wasm._wl_mesh_component_set_morph_target_weights(\n            this._id,\n            wasm._tempMem,\n            weights.length\n        );\n    }\n\n    /**\n     * Set the weight of a single morph target.\n     *\n     * @param target Index of the morph target.\n     * @param weight The new weight.\n     *\n     * ## Usage\n     *\n     * ```js\n     * const mesh = object.getComponent('mesh');\n     * const mouthTarget = mesh.morphTargets.getTargetIndex('mouth');\n     * mesh.setMorphTargetWeight(mouthTarget, 0.5);\n     * ```\n     *\n     * @since 1.2.0\n     */\n    setMorphTargetWeight(target: number, weight: number) {\n        const count = this.morphTargets?.count ?? 0;\n        if (target >= count) {\n            throw new Error(`Index ${target} is out of bounds for ${count} targets`);\n        }\n        this.engine.wasm._wl_mesh_component_set_morph_target_weight(\n            this._id,\n            target,\n            weight\n        );\n    }\n}\n\n/**\n * Native particle effect component.\n *\n * @since 1.4.0\n */\nexport class ParticleEffectComponent extends Component {\n    /** @override */\n    static TypeName = 'particle-effect';\n\n    /** Particle effect used by this component. */\n    @nativeProperty()\n    get particleEffect(): ParticleEffect | null {\n        const index = this.engine.wasm._wl_particleEffect_component_get_particleEffect(\n            this._id\n        );\n        return this.engine.particleEffects.wrap(index);\n    }\n\n    /**\n     * Set particle effect to use with this component.\n     *\n     * @param particleEffect Particle effect used by this component.\n     */\n    set particleEffect(particleEffect: ParticleEffect | null | undefined) {\n        this.engine.wasm._wl_particleEffect_component_set_particleEffect(\n            this._id,\n            particleEffect?._id ?? 0\n        );\n    }\n}\n\n/**\n * Enum for Physics axes locking\n *\n * See {@link PhysXComponent.angularLockAxis} and {@link PhysXComponent.linearLockAxis}.\n */\nexport enum LockAxis {\n    /**\n     * No axis selected.\n     */\n    None = 0,\n\n    /**\n     * **X axis**:\n     */\n    X = 1 << 0,\n\n    /**\n     * **Y axis**:\n     */\n    Y = 1 << 1,\n\n    /**\n     * **Z axis**:\n     */\n    Z = 1 << 2,\n}\n\n/**\n * Native physx rigid body component.\n *\n * Provides access to a native mesh component instance.\n * Only available when using physx enabled runtime, see \"Project Settings > Runtime\".\n */\nexport class PhysXComponent extends Component {\n    /** @override */\n    static TypeName = 'physx';\n\n    /** @overload */\n    getTranslationOffset(): Float32Array;\n    /**\n     * Local translation offset.\n     *\n     * Allows to move a physx component without creating a new object in the hierarchy.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     *\n     * @since 1.1.1\n     */\n    getTranslationOffset<T extends NumberArray>(out: T): T;\n    getTranslationOffset(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        wasm._wl_physx_component_get_offsetTranslation(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /** @overload */\n    getRotationOffset(): Float32Array;\n    /**\n     * Local rotation offset represented as a quaternion.\n     *\n     * Allows to rotate a physx component without creating a new object in the hierarchy.\n     *\n     * @param out Destination array/vector, expected to have at least 4 elements.\n     * @returns The `out` parameter.\n     *\n     * @since 1.1.1\n     */\n    getRotationOffset<T extends NumberArray>(out: T): T;\n    getRotationOffset(out: NumberArray = new Float32Array(4)): NumberArray {\n        const wasm = this.engine.wasm;\n        const ptr =\n            wasm._wl_physx_component_get_offsetTransform(this._id) >> 2; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        out[3] = wasm.HEAPF32[ptr + 3];\n        return out;\n    }\n\n    /** @overload */\n    getExtents(): Float32Array;\n    /**\n     * The shape extents for collision detection.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     */\n    getExtents<T extends NumberArray>(out: T): T;\n    getExtents(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_physx_component_get_extents(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        return out;\n    }\n\n    /** @overload */\n    getLinearVelocity(): Float32Array;\n    /**\n     * Linear velocity or `[0, 0, 0]` if the component is not active.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     */\n    getLinearVelocity<T extends NumberArray>(out: T): T;\n    getLinearVelocity(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        const tempMemFloat = wasm._tempMemFloat;\n        wasm._wl_physx_component_get_linearVelocity(\n            this._id,\n            wasm._tempMem\n        ); /* Align F32 */\n        out[0] = tempMemFloat[0];\n        out[1] = tempMemFloat[1];\n        out[2] = tempMemFloat[2];\n        return out;\n    }\n\n    /** @overload */\n    getAngularVelocity(): Float32Array;\n    /**\n     * Angular velocity or `[0, 0, 0]` if the component is not active.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     */\n    getAngularVelocity<T extends NumberArray>(out: T): T;\n    getAngularVelocity(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        const tempMemFloat = wasm._tempMemFloat;\n        wasm._wl_physx_component_get_angularVelocity(\n            this._id,\n            wasm._tempMem\n        ); /* Align F32 */\n        out[0] = tempMemFloat[0];\n        out[1] = tempMemFloat[1];\n        out[2] = tempMemFloat[2];\n        return out;\n    }\n\n    /**\n     * Set whether this rigid body is static.\n     *\n     * Setting this property only takes effect once the component\n     * switches from inactive to active.\n     *\n     * @param b Whether the rigid body should be static.\n     */\n    set static(b: boolean) {\n        this.engine.wasm._wl_physx_component_set_static(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body is static.\n     *\n     * This property returns whether the rigid body is *effectively*\n     * static. If static property was set while the rigid body was\n     * active, it will not take effect until the rigid body is set\n     * inactive and active again. Until the component is set inactive,\n     * this getter will return whether the rigid body is actually\n     * static.\n     */\n    @nativeProperty()\n    get static(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_static(this._id);\n    }\n\n    /**\n     * Equivalent to {@link PhysXComponent.getTranslationOffset}.\n     *\n     * Gives a quick view of the offset in a debugger.\n     *\n     * @note Prefer to use {@link PhysXComponent.getTranslationOffset} for performance.\n     *\n     * @since 1.1.1\n     */\n    @nativeProperty()\n    get translationOffset(): Float32Array {\n        return this.getTranslationOffset();\n    }\n\n    /**\n     * Set the offset translation.\n     *\n     * The array must be a vector of at least **3** elements.\n     *\n     * @note The component must be re-activated to apply the change.\n     *\n     * @since 1.1.1\n     */\n    set translationOffset(offset: ArrayLike<number>) {\n        const wasm = this.engine.wasm;\n        wasm._wl_physx_component_set_offsetTranslation(\n            this._id,\n            offset[0],\n            offset[1],\n            offset[2]\n        );\n    }\n\n    /**\n     * Equivalent to {@link PhysXComponent.getRotationOffset}.\n     *\n     * Gives a quick view of the offset in a debugger.\n     *\n     * @note Prefer to use {@link PhysXComponent.getRotationOffset} for performance.\n     *\n     * @since 1.1.1\n     */\n    @nativeProperty()\n    get rotationOffset(): Float32Array {\n        return this.getRotationOffset();\n    }\n\n    /**\n     * Set the offset rotation.\n     *\n     * The array must be a quaternion of at least **4** elements.\n     *\n     * @note The component must be re-activated to apply the change.\n     *\n     * @since 1.1.1\n     */\n    set rotationOffset(offset: ArrayLike<number>) {\n        const wasm = this.engine.wasm;\n        wasm._wl_physx_component_set_offsetRotation(\n            this._id,\n            offset[0],\n            offset[1],\n            offset[2],\n            offset[3]\n        );\n    }\n\n    /**\n     * Set whether this rigid body is kinematic.\n     *\n     * @param b Whether the rigid body should be kinematic.\n     */\n    set kinematic(b: boolean) {\n        this.engine.wasm._wl_physx_component_set_kinematic(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body is kinematic.\n     */\n    @nativeProperty()\n    get kinematic(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_kinematic(this._id);\n    }\n\n    /**\n     * Set whether this rigid body's gravity is enabled.\n     *\n     * @param b Whether the rigid body's gravity should be enabled.\n     */\n    set gravity(b: boolean) {\n        this.engine.wasm._wl_physx_component_set_gravity(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body's gravity flag is enabled.\n     */\n    @nativeProperty()\n    get gravity(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_gravity(this._id);\n    }\n\n    /**\n     * Set whether this rigid body's simulate flag is enabled.\n     *\n     * @param b Whether the rigid body's simulate flag should be enabled.\n     */\n    set simulate(b: boolean) {\n        this.engine.wasm._wl_physx_component_set_simulate(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body's simulate flag is enabled.\n     */\n    @nativeProperty()\n    get simulate(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_simulate(this._id);\n    }\n\n    /**\n     * Set whether to allow simulation of this rigid body.\n     *\n     * {@link allowSimulation} and {@link trigger} can not be enabled at the\n     * same time. Enabling {@link allowSimulation} while {@link trigger} is enabled\n     * will disable {@link trigger}.\n     *\n     * @param b Whether to allow simulation of this rigid body.\n     */\n    set allowSimulation(b: boolean) {\n        this.engine.wasm._wl_physx_component_set_allowSimulation(this._id, b);\n    }\n\n    /**\n     * Whether to allow simulation of this rigid body.\n     */\n    @nativeProperty()\n    get allowSimulation(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_allowSimulation(this._id);\n    }\n\n    /**\n     * Set whether this rigid body may be queried in ray casts.\n     *\n     * @param b Whether this rigid body may be queried in ray casts.\n     */\n    set allowQuery(b: boolean) {\n        this.engine.wasm._wl_physx_component_set_allowQuery(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body may be queried in ray casts.\n     */\n    @nativeProperty()\n    get allowQuery(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_allowQuery(this._id);\n    }\n\n    /**\n     * Set whether this physics body is a trigger.\n     *\n     * {@link allowSimulation} and {@link trigger} can not be enabled at the\n     * same time. Enabling trigger while {@link allowSimulation} is enabled,\n     * will disable {@link allowSimulation}.\n     *\n     * @param b Whether this physics body is a trigger.\n     */\n    set trigger(b: boolean) {\n        this.engine.wasm._wl_physx_component_set_trigger(this._id, b);\n    }\n\n    /**\n     * Whether this physics body is a trigger.\n     */\n    @nativeProperty()\n    get trigger(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_trigger(this._id);\n    }\n\n    /**\n     * Set the shape for collision detection.\n     *\n     * @param s New shape.\n     * @since 0.8.5\n     */\n    set shape(s: Shape) {\n        this.engine.wasm._wl_physx_component_set_shape(this._id, s);\n    }\n\n    /** The shape for collision detection. */\n    @nativeProperty()\n    get shape(): Shape {\n        return this.engine.wasm._wl_physx_component_get_shape(this._id);\n    }\n\n    /**\n     * Set additional data for the shape.\n     *\n     * Retrieved only from {@link PhysXComponent#shapeData}.\n     * @since 0.8.10\n     */\n    set shapeData(d) {\n        if (d == null || !isMeshShape(this.shape)) return;\n        this.engine.wasm._wl_physx_component_set_shape_data(this._id, d.index);\n    }\n\n    /**\n     * Additional data for the shape.\n     *\n     * `null` for {@link Shape} values: `None`, `Sphere`, `Capsule`, `Box`, `Plane`.\n     * `{index: n}` for `TriangleMesh` and `ConvexHull`.\n     *\n     * This data is currently only for passing onto or creating other {@link PhysXComponent}.\n     * @since 0.8.10\n     */\n    @nativeProperty()\n    get shapeData(): {\n        index: number;\n    } | null {\n        if (!isMeshShape(this.shape)) return null;\n        return {\n            index: this.engine.wasm._wl_physx_component_get_shape_data(this._id),\n        };\n    }\n\n    /**\n     * Set the shape extents for collision detection.\n     *\n     * @param e New extents for the shape.\n     * @since 0.8.5\n     */\n    set extents(e: Readonly<NumberArray>) {\n        this.extents.set(e);\n    }\n\n    /**\n     * Equivalent to {@link PhysXComponent.getExtents}.\n     *\n     * @note Prefer to use {@link PhysXComponent.getExtents} for performance.\n     */\n    @nativeProperty()\n    get extents(): Float32Array {\n        const wasm = this.engine.wasm;\n        /** @todo: Break at 2.0.0. Do not allow modifying memory in-place. */\n        const ptr = wasm._wl_physx_component_get_extents(this._id);\n        return new Float32Array(wasm.HEAPF32.buffer, ptr, 3);\n    }\n\n    /**\n     * Get staticFriction.\n     */\n    @nativeProperty()\n    get staticFriction(): number {\n        return this.engine.wasm._wl_physx_component_get_staticFriction(this._id);\n    }\n\n    /**\n     * Set staticFriction.\n     * @param v New staticFriction.\n     */\n    set staticFriction(v: number) {\n        this.engine.wasm._wl_physx_component_set_staticFriction(this._id, v);\n    }\n\n    /**\n     * Get dynamicFriction.\n     */\n    @nativeProperty()\n    get dynamicFriction(): number {\n        return this.engine.wasm._wl_physx_component_get_dynamicFriction(this._id);\n    }\n\n    /**\n     * Set dynamicFriction\n     * @param v New dynamicDamping.\n     */\n    set dynamicFriction(v: number) {\n        this.engine.wasm._wl_physx_component_set_dynamicFriction(this._id, v);\n    }\n\n    /**\n     * Get bounciness.\n     * @since 0.9.0\n     */\n    @nativeProperty()\n    get bounciness(): number {\n        return this.engine.wasm._wl_physx_component_get_bounciness(this._id);\n    }\n\n    /**\n     * Set bounciness.\n     * @param v New bounciness.\n     * @since 0.9.0\n     */\n    set bounciness(v: number) {\n        this.engine.wasm._wl_physx_component_set_bounciness(this._id, v);\n    }\n\n    /**\n     * Get linearDamping/\n     */\n    @nativeProperty()\n    get linearDamping(): number {\n        return this.engine.wasm._wl_physx_component_get_linearDamping(this._id);\n    }\n\n    /**\n     * Set linearDamping.\n     * @param v New linearDamping.\n     */\n    set linearDamping(v: number) {\n        this.engine.wasm._wl_physx_component_set_linearDamping(this._id, v);\n    }\n\n    /** Get angularDamping. */\n    @nativeProperty()\n    get angularDamping(): number {\n        return this.engine.wasm._wl_physx_component_get_angularDamping(this._id);\n    }\n\n    /**\n     * Set angularDamping.\n     * @param v New angularDamping.\n     */\n    set angularDamping(v: number) {\n        this.engine.wasm._wl_physx_component_set_angularDamping(this._id, v);\n    }\n\n    /**\n     * Set linear velocity.\n     *\n     * [PhysX Manual - \"Velocity\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#velocity)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param v New linear velocity.\n     */\n    set linearVelocity(v: Readonly<NumberArray>) {\n        this.engine.wasm._wl_physx_component_set_linearVelocity(this._id, v[0], v[1], v[2]);\n    }\n\n    /**\n     * Equivalent to {@link PhysXComponent.getLinearVelocity}.\n     *\n     * @note Prefer to use {@link PhysXComponent.getLinearVelocity} for performance.\n     */\n    @nativeProperty()\n    get linearVelocity(): Float32Array {\n        /** @todo: Break at 2.0.0. Do not allow modifying memory in-place. */\n        const wasm = this.engine.wasm;\n        wasm._wl_physx_component_get_linearVelocity(this._id, wasm._tempMem);\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._tempMem, 3);\n    }\n\n    /**\n     * Set angular velocity\n     *\n     * [PhysX Manual - \"Velocity\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#velocity)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param v New angular velocity\n     */\n    set angularVelocity(v: Readonly<NumberArray>) {\n        this.engine.wasm._wl_physx_component_set_angularVelocity(\n            this._id,\n            v[0],\n            v[1],\n            v[2]\n        );\n    }\n\n    /**\n     * Equivalent to {@link PhysXComponent.getAngularVelocity}.\n     *\n     * @note Prefer to use {@link PhysXComponent.getAngularVelocity} for performance.\n     */\n    @nativeProperty()\n    get angularVelocity(): Float32Array {\n        /** @todo: Break at 2.0.0. Do not allow modifying memory in-place. */\n        const wasm = this.engine.wasm;\n        wasm._wl_physx_component_get_angularVelocity(this._id, wasm._tempMem);\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._tempMem, 3);\n    }\n\n    /**\n     * Set the components groups mask.\n     *\n     * @param flags New flags that need to be set.\n     */\n    set groupsMask(flags: number) {\n        this.engine.wasm._wl_physx_component_set_groupsMask(this._id, flags);\n    }\n\n    /**\n     * Get the components groups mask flags.\n     *\n     * Each bit represents membership to group, see example.\n     *\n     * ```js\n     * // Assign c to group 2\n     * c.groupsMask = (1 << 2);\n     *\n     * // Assign c to group 0\n     * c.groupsMask  = (1 << 0);\n     *\n     * // Assign c to group 0 and 2\n     * c.groupsMask = (1 << 0) | (1 << 2);\n     *\n     * (c.groupsMask & (1 << 2)) != 0; // true\n     * (c.groupsMask & (1 << 7)) != 0; // false\n     * ```\n     */\n    @nativeProperty()\n    get groupsMask(): number {\n        return this.engine.wasm._wl_physx_component_get_groupsMask(this._id);\n    }\n\n    /**\n     * Set the components blocks mask.\n     *\n     * @param flags New flags that need to be set.\n     */\n    set blocksMask(flags: number) {\n        this.engine.wasm._wl_physx_component_set_blocksMask(this._id, flags);\n    }\n\n    /**\n     * Get the components blocks mask flags.\n     *\n     * Each bit represents membership to the block, see example.\n     *\n     * ```js\n     * // Block overlap with any objects in group 2\n     * c.blocksMask = (1 << 2);\n     *\n     * // Block overlap with any objects in group 0\n     * c.blocksMask  = (1 << 0)\n     *\n     * // Block overlap with any objects in group 0 and 2\n     * c.blocksMask = (1 << 0) | (1 << 2);\n     *\n     * (c.blocksMask & (1 << 2)) != 0; // true\n     * (c.blocksMask & (1 << 7)) != 0; // false\n     * ```\n     */\n    @nativeProperty()\n    get blocksMask(): number {\n        return this.engine.wasm._wl_physx_component_get_blocksMask(this._id);\n    }\n\n    /**\n     * Set axes to lock for linear velocity.\n     *\n     * @param lock The Axis that needs to be set.\n     *\n     * Combine flags with Bitwise OR:\n     *\n     * ```js\n     * body.linearLockAxis = LockAxis.X | LockAxis.Y; // x and y set\n     * body.linearLockAxis = LockAxis.X; // y unset\n     * ```\n     *\n     * @note This has no effect if the component is static.\n     */\n    set linearLockAxis(lock: LockAxis) {\n        this.engine.wasm._wl_physx_component_set_linearLockAxis(this._id, lock);\n    }\n\n    /**\n     * Get the linear lock axes flags.\n     *\n     * To get the state of a specific flag, Bitwise AND with the LockAxis needed.\n     *\n     * ```js\n     * if(body.linearLockAxis & LockAxis.Y) {\n     *     console.log(\"The Y flag was set!\");\n     * }\n     * ```\n     *\n     * @return axes that are currently locked for linear movement.\n     */\n    @nativeProperty()\n    get linearLockAxis(): LockAxis {\n        return this.engine.wasm._wl_physx_component_get_linearLockAxis(this._id);\n    }\n\n    /**\n     * Set axes to lock for angular velocity.\n     *\n     * @param lock The Axis that needs to be set.\n     *\n     * ```js\n     * body.angularLockAxis = LockAxis.X | LockAxis.Y; // x and y set\n     * body.angularLockAxis = LockAxis.X; // y unset\n     * ```\n     *\n     * @note This has no effect if the component is static.\n     */\n    set angularLockAxis(lock: LockAxis) {\n        this.engine.wasm._wl_physx_component_set_angularLockAxis(this._id, lock);\n    }\n\n    /**\n     * Get the angular lock axes flags.\n     *\n     * To get the state of a specific flag, Bitwise AND with the LockAxis needed:\n     *\n     * ```js\n     * if(body.angularLockAxis & LockAxis.Y) {\n     *     console.log(\"The Y flag was set!\");\n     * }\n     * ```\n     *\n     * @return axes that are currently locked for angular movement.\n     */\n    @nativeProperty()\n    get angularLockAxis(): LockAxis {\n        return this.engine.wasm._wl_physx_component_get_angularLockAxis(this._id);\n    }\n\n    /**\n     * Set mass.\n     *\n     * [PhysX Manual - \"Mass Properties\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#mass-properties)\n     *\n     * @param m New mass.\n     */\n    set mass(m: number) {\n        this.engine.wasm._wl_physx_component_set_mass(this._id, m);\n    }\n\n    /** Mass */\n    @nativeProperty()\n    get mass(): number {\n        return this.engine.wasm._wl_physx_component_get_mass(this._id);\n    }\n\n    /**\n     * Set mass space interia tensor.\n     *\n     * [PhysX Manual - \"Mass Properties\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#mass-properties)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param v New mass space interatia tensor.\n     */\n    set massSpaceInteriaTensor(v: Readonly<NumberArray>) {\n        this.engine.wasm._wl_physx_component_set_massSpaceInertiaTensor(\n            this._id,\n            v[0],\n            v[1],\n            v[2]\n        );\n    }\n\n    /**\n     * Set the rigid body to sleep upon activation.\n     *\n     * When asleep, the rigid body will not be simulated until the next contact.\n     *\n     * @param flag `true` to sleep upon activation.\n     *\n     * @since 1.1.5\n     */\n    set sleepOnActivate(flag: boolean) {\n        this.engine.wasm._wl_physx_component_set_sleepOnActivate(this._id, flag);\n    }\n\n    /**\n     * `true` if the rigid body is set to sleep upon activation, `false` otherwise.\n     *\n     * @since 1.1.5\n     */\n    @nativeProperty()\n    get sleepOnActivate(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_sleepOnActivate(this._id);\n    }\n\n    /**\n     * Apply a force.\n     *\n     * [PhysX Manual - \"Applying Forces and Torques\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#applying-forces-and-torques)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param f Force vector.\n     * @param m Force mode, see {@link ForceMode}, default `Force`.\n     * @param localForce Whether the force vector is in local space, default `false`.\n     * @param p Position to apply force at, default is center of mass.\n     * @param local Whether position is in local space, default `false`.\n     */\n    addForce(\n        f: Readonly<NumberArray>,\n        m: ForceMode = ForceMode.Force,\n        localForce: boolean = false,\n        p?: Readonly<NumberArray>,\n        local: boolean = false\n    ) {\n        const wasm = this.engine.wasm;\n        if (!p) {\n            wasm._wl_physx_component_addForce(this._id, f[0], f[1], f[2], m, localForce);\n            return;\n        }\n        wasm._wl_physx_component_addForceAt(\n            this._id,\n            f[0],\n            f[1],\n            f[2],\n            m,\n            localForce,\n            p[0],\n            p[1],\n            p[2],\n            local\n        );\n    }\n\n    /**\n     * Apply torque.\n     *\n     * [PhysX Manual - \"Applying Forces and Torques\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#applying-forces-and-torques)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param f Force vector.\n     * @param m Force mode, see {@link ForceMode}, default `Force`.\n     */\n    addTorque(f: Readonly<NumberArray>, m: ForceMode = ForceMode.Force) {\n        this.engine.wasm._wl_physx_component_addTorque(this._id, f[0], f[1], f[2], m);\n    }\n\n    /**\n     * Add on collision callback.\n     *\n     * @param callback Function to call when this rigid body (un)collides with any other.\n     *\n     * ```js\n     *  let rigidBody = this.object.getComponent('physx');\n     *  rigidBody.onCollision(function(type, other) {\n     *      // Ignore uncollides\n     *      if(type == CollisionEventType.TouchLost) return;\n     *\n     *      // Take damage on collision with enemies\n     *      if(other.object.name.startsWith(\"enemy-\")) {\n     *          this.applyDamage(10);\n     *      }\n     *  }.bind(this));\n     * ```\n     *\n     * @returns Id of the new callback for use with {@link PhysXComponent#removeCollisionCallback}.\n     */\n    onCollision(callback: CollisionCallback): number {\n        return this.onCollisionWith(this, callback);\n    }\n\n    /**\n     * Add filtered on collision callback.\n     *\n     * @param otherComp Component for which callbacks will\n     *        be triggered. If you pass this component, the method is equivalent to.\n     *        {@link PhysXComponent#onCollision}.\n     * @param callback Function to call when this rigid body\n     *        (un)collides with `otherComp`.\n     * @returns Id of the new callback for use with {@link PhysXComponent#removeCollisionCallback}.\n     */\n    onCollisionWith(otherComp: this, callback: CollisionCallback): number {\n        const callbacks = this.scene._pxCallbacks;\n        if (!callbacks.has(this._id)) {\n            callbacks.set(this._id, []);\n        }\n        callbacks.get(this._id)!.push(callback);\n        return this.engine.wasm._wl_physx_component_addCallback(this._id, otherComp._id);\n    }\n\n    /**\n     * Remove a collision callback added with {@link PhysXComponent#onCollision} or {@link PhysXComponent#onCollisionWith}.\n     *\n     * @param callbackId Callback id as returned by {@link PhysXComponent#onCollision} or {@link PhysXComponent#onCollisionWith}.\n     * @throws When the callback does not belong to the component.\n     * @throws When the callback does not exist.\n     */\n    removeCollisionCallback(callbackId: number): void {\n        const r = this.engine.wasm._wl_physx_component_removeCallback(this._id, callbackId);\n        const callbacks = this.scene._pxCallbacks;\n        /* r is the amount of object to remove from the end of the\n         * callbacks array for this object */\n        if (r) callbacks.get(this._id)!.splice(-r);\n    }\n}\n\n/**\n * Access to the physics scene\n */\nexport class Physics {\n    /**\n     * Hit.\n     * @hidden\n     */\n    _hit: RayHit;\n\n    /**\n     * Wonderland Engine instance\n     * @hidden\n     */\n    protected readonly _engine: WonderlandEngine;\n\n    /**\n     * Ray Hit\n     * @hidden\n     */\n    private _rayHit: number;\n\n    constructor(engine: WonderlandEngine) {\n        this._engine = engine;\n        const wasm = engine.wasm;\n        this._rayHit = wasm._malloc(4 * (3 * 4 + 3 * 4 + 4 + 2) + 4);\n        this._hit = new RayHit(engine.scene, this._rayHit);\n\n        /* Setup the physics callback. */\n        wasm._wl_physx_set_collision_callback(\n            wasm.addFunction((a: number, index: number, type: number, b: number) => {\n                const physxA = this._engine.scene._components.wrapPhysx(a)!;\n                const physxB = this._engine.scene._components.wrapPhysx(b)!;\n                /* We assume that the map returns an array. If not,\n                 * this is an internal engine error. */\n                const callbacks = this._engine.scene._pxCallbacks.get(physxA._id)!;\n                const callback = callbacks[index];\n                callback(type, physxB as PhysXComponent);\n            }, 'viiii')\n        );\n    }\n\n    /**\n     * Cast a ray through the scene and find intersecting physics components.\n     *\n     * The resulting ray hit will contain **up to 4** closest ray hits,\n     * sorted by increasing distance.\n     *\n     * Example:\n     *\n     * ```js\n     * const hit = engine.physics.rayCast(\n     *     [0, 0, 0],\n     *     [0, 0, 1],\n     *     1 << 0 | 1 << 4, // Only check against physics components in groups 0 and 4\n     *     25\n     * );\n     * if (hit.hitCount > 0) {\n     *     const locations = hit.getLocations();\n     *     console.log(`Object hit at: ${locations[0][0]}, ${locations[0][1]}, ${locations[0][2]}`);\n     * }\n     * ```\n     *\n     * @param o Ray origin.\n     * @param d Ray direction.\n     * @param groupMask Bitmask of physics groups to filter by: only objects\n     *        that are part of given groups are considered for the raycast.\n     * @param maxDistance Maximum **inclusive** hit distance. Defaults to `100`.\n     *\n     * @returns The {@link RayHit} instance, cached by this class.\n     *\n     * @note The returned {@link RayHit} object is owned by the {@link Physics}\n     *       instance and will be reused with the next {@link Physics#rayCast} call.\n     */\n    rayCast(\n        o: Readonly<NumberArray>,\n        d: Readonly<NumberArray>,\n        groupMask: number,\n        maxDistance: number = 100.0\n    ): RayHit {\n        const scene = this._engine.scene._index;\n        this._engine.wasm._wl_physx_ray_cast(\n            scene,\n            o[0],\n            o[1],\n            o[2],\n            d[0],\n            d[1],\n            d[2],\n            groupMask,\n            maxDistance,\n            this._rayHit\n        );\n        return this._hit;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n}\n\n/**\n * Mesh index type.\n */\nexport enum MeshIndexType {\n    /** Single byte mesh index, range 0-255 */\n    UnsignedByte = 1,\n\n    /** Two byte mesh index, range 0-65535 */\n    UnsignedShort = 2,\n\n    /** Four byte mesh index, range 0-4294967295 */\n    UnsignedInt = 4,\n}\n\n/**\n * Mesh skinning type.\n */\nexport enum MeshSkinningType {\n    /** Not skinned */\n    None = 0,\n\n    /** Skinned, 4 joints/weight per vertex */\n    FourJoints = 1,\n\n    /** Skinned, 8 joints/weight per vertex */\n    EightJoints = 2,\n}\n\n/**\n * Mesh constructor parameters object.\n *\n * Usage:\n *\n * ```js\n * const mesh = Mesh({vertexCount: 3, indexData: [0, 1, 2]});\n * ```\n */\nexport interface MeshParameters {\n    /** Number of vertices to allocate. */\n    vertexCount: number;\n    /** Index data values. */\n    indexData: Readonly<NumberArray>;\n    /** Index type, `null` if not indexed. */\n    indexType: MeshIndexType;\n    /** Whether the mesh should be skinned. Defaults to not skinned. */\n    skinningType: MeshSkinningType;\n}\n\n/**\n * Wrapper around a native mesh data.\n *\n * For more information about how to create meshes, have a look at the\n * {@link MeshManager} class.\n *\n * #### Update\n *\n * To modify a mesh, you get access to a {@link MeshAttributeAccessor} that\n * allows you to modify the content of the buffers:\n *\n * Usage:\n *\n * ```js\n * const mesh = engine.es.create({vertexCount: 3, indexData: [0, 1, 2]});\n * const positions = mesh.attribute(MeshAttribute.Position);\n * ...\n * ```\n *\n * @note Meshes are **per-engine**, they can thus be shared by multiple scenes.\n */\nexport class Mesh extends Resource {\n    /**\n     * @deprecated Use {@link MeshManager.create} instead, accessible via {@link WonderlandEngine.meshes}:\n     *\n     * ```js\n     * const mesh = engine.meshes.create({vertexCount: 3, indexData: [0, 1, 2]});\n     * ...\n     * mesh.update();\n     * ```\n     */\n    constructor(engine: WonderlandEngine, params: Partial<MeshParameters> | number) {\n        if (!isNumber(params)) {\n            const mesh = engine.meshes.create(params);\n            /* `super()` must be called as stated in the specification */\n            super(engine, mesh._index);\n            return mesh;\n        }\n        super(engine, params);\n    }\n\n    /** Number of vertices in this mesh. */\n    get vertexCount(): number {\n        return this.engine.wasm._wl_mesh_get_vertexCount(this._id);\n    }\n\n    /** Index data (read-only) or `null` if the mesh is not indexed. */\n    get indexData(): Uint8Array | Uint16Array | Uint32Array | null {\n        const wasm = this.engine.wasm;\n        const tempMem = wasm._tempMem;\n        const ptr = wasm._wl_mesh_get_indexData(this._id, tempMem, tempMem + 4);\n        if (ptr === null) return null;\n\n        const indexCount = wasm.HEAPU32[tempMem / 4];\n        const indexSize = wasm.HEAPU32[tempMem / 4 + 1];\n        switch (indexSize) {\n            case MeshIndexType.UnsignedByte:\n                return new Uint8Array(wasm.HEAPU8.buffer, ptr, indexCount);\n            case MeshIndexType.UnsignedShort:\n                return new Uint16Array(wasm.HEAPU16.buffer, ptr, indexCount);\n            case MeshIndexType.UnsignedInt:\n                return new Uint32Array(wasm.HEAPU32.buffer, ptr, indexCount);\n        }\n        return null;\n    }\n\n    /**\n     * Apply changes to {@link attribute | vertex attributes}.\n     *\n     * Uploads the updated vertex attributes to the GPU and updates the bounding\n     * sphere to match the new vertex positions.\n     *\n     * Since this is an expensive operation, call it only once you have performed\n     * all modifications on a mesh and avoid calling if you did not perform any\n     * modifications at all.\n     */\n    update() {\n        this.engine.wasm._wl_mesh_update(this._id);\n    }\n\n    /** @overload */\n    getBoundingSphere(): Float32Array;\n    /** @overload */\n    getBoundingSphere<T extends NumberArray>(out: T): T;\n    /**\n     * Mesh bounding sphere.\n     *\n     * @param out Preallocated array to write into, to avoid garbage,\n     *     otherwise will allocate a new Float32Array.\n     *\n     * ```js\n     *  const sphere = new Float32Array(4);\n     *  for(...) {\n     *      mesh.getBoundingSphere(sphere);\n     *      ...\n     *  }\n     * ```\n     *\n     * If the position data is changed, call {@link Mesh#update} to update the\n     * bounding sphere.\n     *\n     * @returns Bounding sphere, 0-2 sphere origin, 3 radius.\n     */\n    getBoundingSphere<T extends NumberArray>(out: T | Float32Array): T | Float32Array;\n    getBoundingSphere<T extends NumberArray>(\n        out: T | Float32Array = new Float32Array(4)\n    ): T | Float32Array {\n        const wasm = this.engine.wasm;\n        this.engine.wasm._wl_mesh_get_boundingSphere(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n        return out as T;\n    }\n\n    /** @overload */\n    attribute(\n        attr: MeshAttribute.Position\n    ): MeshAttributeAccessor<Float32ArrayConstructor> | null;\n    /** @overload */\n    attribute(\n        attr: MeshAttribute.Tangent\n    ): MeshAttributeAccessor<Float32ArrayConstructor> | null;\n    /** @overload */\n    attribute(\n        attr: MeshAttribute.Normal\n    ): MeshAttributeAccessor<Float32ArrayConstructor> | null;\n    /** @overload */\n    attribute(\n        attr: MeshAttribute.TextureCoordinate\n    ): MeshAttributeAccessor<Float32ArrayConstructor> | null;\n    /** @overload */\n    attribute(\n        attr: MeshAttribute.Color\n    ): MeshAttributeAccessor<Float32ArrayConstructor> | null;\n    /** @overload */\n    attribute(\n        attr: MeshAttribute.JointId\n    ): MeshAttributeAccessor<Uint16ArrayConstructor> | null;\n    /** @overload */\n    attribute(\n        attr: MeshAttribute.JointWeight\n    ): MeshAttributeAccessor<Float32ArrayConstructor> | null;\n    /** @overload */\n    attribute(\n        attr: MeshAttribute.SecondaryTextureCoordinate\n    ): MeshAttributeAccessor<Float32ArrayConstructor> | null;\n    /**\n     * Get an attribute accessor to retrieve or modify data of give attribute.\n     *\n     * @param attr Attribute to get access to\n     * @returns Attribute to get access to or `null`, if mesh does not have this attribute.\n     *\n     * Call {@link update} for changes to vertex attributes to take effect.\n     *\n     * If there are no shaders in the scene that use `TextureCoordinate` for example,\n     * no meshes will have the `TextureCoordinate` attribute.\n     *\n     * For flexible reusable components, take this into account that only `Position`\n     * is guaranteed to be present at all time.\n     */\n    attribute(attr: MeshAttribute): MeshAttributeAccessor | null;\n    attribute(attr: MeshAttribute): MeshAttributeAccessor | null {\n        if (typeof attr != 'number')\n            throw new TypeError('Expected number, but got ' + typeof attr);\n\n        const wasm = this.engine.wasm;\n        const tempMemUint32 = wasm._tempMemUint32;\n        wasm._wl_mesh_get_attribute(this._id, attr, wasm._tempMem);\n        if (tempMemUint32[0] == 255) return null;\n\n        const arraySize = tempMemUint32[5];\n        return new MeshAttributeAccessor(this.engine, {\n            attribute: tempMemUint32[0],\n            offset: tempMemUint32[1],\n            stride: tempMemUint32[2],\n            formatSize: tempMemUint32[3],\n            componentCount: tempMemUint32[4],\n            /* The WASM API returns `0` for a scalar value. We clamp it to 1 as we strictly use it as a multiplier for get/set operations */\n            arraySize: arraySize ? arraySize : 1,\n            length: this.vertexCount,\n            bufferType: (attr !== MeshAttribute.JointId\n                ? Float32Array\n                : Uint16Array) as TypedArrayCtor,\n        });\n    }\n\n    /**\n     * Destroy and free the meshes memory.\n     *\n     * It is best practice to set the mesh variable to `null` after calling\n     * destroy to prevent accidental use:\n     *\n     * ```js\n     *   mesh.destroy();\n     *   mesh = null;\n     * ```\n     *\n     * Accessing the mesh after destruction behaves like accessing an empty\n     * mesh.\n     *\n     * @since 0.9.0\n     */\n    destroy(): void {\n        this.engine.wasm._wl_mesh_destroy(this._id);\n        this.engine.meshes._destroy(this);\n    }\n\n    toString() {\n        if (this.isDestroyed) {\n            return 'Mesh(destroyed)';\n        }\n        return `Mesh(${this._index})`;\n    }\n}\n\n/**\n * Options to create a new {@link MeshAttributeAccessor} instance.\n */\ninterface MeshAttributeAccessorOptions<T extends TypedArrayCtor> {\n    attribute: number;\n    offset: number;\n    stride: number;\n    formatSize: number;\n    componentCount: number;\n    arraySize: number;\n    length: number;\n    bufferType: T;\n}\n\n/**\n * An iterator over a mesh vertex attribute.\n *\n * Usage:\n *\n * ```js\n * const mesh = this.object.getComponent('mesh').mesh;\n * const positions = mesh.attribute(MeshAttribute.Position);\n *\n * // Equivalent to `new Float32Array(3)`.\n * const temp = positions.createArray();\n *\n * for(let i = 0; i < positions.length; ++i) {\n *     // `pos` will reference `temp` and thereby not allocate additional\n *     // memory, which would cause a perf spike when collected.\n *     const pos = positions.get(i, temp);\n *     // Scale position by 2 on x-axis only.\n *     pos[0] *= 2.0;\n *     positions.set(i, pos);\n * }\n * // We're done modifying, tell the engine to move vertex data to the GPU.\n * mesh.update();\n * ```\n */\nexport class MeshAttributeAccessor<T extends TypedArrayCtor = TypedArrayCtor> {\n    /** Max number of elements. */\n    readonly length: number = 0;\n\n    /** Wonderland Engine instance. @hidden */\n    protected readonly _engine: WonderlandEngine;\n\n    /** Attribute index. @hidden */\n    private _attribute: number = -1;\n    /** Attribute offset. @hidden */\n    private _offset: number = 0;\n    /** Attribute stride. @hidden */\n    private _stride: number = 0;\n    /** Format size native enum. @hidden */\n    private _formatSize: number = 0;\n    /** Number of components per vertex. @hidden */\n    private _componentCount: number = 0;\n    /** Number of values per vertex. @hidden */\n    private _arraySize: number = 1;\n\n    /**\n     * Class to instantiate an ArrayBuffer to get/set values.\n     */\n    private _bufferType: T;\n    /**\n     * Function to allocate temporary WASM memory. It is cached in the accessor to avoid\n     * conditionals during get/set.\n     */\n    private _tempBufferGetter: (bytes: number) => TypedArray<T>;\n\n    /**\n     * Create a new instance.\n     *\n     * @note Please use {@link Mesh.attribute} to create a new instance.\n     *\n     * @param options Contains information about how to read the data.\n     * @note Do not use this constructor. Instead, please use the {@link Mesh.attribute} method.\n     *\n     * @hidden\n     */\n    constructor(engine: WonderlandEngine, options: MeshAttributeAccessorOptions<T>) {\n        this._engine = engine;\n\n        this._attribute = options.attribute;\n        this._offset = options.offset;\n        this._stride = options.stride;\n        this._formatSize = options.formatSize;\n        this._componentCount = options.componentCount;\n        this._arraySize = options.arraySize;\n        this._bufferType = options.bufferType;\n        this.length = options.length;\n\n        const wasm = this._engine.wasm;\n        this._tempBufferGetter = (\n            this._bufferType === Float32Array\n                ? wasm.getTempBufferF32.bind(wasm)\n                : wasm.getTempBufferU16.bind(wasm)\n        ) as () => TypedArray<T>;\n    }\n\n    /**\n     * Create a new TypedArray to hold this attribute's values.\n     *\n     * This method is useful to create a view to hold the data to\n     * pass to {@link get} and {@link set}\n     *\n     * Example:\n     *\n     * ```js\n     * const vertexCount = 4;\n     * const positionAttribute = mesh.attribute(MeshAttribute.Position);\n     *\n     * // A position has 3 floats per vertex. Thus, positions has length 3 * 4.\n     * const positions = positionAttribute.createArray(vertexCount);\n     * ```\n     *\n     * @param count The number of **vertices** expected.\n     * @returns A TypedArray with the appropriate format to access the data\n     */\n    createArray(count = 1): TypedArray<T> {\n        count = count > this.length ? this.length : count;\n        return new this._bufferType(\n            count * this._componentCount * this._arraySize\n        ) as TypedArray<T>;\n    }\n\n    /** @overload */\n    get(index: number): TypedArray<T>;\n    /**\n     * Get attribute element.\n     *\n     * @param index Index\n     * @param out Preallocated array to write into,\n     *      to avoid garbage, otherwise will allocate a new TypedArray.\n     *\n     * `out.length` needs to be a multiple of the attributes component count, see\n     * {@link MeshAttribute}. If `out.length` is more than one multiple, it will be\n     * filled with the next n attribute elements, which can reduce overhead\n     * of this call.\n     *\n     * @returns The `out` parameter\n     */\n    get<T extends NumberArray>(index: number, out: T): T;\n    get(index: number, out: NumberArray = this.createArray()): NumberArray {\n        if (out.length % this._componentCount !== 0) {\n            throw new Error(\n                `out.length, ${out.length} is not a multiple of the attribute vector components, ${this._componentCount}`\n            );\n        }\n\n        /* Maximum number of values supported by the accessor, to avoid an out-of-bound access */\n        const componentCount = this._componentCount * this._arraySize;\n        const len = Math.min(out.length, componentCount * this.length);\n\n        const dest = this._tempBufferGetter(len);\n        const elementSize = this._bufferType.BYTES_PER_ELEMENT;\n        const destSize = elementSize * len;\n        const srcFormatSize = this._formatSize * this._arraySize;\n        const destFormatSize = this._componentCount * elementSize * this._arraySize;\n\n        this.engine.wasm._wl_mesh_get_attribute_values(\n            this._attribute,\n            srcFormatSize,\n            this._offset + index * this._stride,\n            this._stride,\n            destFormatSize,\n            dest.byteOffset,\n            destSize\n        );\n\n        for (let i = 0; i < len; ++i) out[i] = dest[i];\n        return out;\n    }\n\n    /**\n     * Set attribute element.\n     *\n     * @param i Index\n     * @param v Value to set the element to\n     *\n     * `v.length` needs to be a multiple of the attributes component count, see\n     * {@link MeshAttribute}. If `v.length` is more than one multiple, it will be\n     * filled with the next n attribute elements, which can reduce overhead\n     * of this call.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    set(i: number, v: Readonly<NumberArray>) {\n        if (v.length % this._componentCount !== 0) {\n            throw new Error(\n                `out.length, ${v.length} is not a multiple of the attribute vector components, ${this._componentCount}`\n            );\n        }\n\n        /* Maximum number of values supported by the accessor, to avoid an out-of-bound access */\n        const componentCount = this._componentCount * this._arraySize;\n        const len = Math.min(v.length, componentCount * this.length);\n\n        const elementSize = this._bufferType.BYTES_PER_ELEMENT;\n        const srcSize = elementSize * len;\n        const srcFormatSize = componentCount * elementSize;\n        const destFormatSize = this._formatSize * this._arraySize;\n\n        const wasm = this.engine.wasm;\n\n        /* Unless we are already working with data from WASM heap, we\n         * need to copy into temporary memory. */\n        if ((v as Float32Array).buffer != wasm.HEAPU8.buffer) {\n            const dest = this._tempBufferGetter(len);\n            dest.set(v);\n            v = dest;\n        }\n\n        wasm._wl_mesh_set_attribute_values(\n            this._attribute,\n            srcFormatSize,\n            (v as Float32Array).byteOffset,\n            srcSize,\n            destFormatSize,\n            this._offset + i * this._stride,\n            this._stride\n        );\n\n        return this;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n}\n\n/**\n * Wrapper around a native font resource.\n *\n * @note Fonts are **per-engine**, they can thus be shared by multiple scenes.\n *\n * @since 1.2.0\n */\nexport class Font extends Resource {\n    /** Em height in object space. Equivalent to line height. */\n    get emHeight(): number {\n        return this.engine.wasm._wl_font_get_emHeight(this._id);\n    }\n\n    /**\n     * Cap height in object space. This is the typical height of capital\n     * letters. Can be 0 if not defined by the font.\n     */\n    get capHeight(): number {\n        return this.engine.wasm._wl_font_get_capHeight(this._id);\n    }\n\n    /**\n     * X height in object space. This is the typical height of lowercase\n     * letters. Can be 0 if not defined by the font.\n     */\n    get xHeight(): number {\n        return this.engine.wasm._wl_font_get_xHeight(this._id);\n    }\n\n    /**\n     * Outline size. This is the factor by which characters are expanded to\n     * create the outline effect. Returns 0 if the font was compiled without\n     * an outline.\n     *\n     * @since 1.2.1\n     */\n    get outlineSize(): number {\n        return this.engine.wasm._wl_font_get_outlineSize(this._id);\n    }\n}\n\n/**\n * Wrapper around a native particle effect resource.\n *\n * @note Particle effects are **per-engine**, they can thus be shared by\n * multiple scenes.\n *\n * @since 1.4.0\n */\nexport class ParticleEffect extends Resource {\n    /**\n     * Create a copy of the underlying native particle effect.\n     *\n     * @returns Particle effect clone.\n     */\n    clone(): ParticleEffect | null {\n        const index = this.engine.wasm._wl_particleEffect_clone(this._id);\n        return this.engine.particleEffects.wrap(index);\n    }\n}\n\n/** Temporary canvas */\nlet temp2d: {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n} | null = null;\n\n/**\n * Wrapper around a native texture data.\n *\n * For more information about how to create meshes, have a look at the\n * {@link TextureManager} class.\n *\n * @note Textures are **per-engine**, they can thus be shared by multiple scenes.\n */\nexport class Texture extends Resource {\n    /**\n     * @deprecated Use {@link TextureManager.create} instead, accessible via\n     * {@link WonderlandEngine.textures}:\n     *\n     * ```js\n     * const image = new Image();\n     * image.onload = () => {\n     *     const texture = engine.textures.create(image);\n     * };\n     * ```\n     */\n    constructor(engine: WonderlandEngine, param: ImageLike | number) {\n        if (isImageLike(param)) {\n            const texture = engine.textures.create(param);\n            /* `super()` must be called as stated in the specification */\n            super(engine, texture._index);\n            return texture;\n        }\n        super(engine, param);\n    }\n\n    /** Whether this texture is valid. */\n    get valid(): boolean {\n        return !this.isDestroyed && this.width !== 0 && this.height !== 0;\n    }\n\n    /**\n     * Index in this manager.\n     *\n     * @deprecated Use {@link Texture.index} instead.\n     */\n    get id(): number {\n        return this.index;\n    }\n\n    /** Update the texture to match the HTML element (e.g. reflect the current frame of a video). */\n    update() {\n        const image = this._imageIndex;\n        if (!this.valid || !image) return;\n\n        this.engine.wasm._wl_image_markDirty(image);\n    }\n\n    /**\n     * Width of the texture.\n     *\n     * @note If the texture has an {@link htmlElement}, this is the width used at creation.\n     *     If the actual element's width changed, it must be read from the element itself.\n     */\n    get width(): number {\n        const element = this.htmlElement;\n        if (element) {\n            /** @todo(1.5.0): Remove, the size should be entirely read from the wasm. */\n            return (element as HTMLVideoElement).videoWidth ?? element.width;\n        }\n        const wasm = this.engine.wasm;\n        wasm._wl_image_size(this._imageIndex, wasm._tempMem);\n        return wasm._tempMemUint32[0];\n    }\n\n    /**\n     * Height of the texture.\n     *\n     * @note If the texture has an {@link htmlElement}, this is the height used at creation.\n     *     If the actual element's height changed, it must be read from the element itself.\n     */\n    get height(): number {\n        const element = this.htmlElement;\n        if (element) {\n            /** @todo(1.5.0): Remove, the size should be entirely read from the wasm. */\n            return (element as HTMLVideoElement).videoHeight ?? element.height;\n        }\n        const wasm = this.engine.wasm;\n        wasm._wl_image_size(this._imageIndex, wasm._tempMem);\n        return wasm._tempMemUint32[1];\n    }\n\n    /**\n     * Returns the html element associated to this texture.\n     *\n     * @note This accessor will return `null` if the image is compressed.\n     */\n    get htmlElement(): ImageLike | null {\n        const image = this._imageIndex;\n        if (!image) return null;\n\n        const wasm = this.engine.wasm;\n        const jsImageIndex = wasm._wl_image_get_jsImage_index(image);\n\n        /* Since the first element is `null`, no need to check for `jsImageIndex` */\n        return wasm._images[jsImageIndex];\n    }\n\n    /**\n     * Upload content to the texture to the GPU.\n     *\n     * Usage:\n     *\n     * ```js\n     * // Size 128x64\n     * const image = new Image();\n     * texture.updateSubImage(28, 4, 100, 60, 0, 0, image);\n     * ```\n     *\n     * @note The source is cropped if the destination offset and source dimensions\n     * are out-of-bounds regarding the texture size.\n     *\n     * @note Uploading a texture without a source offset is significantly faster.\n     *\n     * #### ImageBitmap\n     *\n     * If you need to upload a subregion, it's recommended to use:\n     *\n     * ```js\n     * createImageBitmap(image, sourceX, sourceY, sourceWidth, sourceHeight).then(bitmap => {\n     *     const destinationX = sourceX;\n     *     const destinationY = sourceY;\n     *     texture.updateSubImage(0, 0, sourceWidth, sourceHeight, destinationX, destinationY, bitmap);\n     * });\n     * ```\n     *\n     * You could use this method with a `src` offset, but the synchronous implementation\n     * uses a temporary 2d canvas, negatively affecting performance for large content.\n     *\n     * @param srcX Horizontal pixel offset, in the source image.\n     * @param srcY Vertical pixel offset, in the source image.\n     * @param srcWidth Width of the sub image, in the source image.\n     * @param srcHeight Height of the sub image, in the source image\n     * @param dstX Horizontal pixel offset, in the destination image.\n     *     Defaults to `srcX` for backward compatibility with older API versions.\n     * @param dstY Vertical pixel offset, in the destination image.\n     *     Defaults to `srcY` for backward compatibility with older API versions.\n     * @param content `Image`, `HTMLCanvasElement`, `HTMLVideoElement`, or `ImageBitmap` to upload.\n     * @returns `true` if the update went through, `false` otherwise.\n     */\n    updateSubImage(\n        srcX: number,\n        srcY: number,\n        srcWidth: number,\n        srcHeight: number,\n        dstX: number = srcX,\n        dstY: number = srcY,\n        content?: ImageLike\n    ): boolean {\n        if (this.isDestroyed) return false;\n\n        const image = this._imageIndex;\n        if (!image) return false;\n\n        let img = content ?? this.htmlElement;\n        if (!img) return false;\n\n        const isImageBitmap = img instanceof ImageBitmap;\n        /* ImageBitmap can't be flipped upon upload to the GPU.\n         * Thus, we need to skip flipping the temporary canvas to keep the same behavior\n         * when uploading an ImageBitmap and uploading a blitted ImageBitmap. */\n        const flipY = !isImageBitmap;\n\n        if (srcX || srcY) {\n            /* Lazy initialize temp canvas */\n            if (!temp2d) {\n                const canvas = document.createElement('canvas');\n                const ctx = canvas.getContext('2d');\n                if (!ctx) {\n                    throw new Error(\n                        'Texture.updateSubImage(): Failed to obtain CanvasRenderingContext2D.'\n                    );\n                }\n                temp2d = {canvas, ctx};\n            }\n            temp2d.canvas.width = srcWidth;\n            temp2d.canvas.height = srcHeight;\n\n            temp2d.ctx.drawImage(\n                img,\n                srcX,\n                isImageBitmap ? img.height - srcY - srcHeight : srcY,\n                srcWidth,\n                srcHeight,\n                0,\n                0,\n                srcWidth,\n                srcHeight\n            );\n            img = temp2d.canvas;\n        }\n\n        const wasm = this.engine.wasm;\n        wasm._images[0] = img;\n\n        /* Clamp the width/height to avoid a GL upload error */\n        const width = srcWidth - Math.max(srcWidth + dstX - this.width, 0);\n        const height = srcHeight - Math.max(srcHeight + dstY - this.height, 0);\n        const dstReversedY = this.height - dstY - height;\n\n        const ret = wasm._wl_renderer_updateImage(\n            image,\n            0,\n            width,\n            height,\n            dstX,\n            dstReversedY,\n            flipY\n        );\n        wasm._images[0] = null;\n\n        return !!ret;\n    }\n\n    /**\n     * Destroy and free the texture's texture altas space and memory.\n     *\n     * It is best practice to set the texture variable to `null` after calling\n     * destroy to prevent accidental use of the invalid texture:\n     *\n     * ```js\n     *   texture.destroy();\n     *   texture = null;\n     * ```\n     *\n     * @since 0.9.0\n     */\n    destroy(): void {\n        const wasm = this.engine.wasm;\n\n        const img = wasm._images[this._imageIndex];\n        if (img instanceof ImageBitmap) img.close();\n\n        wasm._wl_texture_destroy(this._id);\n        this.engine.textures._destroy(this);\n    }\n\n    toString() {\n        if (this.isDestroyed) {\n            return 'Texture(destroyed)';\n        }\n        return `Texture(${this._index})`;\n    }\n\n    private get _imageIndex() {\n        return this.engine.wasm._wl_texture_get_image_index(this._id);\n    }\n}\n\n/**\n * Wrapper around a native animation.\n */\nexport class Animation extends SceneResource {\n    /**\n     * @param index Index in the manager\n     */\n    constructor(host: WonderlandEngine | Prefab = WL, index: number) {\n        const scene = host instanceof Prefab ? host : host.scene;\n        super(scene as Prefab, index);\n    }\n\n    /** Duration of this animation. */\n    get duration(): number {\n        return this.engine.wasm._wl_animation_get_duration(this._id);\n    }\n\n    /** Number of tracks in this animation. */\n    get trackCount(): number {\n        return this.engine.wasm._wl_animation_get_trackCount(this._id);\n    }\n\n    /**\n     * Clone this animation retargeted to a new set of objects.\n     *\n     * The clone shares most of the data with the original and is therefore\n     * light-weight.\n     *\n     * **Experimental:** This API might change in upcoming versions.\n     *\n     * If retargeting to {@link Skin}, the join names will be used to determine a mapping\n     * from the previous skin to the new skin. The source skin will be retrieved from\n     * the first track in the animation that targets a joint.\n     *\n     * @param newTargets New targets per track. Expected to have\n     *      {@link Animation#trackCount} elements or to be a {@link Skin}.\n     * @returns The retargeted clone of this animation.\n     */\n    retarget(newTargets: Object3D[] | Skin): Animation {\n        const wasm = this.engine.wasm;\n        if (newTargets instanceof Skin) {\n            const index = wasm._wl_animation_retargetToSkin(this._id, newTargets._id);\n            return this._scene.animations.wrap(index)!;\n        }\n\n        if (newTargets.length != this.trackCount) {\n            throw Error(\n                'Expected ' +\n                    this.trackCount.toString() +\n                    ' targets, but got ' +\n                    newTargets.length.toString()\n            );\n        }\n        const ptr = wasm._malloc(2 * newTargets.length);\n        for (let i = 0; i < newTargets.length; ++i) {\n            const object3d = newTargets[i];\n            this.scene.assertOrigin(object3d);\n            /* Use local id here and **not** packed id, because the WASM\n             * takes ownership and reinterprets the ids. */\n            wasm.HEAPU16[(ptr >>> 1) + i] = newTargets[i].objectId;\n        }\n        const index = wasm._wl_animation_retarget(this._id, ptr);\n        wasm._free(ptr);\n\n        return this._scene.animations.wrap(index)!;\n    }\n\n    toString() {\n        if (this.isDestroyed) {\n            return 'Animation(destroyed)';\n        }\n        return `Animation(${this._index})`;\n    }\n}\n\n/**\n * Wrapper around a native animation graph.\n *\n * @since 1.4.6\n */\nexport class AnimationGraph extends SceneResource {\n    toString() {\n        if (this.isDestroyed) {\n            return 'AnimationGraph(destroyed)';\n        }\n        return `AnimationGraph(${this._index})`;\n    }\n}\n\n/**\n * Scene graph object.\n *\n * Node in the scene graph or \"entity\". Consists of transformation and a reference\n * to its parent object. Usually holds components and is accessible by components\n * through {@link Component#object}.\n *\n * Objects are stored in a data oriented manner inside WebAssembly memory. This class\n * is a JavaScript API wrapper around this memory for more convenient use in\n * components.\n *\n * Objects can be created and added to a scene through {@link Prefab.addObject}:\n *\n * ```js\n * const parent = scene.addObject();\n * parent.name = 'parent`';\n * const child = scene.addObject(parent);\n * child.name = 'child`';\n * ```\n */\nexport class Object3D {\n    /**\n     * Packed object id, containing scene index and local id.\n     *\n     * @hidden\n     */\n    readonly _id: number = -1;\n    /** Object id, relative to the scene manager. @hidden */\n    readonly _localId: number = -1;\n\n    /** Scene instance. @hidden */\n    protected readonly _scene: Prefab;\n    /** Wonderland Engine instance. @hidden */\n    protected readonly _engine: WonderlandEngine;\n\n    /**\n     * @param o Object id to wrap.\n     *\n     * @deprecated Objects must be obtained via {@link Scene.addObject} or {@link Scene.wrap}:\n     *\n     * ```js\n     * // Create a new object.\n     * const obj = scene.addObject();\n     *\n     * // Wrap an object using its id. The id must be valid.\n     * const obj = scene.wrap(0);\n     * ```\n     *\n     * @hidden\n     */\n    constructor(scene: WonderlandEngine | Prefab, id: number) {\n        scene = scene instanceof Prefab ? scene : scene.scene;\n        this._localId = id;\n        this._id = (scene._index << 22) | id;\n        this._scene = scene;\n        /** @todo: Remove and only keep getter. */\n        this._engine = scene.engine;\n    }\n\n    /**\n     * Name of the object.\n     *\n     * Useful for identifying objects during debugging.\n     */\n    get name(): string {\n        const wasm = this._engine.wasm;\n        return wasm.UTF8ToString(wasm._wl_object_name(this._id));\n    }\n\n    /**\n     * Set the object's name.\n     *\n     * @param newName The new name to set.\n     */\n    set name(newName: string) {\n        const wasm = this._engine.wasm;\n        wasm._wl_object_set_name(this._id, wasm.tempUTF8(newName));\n    }\n\n    /**\n     * Parent of this object or `null` if parented to root.\n     */\n    get parent(): Object3D | null {\n        const p = this._engine.wasm._wl_object_parent(this._id);\n        return p === 0 ? null : this._scene.wrap(p);\n    }\n\n    /**\n     * Equivalent to {@link Object3D.getChildren}.\n     *\n     * @note Prefer to use {@link Object3D.getChildren} for performance.\n     */\n    get children(): Object3D[] {\n        return this.getChildren();\n    }\n\n    /** The number of children of this object. */\n    get childrenCount(): number {\n        return this._engine.wasm._wl_object_get_children_count(this._id);\n    }\n\n    /**\n     * Reparent object to given object.\n     *\n     * @note Reparenting is not trivial and might have a noticeable performance impact.\n     *\n     * @param newParent New parent or `null` to parent to root\n     */\n    set parent(newParent: Object3D | undefined | null) {\n        if (this.markedDestroyed) {\n            const strThis = this.toString();\n            const strParent = newParent ? newParent : 'root';\n            throw new Error(\n                `Failed to attach ${strThis} to ${strParent}. ${strThis} is marked as destroyed.`\n            );\n        } else if (newParent?.markedDestroyed) {\n            const strParent = newParent.toString();\n            throw new Error(\n                `Failed to attach ${this} to ${strParent}. ${strParent} is marked as destroyed.`\n            );\n        }\n        this.scene.assertOrigin(newParent);\n        this._engine.wasm._wl_object_set_parent(\n            this._id,\n            newParent == null ? 0 : newParent._id\n        );\n    }\n\n    /** Local object id in the scene manager. */\n    get objectId() {\n        return this._localId;\n    }\n\n    /** Scene instance. */\n    get scene() {\n        return this._scene;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n\n    /**\n     * Add an object as a child of this instance.\n     *\n     * @returns A newly created object.\n     */\n    addChild(): Object3D {\n        const objectId = this.engine.wasm._wl_scene_add_object(this.scene._index, this._id);\n        const obj = this.scene.wrap(objectId);\n        return obj;\n    }\n\n    /**\n     * Clone this hierarchy into a new one.\n     *\n     * Cloning copies the hierarchy structure, object names,\n     * as well as components.\n     *\n     * JavaScript components are cloned using {@link Component.copy}. You can\n     * override this method in your components.\n     *\n     * @param parent The parent for the cloned hierarchy or `null` to clone\n     *     into the scene root. Defaults to `null`.\n     *\n     * @returns The clone of this object.\n     */\n    clone(parent: Object3D | null = null): Object3D {\n        this.scene.assertOrigin(parent);\n        const engine = this._engine;\n        const id = engine.wasm._wl_object_clone(this._id, parent ? parent._id : 0);\n        return this._scene.wrap(id);\n    }\n\n    /**\n     * Children of this object.\n     *\n     * @note Child order is **undefined**. No assumptions should be made\n     * about the index of a specific object.\n     *\n     * If you need to access a specific child of this object, you can\n     * use {@link Object3D.findByName}.\n     *\n     * When the object exists in the scene at editor time, prefer passing it as\n     * a component property.\n     *\n     * @note When providing an output array, only `this.childrenCount` elements will be written.\n     * The rest of the array will not be modified by this method.\n     *\n     * @param out Destination array, expected to have at least `this.childrenCount` elements.\n     * @returns The `out` parameter.\n     */\n    getChildren(out: Object3D[] = new Array(this.childrenCount)): Object3D[] {\n        const childrenCount = this.childrenCount;\n        if (childrenCount === 0) return out;\n\n        const wasm = this._engine.wasm;\n        wasm.requireTempMem(childrenCount * 2);\n\n        this._engine.wasm._wl_object_get_children(\n            this._id,\n            wasm._tempMem,\n            wasm._tempMemSize >> 1\n        );\n\n        for (let i = 0; i < childrenCount; ++i) {\n            out[i] = this._scene.wrap(wasm._tempMemUint16[i]);\n        }\n        return out;\n    }\n\n    /**\n     * Reset local transformation (translation, rotation and scaling) to identity.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetTransform(): this {\n        this._engine.wasm._wl_object_reset_translation_rotation(this._id);\n        this._engine.wasm._wl_object_reset_scaling(this._id);\n        return this;\n    }\n\n    /**\n     * Reset local position and rotation to identity.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetPositionRotation(): this {\n        this._engine.wasm._wl_object_reset_translation_rotation(this._id);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.resetPositionRotation} instead. */\n    resetTranslationRotation(): this {\n        return this.resetPositionRotation();\n    }\n\n    /**\n     * Reset local rotation, keep translation.\n     *\n     * @note To reset both rotation and translation, prefer\n     *       {@link resetTranslationRotation}.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetRotation(): this {\n        this._engine.wasm._wl_object_reset_rotation(this._id);\n        return this;\n    }\n\n    /**\n     * Reset local translation, keep rotation.\n     *\n     * @note To reset both rotation and translation, prefer\n     *       {@link resetTranslationRotation}.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetPosition(): this {\n        this._engine.wasm._wl_object_reset_translation(this._id);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.resetPosition} instead. */\n    resetTranslation(): this {\n        return this.resetPosition();\n    }\n\n    /**\n     * Reset local scaling to identity (``[1.0, 1.0, 1.0]``).\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetScaling(): this {\n        this._engine.wasm._wl_object_reset_scaling(this._id);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.translateLocal} instead. */\n    translate(v: Readonly<NumberArray>): this {\n        return this.translateLocal(v);\n    }\n\n    /**\n     * Translate object by a vector in the parent's space.\n     *\n     * @param v Vector to translate by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    translateLocal(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_translate(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /**\n     * Translate object by a vector in object space.\n     *\n     * @param v Vector to translate by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    translateObject(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_translate_obj(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /**\n     * Translate object by a vector in world space.\n     *\n     * @param v Vector to translate by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    translateWorld(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_translate_world(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.rotateAxisAngleDegLocal} instead. */\n    rotateAxisAngleDeg(a: Readonly<NumberArray>, d: number): this {\n        this.rotateAxisAngleDegLocal(a, d);\n        return this;\n    }\n\n    /**\n     * Rotate around given axis by given angle (degrees) in local space.\n     *\n     * @param a Vector representing the rotation axis.\n     * @param d Angle in degrees.\n     *\n     * @note If the object is translated the rotation will be around\n     *     the parent. To rotate around the object origin, use\n     *     {@link rotateAxisAngleDegObject}\n     *\n     * @see {@link rotateAxisAngleRad}\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateAxisAngleDegLocal(a: Readonly<NumberArray>, d: number): this {\n        this._engine.wasm._wl_object_rotate_axis_angle(this._id, a[0], a[1], a[2], d);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.rotateAxisAngleRadLocal} instead. */\n    rotateAxisAngleRad(a: Readonly<NumberArray>, d: number): this {\n        return this.rotateAxisAngleRadLocal(a, d);\n    }\n\n    /**\n     * Rotate around given axis by given angle (radians) in local space.\n     *\n     * @param a Vector representing the rotation axis.\n     * @param d Angle in radians.\n     *\n     * @note If the object is translated the rotation will be around\n     *     the parent. To rotate around the object origin, use\n     *     {@link rotateAxisAngleDegObject}\n     *\n     * @see {@link rotateAxisAngleDeg}\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateAxisAngleRadLocal(a: Readonly<NumberArray>, d: number): this {\n        this._engine.wasm._wl_object_rotate_axis_angle_rad(this._id, a[0], a[1], a[2], d);\n        return this;\n    }\n\n    /**\n     * Rotate around given axis by given angle (degrees) in object space.\n     *\n     * @param a Vector representing the rotation axis.\n     * @param d Angle in degrees.\n     *\n     * Equivalent to prepending a rotation quaternion to the object's\n     * local transformation.\n     *\n     * @see {@link rotateAxisAngleRadObject}\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateAxisAngleDegObject(a: Readonly<NumberArray>, d: number): this {\n        this._engine.wasm._wl_object_rotate_axis_angle_obj(this._id, a[0], a[1], a[2], d);\n        return this;\n    }\n\n    /**\n     * Rotate around given axis by given angle (radians) in object space\n     * Equivalent to prepending a rotation quaternion to the object's\n     * local transformation.\n     *\n     * @param a Vector representing the rotation axis\n     * @param d Angle in degrees\n     *\n     * @see {@link rotateAxisAngleDegObject}\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateAxisAngleRadObject(a: Readonly<NumberArray>, d: number): this {\n        this._engine.wasm._wl_object_rotate_axis_angle_rad_obj(\n            this._id,\n            a[0],\n            a[1],\n            a[2],\n            d\n        );\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.rotateLocal} instead. */\n    rotate(q: Readonly<NumberArray>): this {\n        this.rotateLocal(q);\n        return this;\n    }\n\n    /**\n     * Rotate by a quaternion.\n     *\n     * @param q the Quaternion to rotate by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateLocal(q: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_rotate_quat(this._id, q[0], q[1], q[2], q[3]);\n        return this;\n    }\n\n    /**\n     * Rotate by a quaternion in object space.\n     *\n     * Equivalent to prepending a rotation quaternion to the object's\n     * local transformation.\n     *\n     * @param q the Quaternion to rotate by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateObject(q: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_rotate_quat_obj(this._id, q[0], q[1], q[2], q[3]);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.scaleLocal} instead. */\n    scale(v: Readonly<NumberArray>): this {\n        this.scaleLocal(v);\n        return this;\n    }\n\n    /**\n     * Scale object by a vector in object space.\n     *\n     * @param v Vector to scale by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    scaleLocal(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_scale(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /** @overload */\n    getPositionLocal(): Float32Array;\n    /**\n     * Compute local / object space position from transformation.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     */\n    getPositionLocal<T extends NumberArray>(out: T): T;\n    getPositionLocal(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this._engine.wasm;\n        /* Translation is different than rotation & scaling.\n         * We can't simply read the memory. */\n        wasm._wl_object_get_translation_local(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /** @overload */\n    getTranslationLocal(): Float32Array;\n    /** @deprecated Please use {@link Object3D.getPositionLocal} instead. */\n    getTranslationLocal<T extends NumberArray>(out: T): T;\n    getTranslationLocal(out: NumberArray = new Float32Array(3)): NumberArray {\n        return this.getPositionLocal(out);\n    }\n\n    /** @overload */\n    getPositionWorld(): Float32Array;\n    /**\n     * Compute world space position from transformation.\n     *\n     * May recompute transformations of the hierarchy of this object,\n     * if they were changed by JavaScript components this frame.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getPositionWorld<T extends NumberArray>(out: T): T;\n    getPositionWorld(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this._engine.wasm;\n        /* Translation is different than rotation & scaling.\n         * We can't simply read the memory. */\n        wasm._wl_object_get_translation_world(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /** @overload */\n    getTranslationWorld(): Float32Array;\n    /** @deprecated Please use {@link Object3D.getPositionWorld} instead. */\n    getTranslationWorld<T extends NumberArray>(out: T): T;\n    getTranslationWorld(out: NumberArray = new Float32Array(3)): NumberArray {\n        return this.getPositionWorld(out);\n    }\n\n    /**\n     * Set local / object space position.\n     *\n     * Concatenates a new translation dual quaternion onto the existing rotation.\n     *\n     * @param v New local position array/vector, expected to have at least 3 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setPositionLocal(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_set_translation_local(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.setPositionLocal} instead. */\n    setTranslationLocal(v: Readonly<NumberArray>): this {\n        return this.setPositionLocal(v);\n    }\n\n    /**\n     * Set world space position.\n     *\n     * Applies the inverse parent transform with a new translation dual quaternion\n     * which is concatenated onto the existing rotation.\n     *\n     * @param v New world position array/vector, expected to have at least 3 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setPositionWorld(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_set_translation_world(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.setPositionWorld} instead. */\n    setTranslationWorld(v: Readonly<NumberArray>): this {\n        return this.setPositionWorld(v);\n    }\n\n    /** @overload */\n    getScalingLocal(): Float32Array;\n    /**\n     * Local / object space scaling.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     *\n     * @since 1.0.0\n     */\n    getScalingLocal<T extends NumberArray>(out: T): T;\n    getScalingLocal(out: NumberArray = new Float32Array(3)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_scaling_local(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        return out;\n    }\n\n    /**\n     * Set local / object space scaling.\n     *\n     * @param v New local scaling array/vector, expected to have at least 3 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setScalingLocal(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_set_scaling_local(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /** @overload */\n    getScalingWorld(): Float32Array;\n    /**\n     * World space scaling.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     *\n     * @since 1.0.0\n     */\n    getScalingWorld<T extends NumberArray>(out: T): T;\n    getScalingWorld(out: NumberArray = new Float32Array(3)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_scaling_world(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        return out;\n    }\n\n    /**\n     * Set World space scaling.\n     *\n     * @param v New world scaling array/vector, expected to have at least 3 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setScalingWorld(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_set_scaling_world(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /** @overload */\n    getRotationLocal(): Float32Array;\n    /**\n     * Local space rotation.\n     *\n     * @param out Destination array/vector, expected to have at least 4 elements.\n     * @return The `out` parameter.\n     *\n     * @since 1.0.0\n     */\n    getRotationLocal<T extends NumberArray>(out: T): T;\n    getRotationLocal(out: NumberArray = new Float32Array(4)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_local(this._id) / 4; /* Align F32 */\n        /* The first 4 floats represent the rotation quaternion. */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        out[3] = wasm.HEAPF32[ptr + 3];\n        return out;\n    }\n\n    /**\n     * Set local space rotation.\n     *\n     * @param v New world rotation array/vector, expected to have at least 4 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setRotationLocal(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_set_rotation_local(this._id, v[0], v[1], v[2], v[3]);\n        return this;\n    }\n\n    /** @overload */\n    getRotationWorld(): Float32Array;\n    /**\n     * World space rotation.\n     *\n     * @param out Destination array/vector, expected to have at least 4 elements.\n     * @return The `out` parameter.\n     *\n     * @since 1.0.0\n     */\n    getRotationWorld<T extends NumberArray>(out: T): T;\n    getRotationWorld(out: NumberArray = new Float32Array(4)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_world(this._id) / 4; /* Align F32 */\n        /* The first 4 floats represent the rotation quaternion. */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        out[3] = wasm.HEAPF32[ptr + 3];\n        return out;\n    }\n\n    /**\n     * Set local space rotation.\n     *\n     * @param v New world rotation array/vector, expected to have at least 4 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setRotationWorld(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_set_rotation_world(this._id, v[0], v[1], v[2], v[3]);\n        return this;\n    }\n\n    /** @overload */\n    getTransformLocal(): Float32Array;\n    /**\n     * Local space transformation.\n     *\n     * @param out Destination array/vector, expected to have at least 8 elements.\n     * @return The `out` parameter.\n     */\n    getTransformLocal<T extends NumberArray>(out: T): T;\n    getTransformLocal(out: NumberArray = new Float32Array(8)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_local(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        out[3] = wasm.HEAPF32[ptr + 3];\n        out[4] = wasm.HEAPF32[ptr + 4];\n        out[5] = wasm.HEAPF32[ptr + 5];\n        out[6] = wasm.HEAPF32[ptr + 6];\n        out[7] = wasm.HEAPF32[ptr + 7];\n        return out;\n    }\n\n    /**\n     * Set local space rotation.\n     *\n     * @param v New local transform array, expected to have at least 8 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setTransformLocal(v: Readonly<NumberArray>): this {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_local(this._id) / 4; /* Align F32 */\n        wasm.HEAPF32[ptr] = v[0];\n        wasm.HEAPF32[ptr + 1] = v[1];\n        wasm.HEAPF32[ptr + 2] = v[2];\n        wasm.HEAPF32[ptr + 3] = v[3];\n        wasm.HEAPF32[ptr + 4] = v[4];\n        wasm.HEAPF32[ptr + 5] = v[5];\n        wasm.HEAPF32[ptr + 6] = v[6];\n        wasm.HEAPF32[ptr + 7] = v[7];\n        this.setDirty();\n        return this;\n    }\n\n    /** @overload */\n    getTransformWorld(): Float32Array;\n    /**\n     * World space transformation.\n     *\n     * @param out Destination array, expected to have at least 8 elements.\n     * @return The `out` parameter.\n     */\n    getTransformWorld<T extends NumberArray>(out: T): T;\n    getTransformWorld(out: NumberArray = new Float32Array(8)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_world(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        out[3] = wasm.HEAPF32[ptr + 3];\n        out[4] = wasm.HEAPF32[ptr + 4];\n        out[5] = wasm.HEAPF32[ptr + 5];\n        out[6] = wasm.HEAPF32[ptr + 6];\n        out[7] = wasm.HEAPF32[ptr + 7];\n        return out;\n    }\n\n    /**\n     * Set world space rotation.\n     *\n     * @param v New world transform array, expected to have at least 8 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setTransformWorld(v: Readonly<NumberArray>): this {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_world(this._id) / 4; /* Align F32 */\n        wasm.HEAPF32[ptr] = v[0];\n        wasm.HEAPF32[ptr + 1] = v[1];\n        wasm.HEAPF32[ptr + 2] = v[2];\n        wasm.HEAPF32[ptr + 3] = v[3];\n        wasm.HEAPF32[ptr + 4] = v[4];\n        wasm.HEAPF32[ptr + 5] = v[5];\n        wasm.HEAPF32[ptr + 6] = v[6];\n        wasm.HEAPF32[ptr + 7] = v[7];\n        this._engine.wasm._wl_object_trans_world_to_local(this._id);\n        return this;\n    }\n\n    /**\n     * Local space transformation.\n     *\n     * @deprecated Please use {@link Object3D.setTransformLocal} and\n     * {@link Object3D.getTransformLocal} instead.\n     */\n    get transformLocal(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_object_trans_local(this._id),\n            8\n        );\n    }\n\n    /**\n     * Set local transform.\n     *\n     * @param t Local space transformation.\n     *\n     * @since 0.8.5\n     *\n     * @deprecated Please use {@link Object3D.setTransformLocal} and\n     * {@link Object3D.getTransformLocal} instead.\n     */\n    set transformLocal(t: Readonly<NumberArray>) {\n        this.transformLocal.set(t);\n        this.setDirty();\n    }\n\n    /**\n     * Global / world space transformation.\n     *\n     * May recompute transformations of the hierarchy of this object,\n     * if they were changed by JavaScript components this frame.\n     *\n     * @deprecated Please use {@link Object3D.setTransformWorld} and\n     * {@link Object3D.getTransformWorld} instead.\n     */\n    get transformWorld(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_object_trans_world(this._id),\n            8\n        );\n    }\n\n    /**\n     * Set world transform.\n     *\n     * @param t Global / world space transformation.\n     *\n     * @since 0.8.5\n     *\n     * @deprecated Please use {@link Object3D.setTransformWorld} and\n     * {@link Object3D.getTransformWorld} instead.\n     */\n    set transformWorld(t: Readonly<NumberArray>) {\n        this.transformWorld.set(t);\n        this._engine.wasm._wl_object_trans_world_to_local(this._id);\n    }\n\n    /**\n     * Local / object space scaling.\n     *\n     * @deprecated Please use {@link Object3D.setScalingLocal} and\n     * {@link Object3D.getScalingLocal} instead.\n     */\n    get scalingLocal(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_object_scaling_local(this._id),\n            3\n        );\n    }\n\n    /**\n     * Set local space scaling.\n     *\n     * @param s Local space scaling.\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.setScalingLocal} and\n     * {@link Object3D.getScalingLocal} instead.\n     */\n    set scalingLocal(s: Readonly<NumberArray>) {\n        this.scalingLocal.set(s);\n        this.setDirty();\n    }\n\n    /**\n     * Global / world space scaling.\n     *\n     * May recompute transformations of the hierarchy of this object,\n     * if they were changed by JavaScript components this frame.\n     *\n     * @deprecated Please use {@link Object3D.setScalingWorld} and\n     * {@link Object3D.getScalingWorld} instead.\n     */\n    get scalingWorld(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_object_scaling_world(this._id),\n            3\n        );\n    }\n\n    /**\n     * Set world space scaling.\n     *\n     * @param t World space scaling.\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.setScalingWorld} and\n     * {@link Object3D.getScalingWorld} instead.\n     */\n    set scalingWorld(s: Readonly<NumberArray>) {\n        this.scalingWorld.set(s);\n        this._engine.wasm._wl_object_scaling_world_to_local(this._id);\n    }\n\n    /**\n     * Local space rotation.\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.getRotationLocal} and\n     * {@link Object3D.setRotationLocal} instead.\n     */\n    get rotationLocal(): Float32Array {\n        return this.transformLocal.subarray(0, 4);\n    }\n\n    /**\n     * Global / world space rotation\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.getRotationWorld} and\n     * {@link Object3D.setRotationWorld} instead.\n     */\n    get rotationWorld(): Float32Array {\n        return this.transformWorld.subarray(0, 4);\n    }\n\n    /**\n     * Set local space rotation.\n     *\n     * @param r Local space rotation\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.getRotationLocal} and\n     * {@link Object3D.setRotationLocal} instead.\n     */\n    set rotationLocal(r: Readonly<NumberArray>) {\n        this._engine.wasm._wl_object_set_rotation_local(this._id, r[0], r[1], r[2], r[3]);\n    }\n\n    /**\n     * Set world space rotation.\n     *\n     * @param r Global / world space rotation.\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.getRotationWorld} and\n     * {@link Object3D.setRotationWorld} instead.\n     */\n    set rotationWorld(r: Readonly<NumberArray>) {\n        this._engine.wasm._wl_object_set_rotation_world(this._id, r[0], r[1], r[2], r[3]);\n    }\n\n    /** @deprecated Please use {@link Object3D.getForwardWorld} instead. */\n    getForward<T extends NumberArray>(out: T): T {\n        return this.getForwardWorld(out);\n    }\n\n    /**\n     * Compute the object's forward facing world space vector.\n     *\n     * The forward vector in object space is along the negative z-axis, i.e.,\n     * `[0, 0, -1]`.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getForwardWorld<T extends NumberArray>(out: T): T {\n        out[0] = 0;\n        out[1] = 0;\n        out[2] = -1;\n        this.transformVectorWorld(out);\n        return out;\n    }\n\n    /** @deprecated Please use {@link Object3D.getUpWorld} instead. */\n    getUp<T extends NumberArray>(out: T): T {\n        return this.getUpWorld(out);\n    }\n\n    /**\n     * Compute the object's up facing world space vector.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getUpWorld<T extends NumberArray>(out: T): T {\n        out[0] = 0;\n        out[1] = 1;\n        out[2] = 0;\n        this.transformVectorWorld(out);\n        return out;\n    }\n\n    /** @deprecated Please use {@link Object3D.getRightWorld} instead. */\n    getRight<T extends NumberArray>(out: T): T {\n        return this.getRightWorld(out);\n    }\n\n    /**\n     * Compute the object's right facing world space vector.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getRightWorld<T extends NumberArray>(out: T): T {\n        out[0] = 1;\n        out[1] = 0;\n        out[2] = 0;\n        this.transformVectorWorld(out);\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's world transform.\n     *\n     * @param out Out vector\n     * @param v Vector to transform, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorWorld<T extends NumberArray>(out: T, v: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorWorld(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's local transform.\n     *\n     * @param out Out vector\n     * @param v Vector to transform, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorLocal<T extends NumberArray>(out: T, v: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorLocal(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's world transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointWorld<T extends NumberArray>(out: T, p: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = p[0];\n        wasm._tempMemFloat[1] = p[1];\n        wasm._tempMemFloat[2] = p[2];\n        wasm._wl_object_transformPointWorld(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's local transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointLocal<T extends NumberArray>(out: T, p: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = p[0];\n        wasm._tempMemFloat[1] = p[1];\n        wasm._tempMemFloat[2] = p[2];\n        wasm._wl_object_transformPointLocal(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's inverse world transform.\n     *\n     * @param out Out vector.\n     * @param v Vector to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorInverseWorld<T extends NumberArray>(out: T, v: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorInverseWorld(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's inverse local transform.\n     *\n     * @param out Out vector\n     * @param v Vector to transform, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorInverseLocal<T extends NumberArray>(out: T, v: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorInverseLocal(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's inverse world transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointInverseWorld<T extends NumberArray>(out: T, p: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = p[0];\n        wasm._tempMemFloat[1] = p[1];\n        wasm._tempMemFloat[2] = p[2];\n        wasm._wl_object_transformPointInverseWorld(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's inverse local transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointInverseLocal<T extends NumberArray>(out: T, p: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat.set(p);\n        wasm._wl_object_transformPointInverseLocal(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform an object space dual quaternion into world space.\n     *\n     * @param out Out transformation.\n     * @param q Local space transformation, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    toWorldSpaceTransform<T extends NumberArray>(out: T, q: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat.set(q);\n        wasm._wl_object_toWorldSpaceTransform(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n\n        out[4] = wasm._tempMemFloat[4];\n        out[5] = wasm._tempMemFloat[5];\n        out[6] = wasm._tempMemFloat[6];\n        out[7] = wasm._tempMemFloat[7];\n\n        return out;\n    }\n\n    /**\n     * Transform a world space dual quaternion into local space.\n     *\n     * @param out Out transformation\n     * @param q World space transformation, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    toLocalSpaceTransform<T extends NumberArray>(out: T, q: NumberArray = out): T {\n        const p = this.parent;\n        if (p) {\n            p.toObjectSpaceTransform(out, q);\n            return out;\n        }\n        if (out !== q) {\n            out[0] = q[0];\n            out[1] = q[1];\n            out[2] = q[2];\n            out[3] = q[3];\n            out[4] = q[4];\n            out[5] = q[5];\n            out[6] = q[6];\n            out[7] = q[7];\n        }\n        return out;\n    }\n\n    /**\n     * Transform a world space dual quaternion into object space.\n     *\n     * @param out Out transformation.\n     * @param q World space transformation, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    toObjectSpaceTransform<T extends NumberArray>(out: T, q: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat.set(q);\n        wasm._wl_object_toObjectSpaceTransform(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n\n        out[4] = wasm._tempMemFloat[4];\n        out[5] = wasm._tempMemFloat[5];\n        out[6] = wasm._tempMemFloat[6];\n        out[7] = wasm._tempMemFloat[7];\n\n        return out;\n    }\n\n    /**\n     * Turn towards / look at target.\n     *\n     * Rotates the object so that its forward vector faces towards the target\n     * position. The `up` vector acts as a hint to uniquely orient the object's\n     * up direction. When orienting a view component, the projected `up` vector\n     * faces upwards on the viewing plane.\n     *\n     * @param p Target position to turn towards, in world space.\n     * @param up Up vector to align object with, in world space. Default is `[0, 1, 0]`.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    lookAt(p: NumberArray, up: NumberArray = UP_VECTOR): this {\n        this._engine.wasm._wl_object_lookAt(\n            this._id,\n            p[0],\n            p[1],\n            p[2],\n            up[0],\n            up[1],\n            up[2]\n        );\n        return this;\n    }\n\n    /** Destroy the object with all of its components and remove it from the scene */\n    destroy(): void {\n        if (this._id < 0) return;\n        /* This will automatically call `scene._destroyObject` */\n        this.engine.wasm._wl_object_remove(this._id);\n    }\n\n    /**\n     * Mark transformation dirty.\n     *\n     * Causes an eventual recalculation of {@link transformWorld}, either\n     * on next {@link getTranslationWorld}, {@link transformWorld} or\n     * {@link scalingWorld} or the beginning of next frame, whichever\n     * happens first.\n     */\n    setDirty(): void {\n        this._engine.wasm._wl_object_set_dirty(this._id);\n    }\n\n    /**\n     * Disable/enable all components of this object.\n     *\n     * @param b New state for the components.\n     *\n     * @since 0.8.5\n     */\n    set active(b: boolean) {\n        const comps = this.getComponents();\n        for (let c of comps) {\n            c.active = b;\n        }\n    }\n\n    /* `getComponent` overloads for native components. */\n\n    /** @overload */\n    getComponent<K extends keyof NativeComponents>(\n        type: K,\n        index?: number\n    ): NativeComponents[K] | null;\n    /** @overload */\n    getComponent(typeOrClass: string, index?: number): Component | null;\n    /**\n     * Get a component attached to this object.\n     *\n     * @param typeOrClass Type name. It's also possible to give a class definition.\n     *     In this case, the method will use the `class.TypeName` field to find the component.\n     * @param index=0 Index for component of given type. This can be used to access specific\n     *      components if the object has multiple components of the same type.\n     * @returns The component or `null` if there is no such component on this object\n     */\n    getComponent<T extends Component>(\n        typeOrClass: ComponentConstructor<T>,\n        index?: number\n    ): T | null;\n    getComponent(\n        typeOrClass: string | ComponentConstructor,\n        index: number = 0\n    ): Component | null {\n        const wasm = this._engine.wasm;\n        const type = isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName;\n\n        const scene = this._scene;\n        const componentType = wasm._wl_scene_get_component_manager_index(\n            scene._index,\n            wasm.tempUTF8(type)\n        );\n\n        if (componentType < 0) {\n            /* Not a native component, try js: */\n            const typeIndex = wasm._componentTypeIndices[type];\n            if (typeIndex === undefined) return null;\n            const jsIndex = wasm._wl_get_js_component_index(this._id, typeIndex, index);\n            if (jsIndex < 0) return null;\n\n            const component = this._scene._jsComponents[jsIndex];\n            return component.constructor !== BrokenComponent ? component : null;\n        }\n\n        const componentId = wasm._wl_get_component_id(this._id, componentType, index);\n        return scene._components.wrapNative(componentType, componentId);\n    }\n\n    /* `getComponents` overloads for native components. */\n\n    /** @overload */\n    getComponents(): Component[];\n    /** @overload */\n    getComponents<K extends keyof NativeComponents>(type: K): NativeComponents[K][];\n    /**\n     * @param typeOrClass Type name, pass a falsey value (`undefined` or `null`) to retrieve all.\n     *     It's also possible to give a class definition. In this case, the method will use the `class.TypeName` field to\n     *     find the components.\n     * @returns All components of given type attached to this object.\n     *\n     * @note As this function is non-trivial, avoid using it in `update()` repeatedly,\n     *      but rather store its result in `init()` or `start()`\n     * @warning This method will currently return at most 341 components.\n     */\n    getComponents<T extends Component>(typeOrClass: ComponentConstructor<T>): T[];\n    getComponents<T extends Component>(\n        typeOrClass?: string | ComponentConstructor<T> | null\n    ): T[] {\n        const wasm = this._engine.wasm;\n        const scene = this._scene;\n\n        let manager = null;\n        let type = null;\n        if (typeOrClass) {\n            type = isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName;\n            const nativeManager = scene._components.getNativeManager(type);\n            manager = nativeManager !== null ? nativeManager : scene._components.js;\n        }\n\n        const components: Component[] = [];\n        const maxComps = Math.floor((wasm._tempMemSize / 3) * 2);\n        const componentsCount = wasm._wl_object_get_components(\n            this._id,\n            wasm._tempMem,\n            maxComps\n        );\n        const offset = 2 * componentsCount;\n        wasm._wl_object_get_component_types(this._id, wasm._tempMem + offset, maxComps);\n\n        for (let i = 0; i < componentsCount; ++i) {\n            const t = wasm._tempMemUint8[i + offset];\n            const componentId = wasm._tempMemUint16[i];\n            if (manager !== null && t !== manager) continue;\n\n            const comp = this._scene._components.wrapAny(t, componentId);\n            if (!comp) continue;\n            if (type && type !== (comp.constructor as ComponentConstructor).TypeName)\n                continue;\n            components.push(comp);\n        }\n        return components as T[];\n    }\n\n    /* `addComponent` overloads for native components. */\n\n    /** @overload */\n    addComponent(type: 'collision', params?: Record<string, any>): CollisionComponent;\n    /** @overload */\n    addComponent(type: 'text', params?: Record<string, any>): TextComponent;\n    /** @overload */\n    addComponent(type: 'view', params?: Record<string, any>): ViewComponent;\n    /** @overload */\n    addComponent(type: 'mesh', params?: Record<string, any>): MeshComponent;\n    /** @overload */\n    addComponent(type: 'input', params?: Record<string, any>): InputComponent;\n    /** @overload */\n    addComponent(type: 'light', params?: Record<string, any>): LightComponent;\n    /** @overload */\n    addComponent(type: 'animation', params?: Record<string, any>): AnimationComponent;\n    /** @overload */\n    addComponent(type: 'physx', params?: Record<string, any>): PhysXComponent;\n    /** @overload */\n    addComponent(\n        type: 'particle-effect',\n        params?: Record<string, any>\n    ): ParticleEffectComponent;\n    /** @overload */\n    addComponent(type: string, params?: Record<string, any>): Component;\n    /**\n     * Add component of given type to the object.\n     *\n     * You can use this function to clone components, see the example below.\n     *\n     * ```js\n     *  // Clone existing component (since 0.8.10)\n     *  let original = this.object.getComponent('mesh');\n     *  otherObject.addComponent('mesh', original);\n     *  // Create component from parameters\n     *  this.object.addComponent('mesh', {\n     *      mesh: someMesh,\n     *      material: someMaterial,\n     *  });\n     * ```\n     *\n     * @param typeOrClass Typename to create a component of. Can be native or\n     *     custom JavaScript component type. It's also possible to give a class definition.\n     *     In this case, the method will use the `class.TypeName` field.\n     * @param params Parameters to initialize properties of the new component,\n     *      can be another component to copy properties from.\n     *\n     * @returns The component or `null` if the type was not found\n     */\n    addComponent<T extends Component>(\n        typeClass: ComponentConstructor<T>,\n        params?: Record<string, any>\n    ): T;\n    addComponent(\n        typeOrClass: ComponentConstructor | string,\n        params?: Record<string, any>\n    ): Component {\n        if (this.markedDestroyed) {\n            throw new Error(`Failed to add component. ${this} is marked as destroyed.`);\n        }\n\n        const wasm = this._engine.wasm;\n\n        const type = isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName;\n        const nativeManager = this._scene._components.getNativeManager(type);\n        const isNative = nativeManager !== null;\n        const manager = isNative ? nativeManager : this._scene._components.js;\n\n        let componentId = -1;\n        if (!isNative) {\n            /* JavaScript component */\n            if (!(type in wasm._componentTypeIndices)) {\n                throw new TypeError(\"Unknown component type '\" + type + \"'\");\n            }\n            componentId = wasm._wl_object_add_js_component(\n                this._id,\n                wasm._componentTypeIndices[type]\n            );\n        } else {\n            /* native component */\n            componentId = wasm._wl_object_add_component(this._id, manager);\n        }\n\n        const component = this._scene._components.wrapAny(manager, componentId)!;\n\n        if (params !== undefined) component.copy(params as Component);\n\n        /* Explicitly initialize js components */\n        if (!isNative) {\n            component._triggerInit();\n            /* start() is called through onActivate() */\n        }\n\n        /* If it was not explicitly requested by the user to leave the component inactive,\n         * we activate it as a final step. This invalidates componentIndex! */\n        if (!params || !('active' in params && !params.active)) {\n            component.active = true;\n        }\n\n        return component;\n    }\n\n    /**\n     * Search for descendants matching the name.\n     *\n     * This method is a wrapper around {@link Object3D.findByNameDirect} and\n     * {@link Object3D.findByNameRecursive}.\n     *\n     * @param name The name to search for.\n     * @param recursive If `true`, the method will look at all the descendants of this object.\n     *     If `false`, this method will only perform the search in direct children.\n     * @returns An array of {@link Object3D} matching the name.\n     *\n     * @since 1.1.0\n     */\n    findByName(name: string, recursive = false): Object3D[] {\n        return recursive ? this.findByNameRecursive(name) : this.findByNameDirect(name);\n    }\n\n    /**\n     * Search for all **direct** children matching the name.\n     *\n     * @note Even though this method is heavily optimized, it does perform\n     * a linear search to find the objects. Do not use in a hot path.\n     *\n     * @param name The name to search for.\n     * @returns An array of {@link Object3D} matching the name.\n     *\n     * @since 1.1.0\n     */\n    findByNameDirect(name: string): Object3D[] {\n        const wasm = this._engine.wasm;\n        const id = this._id;\n\n        /* Divide by 4 to get half as many ushort as possible */\n        const tempSizeU16 = wasm._tempMemSize >> 2;\n        const maxCount = tempSizeU16 - 2; /* Reserve two ushort */\n\n        const buffer = wasm._tempMemUint16;\n        buffer[maxCount] = 0; /* Index offset */\n        buffer[maxCount + 1] = 0; /* child count */\n\n        const bufferPtr = wasm._tempMem;\n        const indexPtr = bufferPtr + maxCount * 2;\n        const childCountPtr = bufferPtr + maxCount * 2 + 2;\n        const namePtr = wasm.tempUTF8(name, (maxCount + 2) * 2);\n\n        const result: Object3D[] = [];\n        let read = 0;\n        while (\n            (read = wasm._wl_object_findByName(\n                id,\n                namePtr,\n                indexPtr,\n                childCountPtr,\n                bufferPtr,\n                maxCount\n            ))\n        ) {\n            for (let i = 0; i < read; ++i) {\n                result.push(this._scene.wrap(buffer[i]));\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Search for **all descendants** matching the name.\n     *\n     * @note Even though this method is heavily optimized, it does perform\n     * a linear search to find the objects. Do not use in a hot path.\n     *\n     * @param name The name to search for.\n     * @returns An array of {@link Object3D} matching the name.\n     *\n     * @since 1.1.0\n     */\n    findByNameRecursive(name: string): Object3D[] {\n        const wasm = this._engine.wasm;\n        const id = this._id;\n\n        /* Divide by 4 to get half as many ushort as possible */\n        const tempSizeU16 = wasm._tempMemSize >> 2;\n        const maxCount = tempSizeU16 - 1; /* Reserve one ushort */\n\n        const buffer = wasm._tempMemUint16;\n        buffer[maxCount] = 0; /* Index offset */\n\n        const bufferPtr = wasm._tempMem;\n        const indexPtr = bufferPtr + maxCount * 2;\n        const namePtr = wasm.tempUTF8(name, (maxCount + 1) * 2);\n\n        let read = 0;\n        const result: Object3D[] = [];\n        while (\n            (read = wasm._wl_object_findByNameRecursive(\n                id,\n                namePtr,\n                indexPtr,\n                bufferPtr,\n                maxCount\n            ))\n        ) {\n            for (let i = 0; i < read; ++i) {\n                result.push(this._scene.wrap(buffer[i]));\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Whether given object's transformation has changed.\n     */\n    get changed(): boolean {\n        return !!this._engine.wasm._wl_object_is_changed(this._id);\n    }\n\n    /**\n     * `true` if the object is destroyed, `false` otherwise.\n     *\n     * If {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`,\n     * reading a custom property will not work:\n     *\n     * ```js\n     * engine.erasePrototypeOnDestroy = true;\n     *\n     * const obj = scene.addObject();\n     * obj.customParam = 'Hello World!';\n     *\n     * console.log(obj.isDestroyed); // Prints `false`\n     * obj.destroy();\n     * console.log(obj.isDestroyed); // Prints `true`\n     * console.log(obj.customParam); // Throws an error\n     * ```\n     *\n     * @since 1.1.1\n     */\n    get isDestroyed(): boolean {\n        return this._id < 0;\n    }\n\n    /**\n     * `true` if the object is marked as destroyed.\n     *\n     * This boolean will only ever be `true` when reading objects state\n     * from the {@link Component.onDestroy} callback, i.e.,\n     *\n     * ```js\n     * import {Component} from '@wonderlandengine/api';\n     * class CleanupComponent extends Component {\n     *     onDestroy() {\n     *         if (this.object.markedDestroyed) {\n     *             // this object is getting removed\n     *         } else {\n     *             // The component is getting destroyed, the object will\n     *             // still exist after the destruction call\n     *         }\n     *     }\n     * }\n     * ```\n     *\n     * Certain operations are forbidden when an object is pending destruction:\n     * - Reparenting the object via {@link parent}\n     * - {@link addComponent}\n     * - {@link Scene.addObject}\n     * - {@link Scene.destroy}\n     */\n    get markedDestroyed(): boolean {\n        const wasm = this.engine.wasm;\n        return !!wasm._wl_object_markedDestroyed(this._id);\n    }\n\n    /**\n     * Checks equality by comparing ids and **not** the JavaScript reference.\n     *\n     * @deprecate Use JavaScript reference comparison instead:\n     *\n     * ```js\n     * const objectA = scene.addObject();\n     * const objectB = scene.addObject();\n     * const objectC = objectB;\n     * console.log(objectA === objectB); // false\n     * console.log(objectA === objectA); // true\n     * console.log(objectB === objectC); // true\n     * ```\n     */\n    equals(otherObject: Object3D | undefined | null): boolean {\n        /** @todo(2.0.0): Remove this method. */\n        if (!otherObject) return false;\n        return this._id == otherObject._id;\n    }\n\n    toString() {\n        if (this.isDestroyed) {\n            return 'Object3D(destroyed)';\n        }\n        return `Object3D('${this.name}', ${this._localId})`;\n    }\n}\n\n/**\n * Wrapper around a native skin data.\n */\nexport class Skin extends SceneResource {\n    /** Amount of joints in this skin. */\n    get jointCount() {\n        return this.engine.wasm._wl_skin_get_joint_count(this._id);\n    }\n\n    /** Joints object ids for this skin */\n    get jointIds(): Uint16Array {\n        const wasm = this.engine.wasm;\n        return new Uint16Array(\n            wasm.HEAPU16.buffer,\n            wasm._wl_skin_joint_ids(this._id),\n            this.jointCount\n        );\n    }\n\n    /**\n     * Dual quaternions in a flat array of size 8 times {@link jointCount}.\n     *\n     * Inverse bind transforms of the skin.\n     */\n    get inverseBindTransforms(): Float32Array {\n        const wasm = this.engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_skin_inverse_bind_transforms(this._id),\n            8 * this.jointCount\n        );\n    }\n\n    /**\n     * Vectors in a flat array of size 3 times {@link jointCount}.\n     *\n     * Inverse bind scalings of the skin.\n     */\n    get inverseBindScalings(): Float32Array {\n        const wasm = this.engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_skin_inverse_bind_scalings(this._id),\n            3 * this.jointCount\n        );\n    }\n}\n\n/**\n * Wrapper around a native set of morph targets.\n *\n * ## Usage\n *\n * ```js\n * const mesh = object.getComponent('mesh');\n * const mouthTarget = mesh.morphTargets.getTargetIndex('mouth');\n * mesh.setMorphTargetWeight(mouthTarget, 0.5);\n * ```\n *\n * @since 1.2.0\n */\nexport class MorphTargets extends Resource {\n    /** Amount of targets in this morph target set. */\n    get count() {\n        return this.engine.wasm._wl_morph_targets_get_target_count(this._id);\n    }\n\n    /** Returns the name of a given target */\n    getTargetName(target: number): string {\n        if (target >= this.count) {\n            throw new Error(`Index ${target} is out of bounds for ${this.count} targets`);\n        }\n        const wasm = this.engine.wasm;\n        return wasm.UTF8ToString(wasm._wl_morph_targets_get_target_name(this._id, target));\n    }\n\n    /**\n     * Get the index for a given target name.\n     *\n     * Throws if no target with that name exists.\n     *\n     * @param name Name of the target.\n     */\n    getTargetIndex(name: string): number {\n        const wasm = this.engine.wasm;\n        const index = wasm._wl_morph_targets_get_target_index(\n            this._id,\n            wasm.tempUTF8(name)\n        );\n        if (index === -1) {\n            throw Error(`Missing target '${name}'`);\n        }\n        return index;\n    }\n}\n\n/* For backward compatibility with < 1.0.0. */\nexport {Object3D as Object};\n\n/**\n * Ray hit.\n *\n * Result of a {@link Scene.rayCast} or {@link Physics.rayCast}.\n *\n * @note this class wraps internal engine data and should only be created internally.\n */\nexport class RayHit {\n    /** Scene instance. @hidden */\n    readonly _scene: Scene;\n\n    /** Pointer to the memory heap. */\n    private _ptr: number;\n\n    /**\n     * @param ptr Pointer to the ray hits memory.\n     */\n    constructor(scene: Scene, ptr: number) {\n        if ((ptr & 3) !== 0) {\n            throw new Error('Misaligned pointer: please report a bug');\n        }\n        this._scene = scene;\n        this._ptr = ptr;\n    }\n\n    /** @overload */\n    getLocations(): Float32Array[];\n    /**\n     * Array of ray hit locations.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const hit = engine.physics.rayCast();\n     * if (hit.hitCount > 0) {\n     *     const locations = hit.getLocations();\n     *     console.log(`Object hit at: ${locations[0][0]}, ${locations[0][1]}, ${locations[0][2]}`);\n     * }\n     * ```\n     *\n     * @param out Destination array of arrays/vectors, expected to have at least\n     *     `this.hitCount` elements. Each array is expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     */\n    getLocations<T extends NumberArray[]>(out: T): T;\n    getLocations(out?: NumberArray[]): NumberArray[] {\n        out = out ?? Array.from({length: this.hitCount}, () => new Float32Array(3));\n\n        const wasm = this.engine.wasm;\n        const alignedPtr = this._ptr / 4; /* Align F32 */\n        for (let i = 0; i < this.hitCount; ++i) {\n            const locationPtr = alignedPtr + 3 * i;\n            out[i][0] = wasm.HEAPF32[locationPtr];\n            out[i][1] = wasm.HEAPF32[locationPtr + 1];\n            out[i][2] = wasm.HEAPF32[locationPtr + 2];\n        }\n        return out;\n    }\n\n    /** @overload */\n    getNormals(): Float32Array[];\n    /**\n     * Array of ray hit normals (only when using {@link Physics#rayCast}.\n     *\n     * @param out Destination array of arrays/vectors, expected to have at least\n     *     `this.hitCount` elements. Each array is expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     */\n    getNormals<T extends NumberArray[]>(out: T): T;\n    getNormals(out?: NumberArray[]): NumberArray[] {\n        out = out ?? Array.from({length: this.hitCount}, () => new Float32Array(3));\n\n        const wasm = this.engine.wasm;\n        const alignedPtr = (this._ptr + 48) / 4; /* Align F32 */\n        for (let i = 0; i < this.hitCount; ++i) {\n            const normalPtr = alignedPtr + 3 * i;\n            out[i][0] = wasm.HEAPF32[normalPtr];\n            out[i][1] = wasm.HEAPF32[normalPtr + 1];\n            out[i][2] = wasm.HEAPF32[normalPtr + 2];\n        }\n        return out;\n    }\n\n    /** @overload */\n    getDistances(): Float32Array;\n    /**\n     * Prefer these to recalculating the distance from locations.\n     *\n     * Distances of array hits to ray origin.\n     *\n     * @param out Destination array/vector, expected to have at least this.hitCount elements.\n     * @returns The `out` parameter.\n     */\n    getDistances<T extends NumberArray>(out: T): T;\n    getDistances(out: NumberArray = new Float32Array(this.hitCount)): NumberArray {\n        const wasm = this.engine.wasm;\n        const alignedPtr = (this._ptr + 48 * 2) / 4; /* Align F32 */\n        for (let i = 0; i < this.hitCount; ++i) {\n            const distancePtr = alignedPtr + i;\n            out[i] = wasm.HEAPF32[distancePtr];\n        }\n        return out;\n    }\n\n    /**\n     * Array of hit objects.\n     *\n     * @param out Destination array/vector, expected to have at least `this.hitCount` elements.\n     * @returns The `out` parameter.\n     */\n    getObjects(out: Object3D[] = new Array(this.hitCount)): Object3D[] {\n        const HEAPU16 = this.engine.wasm.HEAPU16;\n        const alignedPtr = (this._ptr + (48 * 2 + 16)) >> 1;\n        for (let i = 0; i < this.hitCount; ++i) {\n            out[i] = this._scene.wrap(HEAPU16[alignedPtr + i]);\n        }\n        return out;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._scene.engine;\n    }\n\n    /**\n     * Equivalent to {@link RayHit.getLocations}.\n     *\n     * @note Prefer to use {@link RayHit.getLocations} for performance.\n     */\n    get locations(): Float32Array[] {\n        return this.getLocations();\n    }\n\n    /**\n     * Equivalent to {@link RayHit.getNormals}.\n     *\n     * @note Prefer to use {@link RayHit.getNormals} for performance.\n     */\n    get normals(): Float32Array[] {\n        return this.getNormals();\n    }\n\n    /**\n     * Equivalent to {@link RayHit.getDistances}.\n     *\n     * @note Prefer to use {@link RayHit.getDistances} for performance.\n     */\n    get distances(): Float32Array {\n        return this.getDistances();\n    }\n\n    /**\n     * Equivalent to {@link RayHit.getObjects}.\n     *\n     * @note Prefer to use {@link RayHit.getObjects} for performance.\n     */\n    get objects(): (Object3D | null)[] {\n        /** @todo: Remove at 2.0.0, this is kept for backward compatibility. */\n        const objects: (Object3D | null)[] = [null, null, null, null];\n        return this.getObjects(objects as Object3D[]);\n    }\n\n    /** Number of hits (max 4) */\n    get hitCount(): number {\n        return Math.min(this.engine.wasm.HEAPU32[this._ptr / 4 + 30], 4);\n    }\n}\n\nclass math {\n    /** (Experimental!) Cubic Hermite spline interpolation for vector3 and quaternions.\n     *\n     * With `f == 0`, `out` will be `b`, if `f == 1`, `out` will be c.\n     *\n     * Whether a quaternion or vector3 interpolation is intended is determined by\n     * length of `a`.\n     *\n     * @param out Array to write result to.\n     * @param a First tangent/handle.\n     * @param b First point or quaternion.\n     * @param c Second point or quaternion.\n     * @param d Second handle.\n     * @param f Interpolation factor in [0; 1].\n     * @returns The `out` parameter.\n     *\n     * @since 0.8.6\n     */\n    static cubicHermite<T extends NumberArray>(\n        out: T,\n        a: Readonly<NumberArray>,\n        b: Readonly<NumberArray>,\n        c: Readonly<NumberArray>,\n        d: Readonly<NumberArray>,\n        f: number,\n        engine: WonderlandEngine = WL\n    ) {\n        const wasm = engine.wasm;\n        wasm._tempMemFloat.subarray(0).set(a);\n        wasm._tempMemFloat.subarray(4).set(b);\n        wasm._tempMemFloat.subarray(8).set(c);\n        wasm._tempMemFloat.subarray(12).set(d);\n\n        const isQuat = a.length == 4;\n\n        wasm._wl_math_cubicHermite(\n            wasm._tempMem + 4 * 16,\n            wasm._tempMem + 4 * 0,\n            wasm._tempMem + 4 * 4,\n            wasm._tempMem + 4 * 8,\n            wasm._tempMem + 4 * 12,\n            f,\n            isQuat\n        );\n        out[0] = wasm._tempMemFloat[16];\n        out[1] = wasm._tempMemFloat[17];\n        out[2] = wasm._tempMemFloat[18];\n        if (isQuat) out[3] = wasm._tempMemFloat[19];\n        return out;\n    }\n}\n\nexport {math};\n\n/**\n * Class for accessing internationalization (i18n) features.\n *\n * Allows {@link I18N.onLanguageChanged \"detecting language change\"},\n * {@link I18N.language \"setting the current language\"} or translating\n * {@link I18N.translate \"individual terms\"}.\n *\n * Internationalization works with terms,\n * a string type keyword that is linked to a different text for each language.\n *\n * Internally, string parameters for text and js components are\n * automatically swapped during language change, given they are linked to a term.\n * If manual text swapping is desired, {@link I18N.translate}\n * can be used to retrieve the current translation for any term.\n *\n * You can also use the {@link I18N.onLanguageChanged} to manually update text\n * when a language is changed to for example update a number in a string.\n *\n * @since 1.0.0\n */\nexport class I18N {\n    /**\n     * {@link Emitter} for language change events.\n     *\n     * First parameter to a listener is the old language index,\n     * second parameter is the new language index.\n     *\n     * Usage from a within a component:\n     *\n     * ```js\n     * this.engine.i18n.onLanguageChanged.add((oldLanguageIndex, newLanguageIndex) => {\n     *     const oldLanguage = this.engine.i18n.languageName(oldLanguageIndex);\n     *     const newLanguage = this.engine.i18n.languageName(newLanguageIndex);\n     *     console.log(\"Switched from\", oldLanguage, \"to\", newLanguage);\n     * });\n     * ```\n     */\n    readonly onLanguageChanged = new Emitter<[number, number]>();\n\n    /** Wonderland Engine instance. @hidden */\n    protected readonly _engine: WonderlandEngine;\n\n    /** Previously set language index. @hidden */\n    private _prevLanguageIndex: number = -1;\n\n    /**\n     * Constructor\n     */\n    constructor(engine: WonderlandEngine) {\n        this._engine = engine;\n    }\n\n    /**\n     * Set current language and apply translations to linked text parameters.\n     *\n     * @note This is equivalent to {@link I18N.setLanguage}.\n     *\n     * @param code Language code to switch to\n     */\n    set language(code: string | null) {\n        this.setLanguage(code);\n    }\n\n    /** Get current language code. */\n    get language(): string | null {\n        const wasm = this._engine.wasm;\n        const code = wasm._wl_i18n_currentLanguage();\n        if (code === 0) return null;\n        return wasm.UTF8ToString(code);\n    }\n\n    /**\n     * Get the current language index.\n     *\n     * This method is more efficient than its equivalent:\n     *\n     * ```js\n     * const index = i18n.languageIndex(i18n.language);\n     * ```\n     */\n    get currentIndex(): number {\n        return this._engine.wasm._wl_i18n_currentLanguageIndex();\n    }\n\n    /** Previous language index. */\n    get previousIndex(): number {\n        return this._prevLanguageIndex;\n    }\n\n    /**\n     * Set current language and apply translations to linked text parameters.\n     *\n     * @param code The language code.\n     * @returns A promise that resolves with the current index code when the\n     *     language is loaded.\n     */\n    async setLanguage(code: string | null): Promise<number> {\n        if (code == null) return Promise.resolve(this.currentIndex);\n        const wasm = this._engine.wasm;\n        this._prevLanguageIndex = this.currentIndex;\n        wasm._wl_i18n_setLanguage(wasm.tempUTF8(code));\n\n        const scene = this.engine.scene;\n\n        const filename = wasm.UTF8ToString(wasm._wl_i18n_languageFile(this.currentIndex));\n        const url = `${scene.baseURL}/locale/${filename}`;\n\n        await scene._downloadDependency(url);\n\n        this.onLanguageChanged.notify(this._prevLanguageIndex, this.currentIndex);\n\n        return this.currentIndex;\n    }\n\n    /**\n     * Get translated string for a term for the currently loaded language.\n     *\n     * @param term Term to translate\n     */\n    translate(term: string): string | null {\n        const wasm = this._engine.wasm;\n        const translation = wasm._wl_i18n_translate(wasm.tempUTF8(term));\n        if (translation === 0) return null;\n        return wasm.UTF8ToString(translation);\n    }\n\n    /**\n     * Get the number of languages in the project.\n     *\n     */\n    languageCount(): number {\n        const wasm = this._engine.wasm;\n        return wasm._wl_i18n_languageCount();\n    }\n\n    /**\n     * Get a language code.\n     *\n     * @param index Index of the language to get the code from\n     */\n    languageIndex(code: string): number {\n        const wasm = this._engine.wasm;\n        return wasm._wl_i18n_languageIndex(wasm.tempUTF8(code));\n    }\n\n    /**\n     * Get a language code.\n     *\n     * @param index Index of the language to get the code from\n     */\n    languageCode(index: number): string | null {\n        const wasm = this._engine.wasm;\n        const code = wasm._wl_i18n_languageCode(index);\n        if (code === 0) return null;\n        return wasm.UTF8ToString(code);\n    }\n\n    /**\n     * Get a language name.\n     *\n     * @param index Index of the language to get the name from\n     */\n    languageName(index: number): string | null {\n        const wasm = this._engine.wasm;\n        const name = wasm._wl_i18n_languageName(index);\n        if (name === 0) return null;\n        return wasm.UTF8ToString(name);\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n}\n\n/**\n * Environment lighting properties\n *\n * @since 1.2.3\n */\nexport class Environment {\n    /** Scene instance. @hidden */\n    private readonly _scene: Scene;\n\n    /** Constructor */\n    constructor(scene: Scene) {\n        this._scene = scene;\n    }\n\n    /**\n     * Get intensity of environment lighting.\n     *\n     * Incoming environment lighting is multiplied by this factor.\n     */\n    get intensity() {\n        return this._scene.engine.wasm._wl_scene_environment_get_intensity(\n            this._scene._index\n        );\n    }\n\n    /**\n     * Set intensity of environment lighting.\n     *\n     * @param intensity New intensity.\n     */\n    set intensity(intensity: number) {\n        this._scene.engine.wasm._wl_scene_environment_set_intensity(\n            this._scene._index,\n            intensity\n        );\n    }\n\n    /** @overload */\n    getTint(): Float32Array;\n    /**\n     * Get tint for environment lighting.\n     *\n     * Incoming environment lighting color channels are multiplied by these\n     * values.\n     *\n     * @param out Preallocated array to write into, to avoid garbage,\n     *     otherwise will allocate a new Float32Array.\n     * @returns Tint values - red, green, blue.\n     */\n    getTint<T extends NumberArray>(out: T): T;\n    /** @overload */\n    getTint<T extends NumberArray>(\n        out: T | Float32Array = new Float32Array(3)\n    ): T | Float32Array {\n        const wasm = this._scene.engine.wasm;\n        wasm._wl_scene_environment_get_tint(this._scene._index, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out as T;\n    }\n\n    /**\n     * Equivalent to {@link getTint}.\n     *\n     * @note Prefer to use {@link getTint} for performance.\n     */\n    get tint(): Float32Array {\n        return this.getTint();\n    }\n\n    /**\n     * Set tint for environment lighting.\n     *\n     * @param v New tint value. Expects a 3 component array.\n     */\n    setTint(v: Readonly<NumberArray>) {\n        this._scene.engine.wasm._wl_scene_environment_set_tint(\n            this._scene._index,\n            v[0],\n            v[1],\n            v[2]\n        );\n    }\n\n    /** Equivalent to {@link setTint}. */\n    set tint(v: Readonly<NumberArray>) {\n        this.setTint(v);\n    }\n\n    /** @overload */\n    getCoefficients(): Float32Array;\n    /**\n     * Get spherical harmonics coefficients for indirect lighting.\n     *\n     * These are 9 spherical harmonics coefficients for indirect diffuse\n     * lighting.\n     *\n     * @param out Preallocated array to write into, to avoid garbage,\n     *     otherwise will allocate a new Float32Array.\n     * @returns Spherical harmonics coefficients. Always 27 elements, every\n     *     consecutive 3 values representing the red, green, blue components of\n     *     a single coefficient. Unused/empty coefficients at the end can be 0.\n     */\n    getCoefficients<T extends NumberArray>(out: T): T;\n    /** @overload */\n    getCoefficients<T extends NumberArray>(\n        out: T | Float32Array = new Float32Array(3 * 9)\n    ): T | Float32Array {\n        const wasm = this._scene.engine.wasm;\n        wasm.requireTempMem(3 * 9 * 4);\n        wasm._wl_scene_environment_get_coefficients(this._scene._index, wasm._tempMem);\n        for (let i = 0; i < 3 * 9; ++i) {\n            out[i] = wasm._tempMemFloat[i];\n        }\n        return out as T;\n    }\n\n    /**\n     * Equivalent to {@link getCoefficients}.\n     *\n     * @note Prefer to use {@link getCoefficients} for performance.\n     */\n    get coefficients(): Float32Array {\n        return this.getCoefficients();\n    }\n\n    /**\n     * Set spherical harmonics coefficients for indirect lighting.\n     *\n     * @note The scene must have been packaged with environment lighting on for\n     * this to take effect.\n     *\n     * @example\n     *\n     * Coefficients from [WebXR Lighting Estimation](https://www.w3.org/TR/webxr-lighting-estimation-1)\n     * can be passed as follows:\n     *\n     * ```js\n     * const probe = await engine.xr.session.requestLightProbe();\n     * const estimate = engine.xr.frame.getLightEstimate(probe);\n     * scene.environment.coefficients = estimate.sphericalHarmonicsCoefficients;\n     * ```\n     *\n     * @param v A set of spherical harmonics coefficients, every 3 elements\n     *     constituting the red/green/blue components of a single coefficient.\n     *     Should be 0, 3, 12 or 27 **array elements**. Passing an empty array\n     *     disables indirect lighting.\n     */\n    setCoefficients(v: Readonly<NumberArray>) {\n        let count = v.length / 3;\n        if (count > 9) count = 9;\n        else if (count > 4 && count < 9) count = 4;\n        else if (count > 1 && count < 4) count = 1;\n        const wasm = this._scene.engine.wasm;\n        wasm._tempMemFloat.set(v);\n        wasm._wl_scene_environment_set_coefficients(\n            this._scene._index,\n            wasm._tempMem,\n            count\n        );\n    }\n\n    /** Equivalent to {@link setCoefficients}. */\n    set coefficients(v: Readonly<NumberArray>) {\n        this.setCoefficients(v);\n    }\n}\n", "{\n  \"name\": \"@wonderlandengine/api\",\n  \"version\": \"1.4.6\",\n  \"description\": \"Wonderland Engine's JavaScript API.\",\n  \"main\": \"./dist/index.js\",\n  \"module\": \"./dist/index.js\",\n  \"types\": \"./dist/index.d.ts\",\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": \"./dist/index.js\",\n    \"./version.js\": \"./dist/index.js\",\n    \"./decorators.js\": \"./dist/index.js\",\n    \"./utils/*\": \"./dist/index.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/WonderlandEngine/api.git\"\n  },\n  \"keywords\": [\n    \"webxr\",\n    \"wonderland\",\n    \"components\"\n  ],\n  \"author\": \"Wonderland GmbH\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/WonderlandEngine/api/issues\"\n  },\n  \"homepage\": \"https://github.com/WonderlandEngine/api#readme\",\n  \"scripts\": {\n    \"build\": \"tsc --emitDeclarationOnly && npm run build:bundle\",\n    \"build:bundle\": \"esbuild src/index.ts --minify-whitespace --minify-syntax --bundle --format=esm --tsconfig=\\\"tsconfig.json\\\" --outfile=\\\"dist/index.js\\\" --sourcemap=linked\",\n    \"build:watch\": \"tsc --watch\",\n    \"test\": \"npm run test:typecheck && node ./test/run.mjs\",\n    \"test:typecheck\": \"tsc --project ./test/tsconfig.json --noEmit\",\n    \"pretest\": \"npm run build\",\n    \"pretty\": \"prettier --write \\\"src/**/*.ts\\\" \\\"test/**/*.ts\\\"\",\n    \"pretty:check\": \"prettier --check \\\"src/**/*.ts\\\" \\\"test/**/*.ts\\\"\",\n    \"prepare\": \"npm run build\",\n    \"doc\": \"typedoc --entryPoints ./src/index.ts --tsconfig tsconfig.json --json ./doc.json --treatWarningsAsErrors --exclude ./src/decorators.ts\"\n  },\n  \"files\": [\n    \"dist/**/*.d.ts\",\n    \"dist/**/*.js\",\n    \"dist/**/*.js.map\"\n  ],\n  \"dependencies\": {\n    \"@types/webxr\": \"^0.5.0\"\n  },\n  \"devDependencies\": {\n    \"@wonderlandengine/chai-almost\": \"file:../chai-almost\",\n    \"esbuild\": \"0.21.5\",\n    \"typedoc\": \"0.23.28\",\n    \"typescript\": \"4.9.5\",\n    \"wasm-feature-detect\": \"1.6.2\"\n  }\n}\n", "// @ts-ignore\nimport {version} from '../package.json';\n\nconst matches = version.match(/([0-9]+).([0-9]+).([0-9]+)(?:-rc.([0-9]+))?/);\nif (!matches || matches.length < 4) {\n    console.error(`Invalid version '${version}'. Expected: major.minor.patch[-rc.x]`);\n}\n\n/**\n * Version type following a subset of the Semantic Versioning specification.\n */\nexport type Version = {major: number; minor: number; patch: number; rc: number};\n\n/** Version of this API. */\nexport const APIVersion: Version = {\n    major: Number.parseInt(matches![1]),\n    minor: Number.parseInt(matches![2]),\n    patch: Number.parseInt(matches![3]),\n    rc: matches![4] !== undefined ? Number.parseInt(matches![4]) : 0,\n};\n", "import {WonderlandEngine} from '../engine.js';\nimport {NumberArray} from '../types.js';\nimport {capitalizeFirstUTF8} from '../utils/misc.js';\nimport {Texture} from '../wonderland.js';\n\nimport {Resource, ResourceManager} from './resource.js';\n\n/**\n * Material parameter type.\n */\nexport enum MaterialParamType {\n    /** Unsigned integer parameter type. */\n    UnsignedInt = 0,\n    /** Integer parameter type. */\n    Int = 1,\n    /** 16-bit float parameter type. */\n    HalfFloat = 2,\n    /** Float parameter type. */\n    Float = 3,\n    /** Sampler resource parameter type, i.e., a {@link Texture}. */\n    Sampler = 4,\n    /**\n     * Font resource parameter type.\n     *\n     * **Note**: Changing font isn't exposed yet and will raise an error.\n     */\n    Font = 5,\n}\n\n/**\n * Constructor parameters object for a {@link Material} instance.\n *\n * @deprecated Use {@link MaterialManager#getTemplate} instead:\n *\n * ```js\n * const PhongMaterial = engine.materials.getTemplate('Phong Opaque');\n * const material = new PhongMaterial();\n * material.setDiffuseColor([1, 0, 0]);\n * ```\n */\nexport interface MaterialParameters {\n    /** The name of the pipeline. */\n    pipeline: string;\n}\n\n/**\n * Material constructor.\n *\n * Material classes are automatically generated by the runtime based on the\n * loaded scene shaders.\n */\nexport interface MaterialConstructor<T extends Material = Material> {\n    /**\n     * Set of the dynamic parameters that exist on the definition.\n     *\n     * For instance, the set would contain elements such as `ambientColor`, `diffuseColor`\n     * for a Phong material.\n     */\n    readonly Parameters: Set<string>;\n    /**\n     * Create a new Material.\n     *\n     * The material is created from the pipeline associated to the material class.\n     *\n     * @note Creating material is expensive. Please use {@link Material#clone} to clone a material.\n     * @note Do not use this constructor directly with an index, this is reserved for internal purposes.\n     */\n    new (index?: number): T;\n}\n\n/**\n * Wrapper around a native material.\n *\n * For more information about how to create materials, have a look at the\n * {@link MaterialManager} class.\n *\n * #### Properties\n *\n * The material properties are automatically converted into getters/setters:\n *\n * ```js\n * const material = new PhongMaterial();\n *\n * // Set the `diffuseColor` property\n * material.setDiffuseColor([1.0, 0.0, 0.0, 1.0]);\n * console.log(material.getDiffuseColor());\n * ```\n *\n * Getters for non-scalar types have an optional argument to skip an array\n * allocation:\n *\n * ```js\n * const material = new PhongMaterial();\n * const diffuse = [0, 0, 0, 0];\n * material.getDiffuseColor(diffuse);\n * console.log(diffuse) // Prints '[1.0, 1.0, 1.0, 1.0]'\n * ```\n *\n * @note Materials are **per-engine**, they can thus be shared by multiple scenes.\n *\n * #### TypeScript\n *\n * The Wonderland Editor can automatically generate material definitions (.d.ts)\n * from the project pipelines.\n *\n * To enable the generation, go to the `Project Settings > JavaScript` panel and\n * set `materialDefinitions` to a path, e.g., `materials.d.ts`.\n *\n * It's then possible to cast the material type using:\n *\n * ```ts\n * // Note the `.js` instead of `.d.ts`\n * import {PhongOpaque} from './materials.js';\n *\n * const mesh = object.getComponent('mesh');\n * const material = mesh.material as PhongOpaque;\n * material.setDiffuseColor([1, 0, 0, 1]); // Set a red diffuse\n * ```\n *\n * @since 1.2.0\n */\nexport class Material extends Resource {\n    /**\n     * @deprecated Use {@link MaterialManager#getTemplate} via {@link WonderlandEngine.materials}\n     * to create a new material with a given pipeline:\n     *\n     * ```js\n     * const PhongMaterial = engine.materials.getTemplate('Phong Opaque');\n     * const material = new PhongMaterial();\n     * material.setDiffuseColor([1, 0, 0]);\n     * ```\n     */\n    constructor(engine: WonderlandEngine, params: number | MaterialParameters) {\n        if (typeof params !== 'number') {\n            if (!params?.pipeline) throw new Error(\"Missing parameter 'pipeline'\");\n            const template = engine.materials.getTemplate(params.pipeline);\n            const material = new template();\n            super(engine, material._index);\n            return material;\n        }\n        super(engine, params);\n    }\n\n    /**\n     * Check whether a parameter exists on this material.\n     *\n     * @param name The name to check.\n     * @returns `true` if the parameter with name `name` exists on this material,\n     *     `false` otherwise.\n     */\n    hasParameter(name: string) {\n        const parameters = (this.constructor as MaterialConstructor).Parameters;\n        return parameters && parameters.has(name);\n    }\n\n    /** @deprecated Use {@link pipeline} instead. */\n    get shader(): string {\n        return this.pipeline;\n    }\n\n    /** Name of the pipeline used by this material. */\n    get pipeline(): string {\n        const wasm = this.engine.wasm;\n        return wasm.UTF8ToString(wasm._wl_material_get_pipeline(this._id));\n    }\n\n    /**\n     * Create a copy of the underlying native material.\n     *\n     * @returns Material clone.\n     */\n    clone(): Material | null {\n        const index = this.engine.wasm._wl_material_clone(this._id);\n        return this.engine.materials.wrap(index);\n    }\n\n    toString() {\n        if (this.isDestroyed) {\n            return 'Material(destroyed)';\n        }\n        return `Material('${this.pipeline}', ${this._index})`;\n    }\n\n    /**\n     * Wrap a native material index.\n     *\n     * @param engine Engine instance.\n     * @param index The index.\n     * @returns Material instance or `null` if index <= 0.\n     *\n     * @deprecated Use the {@link WonderlandEngine.materials} instead.\n     */\n    static wrap(engine: WonderlandEngine, index: number): Material | null {\n        return engine.materials.wrap(index);\n    }\n}\n\n/**\n * Manage materials.\n *\n * #### Creation\n *\n * To create a material, first retrieve the class associated to\n * the pipeline using {@link MaterialManager.getTemplate}:\n *\n * ```js\n * const PhongMaterial = engine.materials.getTemplate('Phong Opaque');\n * ```\n *\n * Creating a material is then done using the constructor:\n *\n * ```js\n * const material = new PhongMaterial();\n * material.setDiffuseColor([1.0, 0.0, 0.0, 1.0]);\n * ```\n */\nexport class MaterialManager extends ResourceManager<Material> {\n    /** Material classes. @hidden. */\n    private readonly _materialTemplates: MaterialConstructor[] = [];\n\n    /** @hidden */\n    constructor(engine: WonderlandEngine) {\n        super(engine, Material);\n        this._cacheDefinitions();\n    }\n\n    /** @override */\n    wrap(index: number) {\n        if (index <= 0) return null;\n\n        const cached = this._cache[index];\n        if (cached) return cached;\n\n        const wasm = this.engine.wasm;\n        const definition = wasm._wl_material_get_definition(index);\n\n        const Template = this._materialTemplates[definition];\n        const material = new Template(index);\n        return this._wrapInstance(material);\n    }\n\n    /**\n     * Get the material class with the given pipeline name.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const PhongMaterial = engine.materials.getTemplate('Phong Opaque');\n     * const material = new PhongMaterial();\n     * material.setDiffuseColor([1.0, 0.0, 0.0, 1.0]);\n     * ```\n     *\n     * #### TypeScript\n     *\n     * This method provide a simple way to cast the constructor returned by `getTemplate`:\n     *\n     * ```ts\n     * interface Phong {\n     *     getAmbientColor(out?: Float32Array): Float32Array;\n     *     setAmbientColor(value: NumberArray): void;\n     * }\n     * const PhongMaterial = engine.materials.getTemplate<Phong>('Phong Opaque');\n     * const mat = new PhongMaterial(); // `mat` is of type `Phong`\n     * ```\n     *\n     * However, this means manually writing types for each pipeline.\n     *\n     * Fortunately, The Wonderland Editor can automatically generate material definitions (.d.ts)\n     * from the project pipelines.\n     *\n     * To enable the generation, go to the `Project Settings > JavaScript` panel and\n     * set `materialDefinitions` to a path, e.g., `materials.d.ts`.\n     *\n     * Material constructors will then be typed automatically when using a string literal pipeline name:\n     *\n     * ```ts\n     * // Note the `.js` instead of `.d.ts`\n     * import {PhongOpaque} from './materials.js';\n     *\n     * const PhongMaterial = engine.materials.getTemplate('Phong Opaque');\n     * const mat = new PhongMaterial(); // `mat` is of type `PhongOpaque`\n     * ```\n     *\n     * @param pipeline The pipeline name to search for.\n     * @returns The material class.\n     *\n     * @throws `Error` if the material class doesn't exist.\n     */\n    getTemplate<T extends Material = Material>(pipeline: string): MaterialConstructor<T> {\n        const wasm = this.engine.wasm;\n        const index = wasm._wl_get_material_definition_index(wasm.tempUTF8(pipeline));\n        if (!index) {\n            throw new Error(`Pipeline '${pipeline}' doesn't exist in the scene`);\n        }\n        return this._materialTemplates[index] as MaterialConstructor<T>;\n    }\n\n    /**\n     * Wrap a material instance.\n     *\n     * @todo: Remove at 2.0.0.\n     *\n     * @note Wrapping should only be called once per instance.\n     *\n     * @param instance The material instance.\n     * @returns The new material, wrapped in a proxy.\n     */\n    _wrapInstance(instance: Material): Material {\n        this._cache[instance.index] = instance;\n        if (!this.engine.legacyMaterialSupport) return instance;\n\n        /** @todo: Remove at 2.0.0. This is kept for backward compatibility. */\n        const proxy = new Proxy(instance, {\n            get(target: Material, prop: string) {\n                if (!target.hasParameter(prop)) {\n                    return (target as Record<string, any>)[prop];\n                }\n                /** This is slow, but users should migrate to `getParam` */\n                const name = `get${capitalizeFirstUTF8(prop)}`;\n                return (target as Record<string, any>)[name]();\n            },\n            set(target, prop: string, value) {\n                if (!target.hasParameter(prop)) {\n                    (target as Record<string | symbol, any>)[prop] = value;\n                    return true;\n                }\n                /** This is slow, but users should migrate to `getParam` */\n                const name = `set${capitalizeFirstUTF8(prop)}`;\n                (target as Record<string, any>)[name](value);\n                return true;\n            },\n        });\n        this._cache[instance.index] = proxy;\n        return proxy;\n    }\n\n    /**\n     * Cache all pipeline definitions.\n     *\n     * @hidden\n     */\n    private _cacheDefinitions() {\n        const wasm = this.engine.wasm;\n        const count = wasm._wl_get_material_definition_count();\n        for (let i = 1; i < count; ++i) {\n            this._materialTemplates[i] = this._createMaterialTemplate(i);\n        }\n    }\n\n    /**\n     * Create a material class from a definition index.\n     *\n     * @param wasm The WASM instance.\n     * @param definitionIndex The definition index to wrap.\n     * @returns The material class.\n     */\n    private _createMaterialTemplate(definitionIndex: number) {\n        const engine = this.engine;\n        const template = class CustomMaterial extends Material {\n            static Parameters: Set<string> = new Set();\n\n            constructor(index?: number) {\n                index = index ?? engine.wasm._wl_material_create(definitionIndex);\n                super(engine, index);\n                /** @todo(2.0.0): Unify with Material. We need to wrap in both since materials\n                 * can be created via the parent class, or via child classes.\n                 * In addition, wrapping returns a proxy, we want to support Proxy<Material>\n                 * as well as Proxy<CustomMaterial>. */\n                return engine.materials._wrapInstance(this);\n            }\n        };\n\n        const wasm = this.engine.wasm;\n        const nbParams = wasm._wl_material_definition_get_param_count(definitionIndex);\n        for (let index = 0; index < nbParams; ++index) {\n            const name = wasm.UTF8ToString(\n                wasm._wl_material_definition_get_param_name(definitionIndex, index)\n            );\n            template.Parameters.add(name);\n\n            const t = wasm._wl_material_definition_get_param_type(definitionIndex, index);\n            const type = t & 0xff;\n            const componentCount = (t >> 8) & 0xff;\n            /* metaType could also be extracted using: (t >> 16) & 0xff */\n\n            const capitalized = capitalizeFirstUTF8(name);\n            const getterId = `get${capitalized}`;\n            const setterId = `set${capitalized}`;\n\n            const templateProto = template.prototype as Record<string, any>;\n            switch (type) {\n                case MaterialParamType.UnsignedInt:\n                    templateProto[getterId] = uint32Getter(index, componentCount);\n                    /* For now, it's only possible to set scalar uint values */\n                    templateProto[setterId] = uint32Setter(index);\n                    break;\n                case MaterialParamType.Int:\n                    templateProto[getterId] = int32Getter(index, componentCount);\n                    /* For now, it's only possible to set scalar int values. Integer values setter\n                     * is purposely shared with uint. */\n                    templateProto[setterId] = uint32Setter(index);\n                    break;\n                case MaterialParamType.HalfFloat:\n                case MaterialParamType.Float:\n                    templateProto[getterId] = float32Getter(index, componentCount);\n                    templateProto[setterId] = float32Setter(index, componentCount);\n                    break;\n                case MaterialParamType.Sampler:\n                    templateProto[getterId] = samplerGetter(index);\n                    templateProto[setterId] = samplerSetter(index);\n                    break;\n                case MaterialParamType.Font:\n                    templateProto[getterId] = fontGetter(index);\n                    /* For now, setting fonts is not supported */\n                    break;\n            }\n        }\n\n        return template as MaterialConstructor;\n    }\n}\n\n/** @todo: With this implementation, `_wl_material_get_param_value`\n * do not need to check for the parameter type anymore, we could use\n * explicit calls. */\n\nfunction uint32Getter(index: number, count: number) {\n    if (count === 1) {\n        return function (this: Material) {\n            const wasm = this.engine.wasm;\n            wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n            return wasm._tempMemUint32[0];\n        };\n    }\n    return function (this: Material, out: NumberArray = new Uint32Array(count)) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n        for (let i = 0; i < out.length; ++i) {\n            out[i] = wasm._tempMemUint32[i];\n        }\n        return out;\n    };\n}\n\nfunction uint32Setter(index: number) {\n    return function (this: Material, value: number) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_set_param_value_uint(this._id, index, value);\n    };\n}\n\nfunction int32Getter(index: number, count: number) {\n    if (count === 1) {\n        return function (this: Material) {\n            const wasm = this.engine.wasm;\n            wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n            return wasm._tempMemInt[0];\n        };\n    }\n    return function (this: Material, out: NumberArray = new Int32Array(count)) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n        for (let i = 0; i < out.length; ++i) {\n            out[i] = wasm._tempMemInt[i];\n        }\n        return out;\n    };\n}\n\nfunction float32Getter(index: number, count: number) {\n    if (count === 1) {\n        return function (this: Material) {\n            const wasm = this.engine.wasm;\n            wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n            return wasm._tempMemFloat[0];\n        };\n    }\n    return function (this: Material, out: NumberArray = new Float32Array(count)) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n        for (let i = 0; i < out.length; ++i) {\n            out[i] = wasm._tempMemFloat[i];\n        }\n        return out;\n    };\n}\n\nfunction float32Setter(index: number, count: number) {\n    return function (this: Material, value: number | NumberArray) {\n        const wasm = this.engine.wasm;\n\n        let actualCount = 1;\n        if (typeof value === 'number') {\n            wasm._tempMemFloat[0] = value;\n        } else {\n            actualCount = value.length;\n            for (let i = 0; i < actualCount; ++i) wasm._tempMemFloat[i] = value[i];\n        }\n\n        if (actualCount < count) {\n            throw new Error(`Expected an array ${count} values, got ${actualCount}`);\n        }\n\n        wasm._wl_material_set_param_value_float(this._id, index, wasm._tempMem, count);\n    };\n}\n\nfunction samplerGetter(index: number) {\n    return function (this: Material) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n        return this.engine.textures.wrap(wasm._tempMemInt[0]);\n    };\n}\n\nfunction samplerSetter(index: number) {\n    return function (this: Material, value: Texture | null | undefined) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_set_param_value_uint(this._id, index, value?._id ?? 0);\n    };\n}\n\nfunction fontGetter(index: number) {\n    return function (this: Material) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n        return this.engine.fonts.wrap(wasm._tempMemInt[0]);\n    };\n}\n", "import {WonderlandEngine} from '../engine.js';\nimport {Mesh, MeshIndexType, MeshParameters, MeshSkinningType} from '../wonderland.js';\n\nimport {ResourceManager} from './resource.js';\n\n/**\n * Manage meshes.\n *\n * #### Creation\n *\n * Creating a mesh is done using {@link MeshManager.create}:\n *\n * ```js\n * const mesh = engine.meshes.create({vertexCount: 3, indexData: [0, 1, 2]});\n * ```\n *\n * @since 1.2.0\n */\nexport class MeshManager extends ResourceManager<Mesh> {\n    constructor(engine: WonderlandEngine) {\n        super(engine, Mesh);\n    }\n\n    /**\n     * Create a new mesh.\n     *\n     * @param params Vertex and index data. For more information, have a look\n     *     at the {@link MeshParameters} object.\n     */\n    create(params: Partial<MeshParameters>) {\n        if (!params.vertexCount) throw new Error(\"Missing parameter 'vertexCount'\");\n\n        const wasm = this.engine.wasm;\n\n        let indexData = 0;\n        let indexType = 0;\n        let indexDataSize = 0;\n        if (params.indexData) {\n            indexType = params.indexType || MeshIndexType.UnsignedShort;\n            indexDataSize = params.indexData.length * indexType;\n            indexData = wasm._malloc(indexDataSize);\n            /* Copy the index data into wasm memory */\n            switch (indexType) {\n                case MeshIndexType.UnsignedByte:\n                    wasm.HEAPU8.set(params.indexData, indexData);\n                    break;\n                case MeshIndexType.UnsignedShort:\n                    wasm.HEAPU16.set(params.indexData, indexData >> 1);\n                    break;\n                case MeshIndexType.UnsignedInt:\n                    wasm.HEAPU32.set(params.indexData, indexData >> 2);\n                    break;\n            }\n        }\n\n        const {skinningType = MeshSkinningType.None} = params;\n\n        const index = wasm._wl_mesh_create(\n            indexData,\n            indexDataSize,\n            indexType,\n            params.vertexCount,\n            skinningType\n        );\n        const instance = new Mesh(this._host, index);\n        this._cache[instance.index] = instance;\n        return instance;\n    }\n}\n", "import {WonderlandEngine} from '../engine.js';\nimport {ImageLike} from '../types.js';\nimport {Texture} from '../wonderland.js';\n\nimport {ResourceManager} from './resource.js';\n\nexport function needsFlipY(image: ImageLike) {\n    /* WebGL can't flip ImageBitmap on upload.\n     * For consistency with WebGPU, disable ImageBitmap flipping entirely and let the user use:\n     * https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap#options */\n    return image instanceof ImageBitmap ? 0 : 1;\n}\n\n/**\n * Manage textures.\n *\n * #### Creation\n *\n * Creating a texture is done using {@link TextureManager.load}:\n *\n * ```js\n * const texture = await engine.textures.load('my-image.png');\n * ```\n *\n * Alternatively, textures can be created directly via a loaded image using\n * {@link TextureManager.create}.\n *\n * @since 1.2.0\n */\nexport class TextureManager extends ResourceManager<Texture> {\n    constructor(engine: WonderlandEngine) {\n        super(engine, Texture);\n    }\n\n    /**\n     * Create a new texture from an image or video.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const img = new Image();\n     * img.load = function(img) {\n     *     const texture = engine.textures.create(img);\n     * };\n     * img.src = 'my-image.png';\n     * ```\n     *\n     * @note The media must already be loaded. To automatically\n     * load the media and create a texture, use {@link TextureManager.load} instead.\n     *\n     * @param image Media element to create the texture from.\n     * @ret\\urns The new texture with the media content.\n     */\n    create(image: ImageLike): Texture {\n        const wasm = this.engine.wasm;\n\n        const jsImageIndex = wasm._images.length;\n        wasm._images.push(image);\n\n        if (image instanceof HTMLImageElement && !image.complete) {\n            throw new Error('image must be ready to create a texture');\n        }\n\n        const width = (image as HTMLVideoElement).videoWidth ?? image.width;\n        const height = (image as HTMLVideoElement).videoHeight ?? image.height;\n\n        const imageIndex = wasm._wl_image_create(jsImageIndex);\n        wasm._wl_image_markReady(imageIndex, width, height, needsFlipY(image));\n\n        /* Required because the image isn't a resource by itself, but will eventually be one. */\n        const index = wasm._wl_texture_create(imageIndex);\n\n        const instance = new Texture(this.engine, index);\n        this._cache[instance.index] = instance;\n\n        return instance;\n    }\n\n    /**\n     * Load an image from URL as {@link Texture}.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const texture = await engine.textures.load('my-image.png');\n     * ```\n     *\n     * @param filename URL to load from.\n     * @param crossOrigin Cross origin flag for the image object.\n     * @returns Loaded texture.\n     */\n    load(filename: string, crossOrigin?: string): Promise<Texture> {\n        let image = new Image();\n        image.crossOrigin = crossOrigin ?? image.crossOrigin;\n        image.src = filename;\n        return new Promise((resolve, reject) => {\n            image.onload = () => {\n                resolve(this.create(image));\n            };\n            image.onerror = function () {\n                reject('Failed to load image. Not found or no read access');\n            };\n        });\n    }\n}\n", "import {WASM} from './wasm.js';\nimport {Scene} from './scene.js';\n\nimport {Emitter, RetainEmitter} from './utils/event.js';\nimport {WonderlandEngine} from './engine.js';\nimport {InputType, ViewComponent} from './wonderland.js';\n\ntype WebXRFramebuffer = WebGLFramebuffer & {name: number};\ntype WebXRTexture = WebGLTexture & {name: number};\n\n/**\n * Options for {@link LoadRuntimeOptions.xrOfferSession}\n *\n * @since 1.1.5\n */\nexport interface XROfferSessionOptions {\n    /**\n     * Mode to offer XR session with. If set to `'auto'`, offers a session\n     * with the first supported mode in the following order:\n     * - VR\n     * - AR\n     * - inline\n     */\n    mode: XRSessionMode | 'auto';\n    /** Required features for the offered XR session */\n    features: string[];\n    /** Optional features for the offered XR session */\n    optionalFeatures: string[];\n}\n\n/** Properties of a WebXR session */\nexport class XRSessionState {\n    /** Wonderland WASM bridge. @hidden */\n    readonly #webxr: WebXR;\n\n    /** Current WebXR session mode */\n    sessionMode: XRSessionMode;\n\n    /** Current WebXR session */\n    session: XRSession;\n\n    /** Current WebXR frame */\n    frame: XRFrame | null = null;\n\n    /**\n     * Constructor.\n     *\n     * @param wasm Wasm bridge instance\n     * @param mode Current XR session mode\n     *\n     * @hidden\n     */\n    constructor(webxr: WebXR, mode: XRSessionMode, session: XRSession) {\n        this.#webxr = webxr;\n        this.sessionMode = mode;\n        this.session = session;\n    }\n\n    /** @overload */\n    referenceSpaceForType(type: 'viewer'): XRReferenceSpace;\n    /**\n     * Get a WebXR reference space of a given reference space type.\n     *\n     * @param type Type of reference space to get\n     * @returns Reference space, or `null` if there's no reference space\n     *     of the requested type available\n     */\n    referenceSpaceForType(type: XRReferenceSpaceType): XRReferenceSpace | null;\n    referenceSpaceForType(type: XRReferenceSpaceType): XRReferenceSpace | null {\n        return this.#webxr.referenceSpaceForType(type);\n    }\n\n    /** Set current reference space type used for retrieving eye, head, hand and joint poses */\n    set currentReferenceSpace(refSpace: XRReferenceSpace) {\n        this.#webxr.currentReferenceSpace = refSpace;\n    }\n\n    /** Current reference space type used for retrieving eye, head, hand and joint poses */\n    get currentReferenceSpace(): XRReferenceSpace {\n        return this.#webxr.currentReferenceSpace;\n    }\n\n    /** Current WebXR reference space type or `null` if not a default reference space */\n    get currentReferenceSpaceType(): XRReferenceSpaceType {\n        return this.#webxr.currentReferenceSpaceType;\n    }\n\n    /** Current WebXR base layer  */\n    get baseLayer(): XRProjectionLayer | XRWebGLLayer {\n        return this.#webxr.baseLayer!;\n    }\n\n    /** Current WebXR framebuffer */\n    get framebuffers(): WebGLFramebuffer[] {\n        return this.#webxr.framebuffers;\n    }\n}\n\n/**\n * WebXR API (internal)\n *\n * @hidden\n */\nexport class WebXR {\n    /** Wonderland WASM bridge. @hidden */\n    readonly #wasm: WASM;\n\n    readonly engine: WonderlandEngine;\n\n    sessionState: XRSessionState | null = null;\n\n    colorFormat: number = 0x8058 /* RGBA8 */;\n    depthFormat: number = 0x88f0 /* DEPTH24_STENCIL8 */;\n    textureType: XRTextureType = 'texture';\n\n    /**\n     * {@link Emitter} for WebXR session end events.\n     */\n    readonly onSessionEnd = new Emitter();\n\n    /**\n     * {@link RetainEmitter} for WebXR session start events.\n     */\n    readonly onSessionStart: Emitter<[XRSession, XRSessionMode]> = new RetainEmitter<\n        [XRSession, XRSessionMode]\n    >();\n\n    /**\n     * {@link Emitter} notified before the first update and rendering on the first frame of a new XR session.\n     */\n    readonly onSessionFirstFrame: Emitter<[XRSession, XRSessionMode]> = new Emitter<\n        [XRSession, XRSessionMode]\n    >();\n\n    /** Whether AR is supported by the browser. */\n    arSupported: boolean = false;\n\n    /** Whether VR is supported by the browser. */\n    vrSupported: boolean = false;\n\n    /**\n     * Current WebXR base layer or `null` if no session active.\n     */\n    baseLayer: XRProjectionLayer | XRWebGLLayer | null = null;\n\n    /** WebXR framebuffer scale factor. */\n    framebufferScaleFactor: number = 1.0;\n\n    private _webglBinding: XRWebGLBinding | null = null;\n\n    private _initXR: boolean = false;\n    private _inXR: boolean = false;\n\n    /** WebXR reference spaces. */\n    private _refSpaces: Record<XRReferenceSpaceType, XRReferenceSpace | undefined> = {\n        'viewer': undefined,\n        'local': undefined,\n        'local-floor': undefined,\n        'bounded-floor': undefined,\n        'unbounded': undefined,\n    };\n\n    /** Current WebXR reference space. */\n    private _refSpace: XRReferenceSpace | null = null;\n\n    /** Current WebXR reference space type. */\n    private _refSpaceType: XRReferenceSpaceType | null = null;\n\n    /**\n     * Emscripten WebXR framebuffer(s).\n     *\n     * @note fbo will not get overwritten if we are rendering to the\n     * default framebuffer, e.g., when using WebXR emulator.\n     */\n    private _fbo: number | number[] = 0;\n\n    private _allowLayers: boolean = false;\n    private _requestAnimationFrameId: any = null;\n\n    /**\n     * Initial WebXR reference space type. See {@link init} for\n     * more information.\n     */\n    private _initialReferenceSpaceType: XRReferenceSpaceType | null = null;\n\n    private _tempPosition: Float32Array = new Float32Array(3);\n    private _tempRotation: Float32Array = new Float32Array(4);\n\n    private _tempPose(transform: XRRigidTransform) {\n        const p = transform.position;\n        this._tempPosition[0] = p.x;\n        this._tempPosition[1] = p.y;\n        this._tempPosition[2] = p.z;\n        const o = transform.orientation;\n        this._tempRotation[0] = o.x;\n        this._tempRotation[1] = o.y;\n        this._tempRotation[2] = o.z;\n        this._tempRotation[3] = o.w;\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param engine Engine\n     *\n     * @hidden\n     */\n    constructor(engine: WonderlandEngine) {\n        this.engine = engine;\n        this.#wasm = engine.wasm;\n    }\n\n    /**\n     * Check whether XR is supported and store the result in {@link arSupported} and {@link vrSupported}\n     */\n    checkXRSupport(): Promise<boolean> {\n        if (typeof navigator === 'undefined') {\n            return Promise.resolve(false);\n        }\n        if (!navigator.xr) {\n            const isLocalhost =\n                location.hostname === 'localhost' || location.hostname === '127.0.0.1';\n            const missingHTTPS = location.protocol !== 'https:' && !isLocalhost;\n            console.warn(\n                missingHTTPS\n                    ? 'WebXR is only supported with HTTPS or on localhost!'\n                    : 'WebXR unsupported in this browser.'\n            );\n            return Promise.resolve(false);\n        }\n        /* Those can throw if the application is embedded in an iframe without\n         * xr-spatial-tracking permission. navigator.xr will be available, but\n         * any access of it will throw. */\n        const vrPromise = navigator.xr\n            .isSessionSupported('immersive-vr')\n            .then((supported) => (this.vrSupported = supported))\n            .catch(() => (this.vrSupported = false));\n        const arPromise = navigator.xr\n            .isSessionSupported('immersive-ar')\n            .then((supported) => (this.arSupported = supported))\n            .catch(() => (this.arSupported = false));\n\n        return Promise.all([vrPromise, arPromise]).then(\n            () => this.vrSupported || this.arSupported\n        );\n    }\n\n    /**\n     * Initialize WebXR.\n     *\n     * @hidden\n     */\n    async init(\n        framebufferScaleFactor: number,\n        offerSessionOptions: XROfferSessionOptions | null\n    ) {\n        const supported = await this.checkXRSupport();\n        if (!supported) return;\n\n        this.framebufferScaleFactor = framebufferScaleFactor;\n\n        /* Force the reference space to 'local'/'viewer' for the loading screen\n         * to make sure the head input is at the origin. Doing it this way to\n         * avoid adding JS components to the loading screen. */\n        const onXRStart = () => {\n            this._initialReferenceSpaceType = this.currentReferenceSpaceType;\n            const newSpace = this._refSpaces['local'] ?? this._refSpaces['viewer']!;\n            this.currentReferenceSpace = newSpace;\n        };\n\n        /* Not once() because the user can enter and exit XR several times\n         * during a long loading screen */\n        this.onSessionStart.add(onXRStart);\n\n        /* This is called before all init()/start()/onActivate() so we avoid\n         * overwriting a user-set reference space */\n        this.engine.onLoadingScreenEnd.once(() => {\n            this.onSessionStart.remove(onXRStart);\n\n            if (!this._initialReferenceSpaceType) return;\n\n            this.currentReferenceSpace =\n                this._refSpaces[this._initialReferenceSpaceType] ??\n                this._refSpaces['viewer']!;\n            this._initialReferenceSpaceType = null;\n        });\n\n        if (offerSessionOptions !== null) {\n            let mode = offerSessionOptions.mode;\n            if (mode == 'auto') {\n                if (this.vrSupported) {\n                    mode = 'immersive-vr';\n                } else if (this.arSupported) {\n                    mode = 'immersive-ar';\n                } else {\n                    mode = 'inline';\n                }\n            }\n\n            const offerSession = () => {\n                this.offerSession(\n                    mode as XRSessionMode,\n                    offerSessionOptions.features,\n                    offerSessionOptions.optionalFeatures\n                )\n                    .then(\n                        /* When the session ends, offer to start a new one again */\n                        (s) => s.addEventListener('end', offerSession)\n                    )\n                    /* The browser may not suppoer offer session, or a previous request\n                     * was replaced by a new one. Not crucial, but inform the user. */\n                    .catch(console.warn);\n            };\n\n            offerSession();\n        }\n    }\n\n    /** Get a WebXR reference space of a given reference space type. */\n    referenceSpaceForType(type: XRReferenceSpaceType): XRReferenceSpace | null {\n        return this._refSpaces[type] ?? null;\n    }\n\n    /** Set current reference space type used for retrieving eye, head, hand and joint poses */\n    set currentReferenceSpace(refSpace: XRReferenceSpace) {\n        this._refSpace! = refSpace;\n\n        this._refSpaceType = null;\n        for (const type of Object.keys(this._refSpaces) as XRReferenceSpaceType[]) {\n            if (this._refSpaces[type] === refSpace) {\n                /* Keep track of reference space type */\n                this._refSpaceType = type;\n            }\n        }\n    }\n\n    /** Current reference space type used for retrieving eye, head, hand and joint poses */\n    get currentReferenceSpace(): XRReferenceSpace {\n        return this._refSpace!;\n    }\n\n    /** Current WebXR reference space type or `null` if not a default reference space */\n    get currentReferenceSpaceType(): XRReferenceSpaceType {\n        return this._refSpaceType!;\n    }\n\n    /** Current WebXR framebuffer */\n    get framebuffers(): WebGLFramebuffer[] {\n        if (!Array.isArray(this._fbo)) {\n            return [this.#wasm.GL.framebuffers[this._fbo]];\n        }\n        return this._fbo.map((id) => this.#wasm.GL.framebuffers[id]);\n    }\n\n    /**\n     * Set main/left/right eye view active according to XR mode.\n     *\n     * If @param inXR is `true`, disables the main view and enables the left and\n     * right view. Otherwise, enables the main view and disables the left and\n     * right view.\n     *\n     * @param inXR Whether an XR session is currently active\n     */\n    updateViewState(inXR: boolean | undefined) {\n        const scene: Scene = this.engine.scene;\n\n        inXR = inXR ?? this._inXR;\n\n        if (scene.mainView) {\n            scene.mainView.active = !inXR;\n        }\n\n        if (scene.leftEyeView && scene.rightEyeView) {\n            /** We always have either no left/right eye views or both. Always enable\n             * both since we can't know if this is single-view AR until we get the\n             * view count in {@link nextFrame}. There the right eye view is\n             * disabled if necessary. */\n            scene.leftEyeView.active = inXR;\n            scene.rightEyeView.active = inXR;\n        }\n    }\n\n    /**\n     * Set projection matrix parameters for the webxr session.\n     *\n     * @param near Distance of near clipping plane\n     * @param far Distance of far clipping plane\n     */\n    updateProjectionParams(near: number | undefined, far: number | undefined) {\n        if (!this.sessionState) return;\n\n        const scene = this.engine.scene;\n        near ??= scene.leftEyeView!.near;\n        far ??= scene.leftEyeView!.far;\n\n        /* If reverse-Z is enabled, we need to give WebXR swapped near and far\n         * planes so it generates the correct projection matrices. This is\n         * explicitly supported by the spec. */\n        const reverseZ = !!this.engine.isReverseZEnabled;\n\n        this.sessionState!.session.updateRenderState({\n            depthNear: reverseZ ? far : near,\n            depthFar: reverseZ ? near : far,\n        });\n    }\n\n    /**\n     * Request an XR session.\n     *\n     * @note Please use this call instead of directly calling `navigator.xr.requestSession()`.\n     * Wonderland Engine requires to be aware that a session is started, and this\n     * is done through this call.\n     *\n     * @param mode The XR mode.\n     * @param features An array of required features, e.g., `['local-floor', 'hit-test']`.\n     * @param optionalFeatures An array of optional features, e.g., `['bounded-floor', 'depth-sensing']`.\n     * @returns A promise resolving with the `XRSession`, a string error message otherwise.\n     */\n    requestSession(\n        mode: XRSessionMode,\n        features: string[],\n        optionalFeatures: string[] = []\n    ): Promise<XRSession> {\n        const options = this.sessionOptions(features, optionalFeatures);\n        return navigator.xr!.requestSession(mode, options).then(async (s) => {\n            /* Ensure our context can handle WebXR rendering */\n            const gl = this.engine.canvas.getContext('webgl2')!;\n            await gl.makeXRCompatible();\n            this.startSession(s, mode);\n            return s;\n        });\n    }\n\n    /**\n     * Offer an XR session.\n     *\n     * Adds an interactive UI element to the browser interface to start an XR\n     * session. Browser support is optional, so it's advised to still allow\n     * requesting a session with a UI element on the website itself.\n     *\n     * @note Please use this call instead of directly calling `navigator.xr.offerSession()`.\n     * Wonderland Engine requires to be aware that a session is started, and this\n     * is done through this call.\n     *\n     * @param mode The XR mode.\n     * @param features An array of required features, e.g., `['local-floor', 'hit-test']`.\n     * @param optionalFeatures An array of optional features, e.g., `['bounded-floor', 'depth-sensing']`.\n     * @returns A promise resolving with the `XRSession`, a string error message otherwise.\n     *\n     * @since 1.1.5\n     */\n    offerSession(\n        mode: XRSessionMode,\n        features: string[],\n        optionalFeatures: string[] = []\n    ): Promise<XRSession> {\n        /* @ts-ignore */\n        if (!navigator.xr!.offerSession) {\n            return Promise.reject('WebXR offerSession() unsupported in this browser.');\n        }\n        const options = this.sessionOptions(features, optionalFeatures);\n        /* @ts-ignore */\n        return navigator.xr!.offerSession(mode, options).then(async (s) => {\n            /* Ensure our context can handle WebXR rendering */\n            const gl = this.engine.canvas.getContext('webgl2')!;\n            await gl.makeXRCompatible();\n            this.startSession(s, mode);\n            return s;\n        });\n    }\n\n    async startSession(session: XRSession, mode: XRSessionMode) {\n        /* Multiple calls to requestSession will result in the existing\n         * session being passed to the callback */\n        if (session == this.sessionState?.session) return;\n        this.sessionState = new XRSessionState(this, mode, session);\n\n        /* React to session ending */\n        session.addEventListener('end', () => {\n            this.endSession();\n        });\n\n        const gl = this.engine.canvas.getContext('webgl2')!;\n\n        /* Create the base layer */\n        let binding = null;\n        const isEmulator = 'CustomWebXRPolyfill' in window;\n        /* The WebXR emulator doesn't support layers, and will\n         * simply throw an exception. Only way of checking seems\n         * to be whether the custom polyfill is available */\n        if (!isEmulator && 'XRWebGLBinding' in window) {\n            binding = this._webglBinding = new XRWebGLBinding(session, gl);\n        }\n        const useLayers = this._allowLayers && binding;\n        if (useLayers) {\n            /* Use WebXR Layers */\n            const layer = (this.baseLayer = binding!.createProjectionLayer({\n                scaleFactor: this.framebufferScaleFactor,\n                colorFormat: this.colorFormat,\n                depthFormat: this.depthFormat,\n                /* Always use 'texture-array' with multiview, otherwise default to it\n                 * if not set otherwise */\n                textureType: !this.textureType ? 'texture-array' : this.textureType,\n            }));\n            session.updateRenderState({layers: [layer]});\n        } else {\n            const layer = (this.baseLayer = new XRWebGLLayer(session, gl, {\n                framebufferScaleFactor: this.framebufferScaleFactor,\n            }));\n            session.updateRenderState({baseLayer: layer});\n        }\n\n        /* Request and cache available spaces. 'viewer' is always available. */\n        const promises = [];\n        for (const type of Object.keys(this._refSpaces) as XRReferenceSpaceType[]) {\n            promises.push(\n                session.requestReferenceSpace(type).then((refSpace) => {\n                    this._refSpaces[type] = refSpace;\n                    return refSpace;\n                })\n            );\n        }\n\n        await Promise.allSettled(promises).then((results) => {\n            /* We prefer the reference space automatically in above order */\n            for (let i = results.length - 1; i >= 0; --i) {\n                const result = results[i];\n                if (result.status === 'rejected') continue;\n                /* Type is kept track of for the user to test against */\n                this._refSpaceType = Object.keys(this._refSpaces)[\n                    i\n                ] as XRReferenceSpaceType;\n                this._refSpace = result.value;\n                break;\n            }\n        });\n\n        const isVR = mode == 'immersive-vr';\n\n        const scene: Scene = this.engine.scene;\n\n        if (isVR && (!scene.leftEyeView || !scene.rightEyeView)) {\n            console.error(\n                `sessionStart(): VR sessions require 1 classic view, a left and a right view`\n            );\n            return;\n        }\n\n        this.updateViewState(true);\n\n        this.updateProjectionParams(undefined, undefined);\n\n        this.onSessionStart.notify(session, this.sessionState!.sessionMode);\n\n        this.#wasm._wl_reset_context();\n\n        console.log(`WebXR ${isVR ? 'VR' : 'AR'} session started`);\n\n        this.sessionState.session.addEventListener('visibilitychange', (event) => {\n            switch (event.session.visibilityState) {\n                case 'visible':\n                    this.#wasm._wl_xr_focus();\n                case 'visible-blurred':\n                    this.#wasm._wl_xr_blur();\n                case 'hidden':\n                    this.#wasm._wl_xr_hide();\n            }\n        });\n\n        /* Wait until first frame to call _wl_xr_init() */\n        this._initXR = true;\n\n        this._requestAnimationFrameId = session.requestAnimationFrame(\n            useLayers ? this.nextFrameLayers.bind(this) : this.nextFrameSingle.bind(this)\n        );\n    }\n\n    sessionOptions(\n        requiredFeatures: string[],\n        optionalFeatures: string[] = []\n    ): XRSessionInit {\n        if (this._allowLayers && !optionalFeatures.includes('layers')) {\n            optionalFeatures.push('layers');\n        }\n\n        const params: XRSessionInit = {\n            requiredFeatures,\n            optionalFeatures,\n        };\n\n        const hasDepthSensing =\n            requiredFeatures.includes('depth-sensing') ||\n            optionalFeatures.includes('depth-sensing');\n        if (hasDepthSensing) {\n            params.depthSensing = {\n                usagePreference: ['gpu-optimized', 'cpu-optimized'],\n                dataFormatPreference: ['float32', 'luminance-alpha'],\n            };\n        }\n        return params;\n    }\n\n    endSession() {\n        this.sessionState!.session.cancelAnimationFrame(this._requestAnimationFrameId);\n        this._requestAnimationFrameId = null;\n        this.sessionState = null;\n\n        this.#wasm._wl_reset_context();\n\n        if (this.onSessionStart instanceof RetainEmitter) this.onSessionStart.reset();\n        this.onSessionEnd.notify();\n\n        console.log('WebXR session ended');\n\n        this._inXR = false;\n\n        this.updateViewState(false);\n\n        const scene: Scene = this.engine.scene;\n\n        this.#wasm._wl_xr_exit();\n\n        /* Restore projection matrices. They are temporarily overridden in XR and\n         * view changes are applied when the session ends. */\n        scene.leftEyeView!._generateProjectionMatrix();\n        scene.rightEyeView!._generateProjectionMatrix();\n\n        /* Meta WebXR emulator doesn't request animation frame. Quest does. */\n        this.#wasm._wl_application_redraw();\n    }\n\n    nextFrame(time: number, frame: XRFrame) {\n        this.sessionState!.frame = frame;\n\n        const session = frame.session;\n\n        const pose = frame.getViewerPose(this._refSpace!);\n        if (!pose) return;\n\n        const scene: Scene = this.engine.scene;\n\n        if (this._initXR) {\n            /* There's no way to tell how many views we have before rendering the first frame,\n             * and AR is not a sufficient criteria for one eye (mobile AR, AR headsets) */\n            scene.rightEyeView!.active = pose.views.length > 1;\n\n            this.#wasm._wl_xr_init(pose.views.length, !this.baseLayer);\n            this._initXR = false;\n            this._inXR = true;\n\n            this.onSessionFirstFrame.notify(session, this.sessionState!.sessionMode);\n        }\n\n        /* Head transformation */\n        this._tempPose(pose.transform);\n        scene._setInputTransformation(\n            InputType.Head,\n            this._tempPosition,\n            this._tempRotation\n        );\n\n        /* Eyes transformations */\n        for (let i = 0; i < pose.views.length && i < 2; ++i) {\n            const view = pose.views[i];\n            const viewIndex = view.eye == 'right' ? 1 : 0;\n            this._tempPose(view.transform);\n            scene._setInputTransformation(\n                InputType.EyeLeft + viewIndex,\n                this._tempPosition,\n                this._tempRotation\n            );\n        }\n\n        /* Controller transformations */\n        for (const inputSource of session.inputSources) {\n            let handedness = -1;\n            if (inputSource.handedness == 'left') handedness = 0;\n            else if (inputSource.handedness == 'right') handedness = 1;\n            this._updateInputComponent(\n                frame,\n                inputSource.gripSpace,\n                InputType.ControllerLeft + handedness\n            );\n            this._updateInputComponent(\n                frame,\n                inputSource.targetRaySpace,\n                InputType.RayLeft + handedness\n            );\n        }\n\n        this.#wasm._wl_nextFrame(0);\n    }\n\n    nextFrameSingle(time: number, frame: XRFrame) {\n        const session = frame.session;\n        /* Request next frame */\n        if (this.sessionState != null) {\n            this._requestAnimationFrameId = session.requestAnimationFrame(\n                this.nextFrameSingle.bind(this)\n            );\n        }\n\n        const pose = frame.getViewerPose(this._refSpace!);\n        if (!pose) return;\n\n        const gl = this.engine.canvas.getContext('webgl2')!;\n        const GL = this.#wasm.GL as any;\n\n        /* If framebuffer is non-null, compositor is enabled and we bind it.\n         * If it's null, we need to avoid this call otherwise the canvas FBO is bound */\n        const glLayer = session.renderState.baseLayer!;\n        if (glLayer.framebuffer) {\n            /* Make sure that FRAMEBUFFER_BINDING returns a valid value.\n             * For that we create an id in the emscripten object tables\n             * and add the framebuffer */\n            const id = this._fbo || GL.getNewId(GL.framebuffers);\n            (glLayer.framebuffer as WebXRFramebuffer).name = id;\n            GL.framebuffers[id] = glLayer.framebuffer;\n            this._fbo = id;\n            gl.bindFramebuffer(gl.FRAMEBUFFER, GL.framebuffers[id]);\n        }\n\n        for (let i = 0; i < pose.views.length; ++i) {\n            const view = pose.views[i];\n            const viewport = glLayer.getViewport(view)!;\n\n            let destView: ViewComponent;\n            if (view.eye == 'left') {\n                destView = this.engine.scene.leftEyeView!;\n            } else if (view.eye == 'right') {\n                destView = this.engine.scene.rightEyeView!;\n            } else {\n                destView = this.engine.scene._components.componentAt(ViewComponent, i);\n            }\n            destView._setViewport(viewport.x, viewport.y, viewport.width, viewport.height);\n            destView._setProjectionMatrix(view.projectionMatrix);\n            /* Patch projection matrix, currently only needed for reverse-Z.\n             * If reverse-Z is enabled, we pass swapped near and far values to\n             * updateRenderState(), giving us a matrix with inverted depth. But\n             * we still need to map from NDC 1,-1 to 1,0. On WebGPU this won't\n             * be necessary. */\n            const ndcDepthIsZeroToOne = false;\n            this.#wasm._wl_view_component_remapProjectionMatrix(\n                destView._id,\n                this.engine.isReverseZEnabled,\n                ndcDepthIsZeroToOne\n            );\n            this.#wasm._wl_view_component_set_externalFramebuffer(\n                destView._id,\n                this._fbo as number\n            );\n        }\n\n        this.nextFrame(time, frame);\n    }\n\n    nextFrameLayers(time: number, frame: XRFrame) {\n        const session = frame.session;\n        /* Request next frame */\n        if (this.sessionState != null) {\n            this._requestAnimationFrameId = session.requestAnimationFrame(\n                this.nextFrameLayers.bind(this)\n            );\n        }\n\n        const scene: Scene = this.engine.scene;\n\n        const pose = frame.getViewerPose(this._refSpace!)!;\n\n        const layer = <XRProjectionLayer>this.baseLayer!;\n        const binding = this._webglBinding;\n\n        /* Make sure that FRAMEBUFFER_BINDING returns a valid value.\n         * For that we create an id in the emscripten object tables\n         * and add the framebuffer */\n        const gl = this.engine.canvas.getContext('webgl2')!;\n        const GL = this.#wasm.GL as any;\n\n        const createFramebuffer = !this._fbo;\n        const textureArray = layer.textureArrayLength == 2;\n\n        if (createFramebuffer) {\n            if (textureArray) {\n                this._fbo = [GL.getNewId(GL.framebuffers), GL.getNewId(GL.framebuffers)];\n            } else {\n                /* Both eyes use the same FBO */\n                const id = GL.getNewId(GL.framebuffers);\n                this._fbo = [id, id];\n            }\n            this._fbo.forEach((id) => {\n                const framebuffer = gl.createFramebuffer() as WebXRFramebuffer;\n                GL.framebuffers[id] = framebuffer;\n                framebuffer.name = id;\n            });\n        }\n\n        const ids = this._fbo as number[];\n        pose.views.forEach((view) => {\n            const viewIndex = view.eye == 'right' ? 1 : 0;\n\n            const subImage = binding!.getViewSubImage(layer, view);\n            const viewport = subImage.viewport;\n\n            let destView: ViewComponent;\n            if (view.eye == 'right') {\n                destView = this.engine.scene.rightEyeView!;\n            } else {\n                destView = this.engine.scene.leftEyeView!;\n            }\n            destView._setViewport(viewport.x, viewport.y, viewport.width, viewport.height);\n            destView._setProjectionMatrix(view.projectionMatrix);\n            const ndcDepthIsZeroToOne = false;\n            this.#wasm._wl_view_component_remapProjectionMatrix(\n                destView._id,\n                this.engine.isReverseZEnabled,\n                ndcDepthIsZeroToOne\n            );\n            this.#wasm._wl_view_component_set_externalFramebuffer(\n                destView._id,\n                ids[viewIndex]\n            );\n\n            if (!createFramebuffer) return;\n            /* Only needs to be done for the first view on when using side-by-side\n             * target texture */\n            if (!textureArray && viewIndex != 0) return;\n\n            /* Make WebXR API created textures known to emscripten */\n            const colorTexture = subImage.colorTexture as WebXRTexture;\n            const colorImageId = (colorTexture.name =\n                colorTexture.name || GL.getNewId(GL.textures));\n            GL.textures[colorImageId] = colorTexture;\n\n            const depthStencilTexture = subImage.depthStencilTexture as WebXRTexture;\n            const depthStencilImageId = (depthStencilTexture.name =\n                depthStencilTexture.name || GL.getNewId(GL.textures));\n            GL.textures[depthStencilImageId] = depthStencilTexture;\n\n            /* Attach textures to framebuffer */\n            gl.bindFramebuffer(gl.FRAMEBUFFER, GL.framebuffers[ids[viewIndex]]);\n\n            if (textureArray) {\n                /* @ts-ignore */\n                gl.framebufferTextureLayer(\n                    gl.FRAMEBUFFER,\n                    gl.COLOR_ATTACHMENT0,\n                    subImage.colorTexture,\n                    0,\n                    subImage.imageIndex\n                );\n                /* @ts-ignore */\n                gl.framebufferTextureLayer(\n                    gl.FRAMEBUFFER,\n                    gl.DEPTH_STENCIL_ATTACHMENT,\n                    subImage.depthStencilTexture,\n                    0,\n                    subImage.imageIndex\n                );\n            } else {\n                gl.framebufferTexture2D(\n                    gl.FRAMEBUFFER,\n                    gl.COLOR_ATTACHMENT0,\n                    gl.TEXTURE_2D,\n                    subImage.colorTexture,\n                    0\n                );\n                gl.framebufferTexture2D(\n                    gl.FRAMEBUFFER,\n                    gl.DEPTH_STENCIL_ATTACHMENT,\n                    gl.TEXTURE_2D,\n                    subImage.depthStencilTexture,\n                    0\n                );\n            }\n\n            if (!gl.checkFramebufferStatus(gl.FRAMEBUFFER)) {\n                console.error('Target framebuffer for', view.eye, 'eye is incomplete.');\n            }\n        });\n\n        this.nextFrame(time, frame);\n    }\n\n    private _updateInputComponent(\n        frame: XRFrame,\n        space: XRSpace | undefined,\n        inputType: InputType\n    ) {\n        if (!space) return;\n        const pose = frame.getPose(space, this._refSpace!);\n        if (!pose || Number.isNaN(pose.transform.matrix[0])) return;\n        this._tempPose(pose.transform);\n        this.engine.scene._setInputTransformation(\n            inputType,\n            this._tempPosition,\n            this._tempRotation\n        );\n    }\n}\n", "import {WonderlandEngine} from './engine.js';\nimport {InstantiateGltfResult, Scene} from './scene.js';\nimport {Prefab} from './prefab.js';\nimport {Object3D} from './wonderland.js';\n\n/** GLTF-specific loading options. */\nexport type GLTFOptions = {\n    /** If `true`, extensions will be parsed. */\n    extensions?: boolean;\n};\n\n/**\n * Extension data obtained from glTF files.\n */\nexport interface GLTFExtensionsInstance {\n    /**\n     * Mesh extension objects. Key is {@link Object3D.objectId}, value is JSON\n     * data indexed by extension name.\n     */\n    mesh: Record<number, Record<string, Record<string, any>>>;\n    /**\n     * Node extension objects. Key is {@link Object3D.objectId}, value is JSON\n     * data indexed by extension name.\n     */\n    node: Record<number, Record<string, Record<string, any>>>;\n    /** Remapping from glTF node index to {@link Object3D.objectId}. */\n    idMapping: number[];\n}\n\nexport class GLTFExtensions {\n    objectCount: number;\n    /** glTF root extensions object. JSON data indexed by extension name. */\n    root: Record<string, any> = {};\n    /**\n     * Mesh extension objects. Key is the gltf index, value is JSON\n     * data indexed by extension name.\n     */\n    mesh: Record<number, Record<string, any>> = {};\n    /**\n     * Node extension objects. Key is a glTF index, value is JSON\n     * data indexed by extension name.\n     */\n    node: Record<number, Record<string, any>> = {};\n\n    constructor(count: number) {\n        this.objectCount = count;\n    }\n}\n\n/**\n * glTF scene.\n *\n * At the opposite of {@link Scene}, glTF scenes can be instantiated\n * in other scenes but can't:\n * - Be activated\n * - Be the destination of an instantiation\n *\n * #### Usage\n *\n * ```js\n * const prefab = await engine.loadGLTF('Zombie.glb');\n *\n * const scene = engine.scene;\n * for (let i = 0; i < 100; ++i) {\n *     scene.instantiate(prefab);\n * }\n * ```\n *\n * Since this class inherits from {@link Prefab}, you can use the shared\n * API to modify the glTF before an instantiation:\n *\n * ```js\n * const prefab = await engine.loadGLTF('Zombie.glb');\n * const zombie = prefab.findByName('Zombie')[0];\n *\n * // The mesh is too small, we scale the root\n * zombie.setScalingWorld([2, 2, 2]);\n * // Add a custom js 'health' component to the root\n * zombie.addComponent('health', {value: 100});\n *\n * // 'Zombie' is wrapped in a new root added during instantiation\n * const {root} = engine.scene.instantiate(prefab);\n * const instanceZombie = root.children[0];\n * console.log(instanceZombie.getScalingWorld()); // Prints '[2, 2, 2]'\n * ```\n *\n * @category scene\n * @since 1.2.0\n */\nexport class PrefabGLTF extends Prefab {\n    /**\n     * Raw extensions read from the glTF file.\n     *\n     * The extensions will be mapped to the hierarchy upon instantiation.\n     * For more information, have a look at the {@link InstantiateGltfResult} type.\n     *\n     * @note The glTF must be loaded with `extensions` enabled. If not, this\n     * field will be set to `null`. For more information, have a look at the\n     * {@link GLTFOptions} type.\n     */\n    extensions: GLTFExtensions | null = null;\n\n    /**\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    constructor(engine: WonderlandEngine, index: number) {\n        super(engine, index);\n        this.extensions = this._readExtensions();\n    }\n\n    /**\n     * Instantiate the glTF extensions on an active sub scene graph.\n     *\n     * @param id The root object id.\n     * @param result The instantiation object result.\n     *\n     * @hidden\n     */\n    _processInstantiaton(dest: Prefab, root: Object3D, result: InstantiateGltfResult) {\n        if (!this.extensions) return null;\n\n        const wasm = this.engine.wasm;\n\n        const count = this.extensions.objectCount;\n        const idMapping: number[] = new Array(count);\n\n        /** @todo: We need some check to ensure that the gltf layout didn't change to retarget extensions.\n         * At least a simple scene graph size check should be required to avoid a segfault. */\n\n        const activeRootIndex = wasm._wl_object_index(root._id);\n        for (let i = 0; i < count; ++i) {\n            const mappedId = wasm._wl_glTF_scene_extensions_gltfIndex_to_id(\n                this._index,\n                dest._index,\n                activeRootIndex,\n                i\n            );\n            idMapping[i] = mappedId;\n        }\n\n        const remapped: GLTFExtensionsInstance = {\n            mesh: {},\n            node: {},\n            idMapping,\n        };\n\n        for (const gltfIndex in this.extensions.mesh) {\n            const id = idMapping[gltfIndex];\n            remapped.mesh[id] = this.extensions.mesh[gltfIndex];\n        }\n        for (const gltfIndex in this.extensions.node) {\n            const id = idMapping[gltfIndex];\n            remapped.node[id] = this.extensions.node[gltfIndex];\n        }\n\n        result.extensions = remapped;\n    }\n\n    /**\n     * Unmarshalls gltf extensions.\n     *\n     * @hidden\n     */\n    private _readExtensions() {\n        const wasm = this.engine.wasm;\n\n        const ptr = wasm._wl_glTF_scene_get_extensions(this._index);\n        if (!ptr) return null;\n\n        let index = ptr / 4;\n        const data = wasm.HEAPU32;\n        const readString = () => {\n            const strPtr = data[index++];\n            const strLen = data[index++];\n            return wasm.UTF8ViewToString(strPtr, strPtr + strLen);\n        };\n\n        const objectCount = data[index++];\n        const extensions = new GLTFExtensions(objectCount);\n\n        const meshExtensionsSize = data[index++];\n        for (let i = 0; i < meshExtensionsSize; ++i) {\n            const objectId = data[index++];\n            extensions.mesh[objectId] = JSON.parse(readString());\n        }\n        const nodeExtensionsSize = data[index++];\n        for (let i = 0; i < nodeExtensionsSize; ++i) {\n            const objectId = data[index++];\n            extensions.node[objectId] = JSON.parse(readString());\n        }\n        const rootExtensionsStr = readString();\n        if (rootExtensionsStr) {\n            extensions.root = JSON.parse(rootExtensionsStr);\n        }\n\n        return extensions;\n    }\n}\n", "import {WonderlandEngine} from './engine.js';\nimport {WASM} from './wasm.js';\nimport {Emitter} from './utils/event.js';\nimport {fetchStreamWithProgress, fetchWithProgress, getBaseUrl} from './utils/fetch.js';\nimport {isString} from './utils/object.js';\nimport {\n    Object3D,\n    RayHit,\n    Environment,\n    ViewComponent,\n    InputType,\n    LogTag,\n    Component,\n} from './wonderland.js';\nimport {NumberArray} from './types.js';\nimport {Material} from './resources/material-manager.js';\nimport {InMemoryLoadOptions, Prefab, SceneLoadOptions} from './prefab.js';\nimport {GLTFExtensionsInstance, PrefabGLTF} from './scene-gltf.js';\n\nexport interface InstantiateResult {\n    root: Object3D;\n}\n\nexport interface InstantiateGltfResult extends InstantiateResult {\n    extensions: GLTFExtensionsInstance | null;\n}\n\n/** Options for scene activation. */\nexport interface ActivateOptions {\n    /** If `true`, dispatches a ready event in the document. */\n    dispatchReadyEvent?: boolean;\n    /**\n     * If `true`, the promise will resolve only once all dependencies are downloaded.\n     *\n     * If `false`, resolves as soon as possible, e.g., when the lowest\n     * resolution textures are available.\n     */\n    waitForDependencies?: boolean;\n    /** @hidden */\n    legacyLoaded?: boolean;\n}\n\n/**\n * Legacy gltf extension type.\n *\n * @deprecated Use the new {@link WonderlandEngine.loadGLTF} API.\n */\nexport interface GLTFExtensionsLegacy {\n    /** glTF root extensions object. JSON data indexed by extension name. */\n    root: Record<string, Record<string, any>>;\n    /**\n     * Mesh extension objects. Key is {@link Object3D.objectId}, value is JSON\n     * data indexed by extension name.\n     */\n    mesh: Record<number, Record<string, Record<string, any>>>;\n    /**\n     * Node extension objects. Key is {@link Object3D.objectId}, value is JSON\n     * data indexed by extension name.\n     */\n    node: Record<number, Record<string, Record<string, any>>>;\n    /** Remapping from glTF node index to {@link Object3D.objectId}. */\n    idMapping: number[];\n}\n\n/** Options for {@link Scene.append}. */\nexport interface SceneAppendParameters {\n    /** Whether to load glTF extension data */\n    loadGltfExtensions: boolean;\n    baseURL: string | undefined;\n}\n\n/**\n * Result obtained when appending a scene with {@link Scene.append} with gltf extensions.\n */\nexport type SceneAppendResultWithExtensions = {\n    root: Object3D | null;\n    extensions: GLTFExtensionsLegacy;\n};\n\n/**\n * Result obtained when appending a scene with {@link Scene.append}.\n */\nexport type SceneAppendResult = (Object3D | null) | SceneAppendResultWithExtensions;\n\n/**\n * Constants\n */\n\n/** Magic number for .bin */\nconst MAGIC_BIN = 'WLEV';\n\n/**\n * Scene type to load with {@link ChunkedSceneLoadSink}.\n *\n * @since 1.2.1\n * @hidden\n */\nexport enum SceneType {\n    Prefab,\n    Main,\n    Dependency,\n}\n\n/**\n * Sink for `WritableStream` that loads the data as a .bin file.\n *\n * Data is loaded chunk by chunk to minimize the total WASM allocation size.\n *\n * @since 1.2.1\n * @hidden\n */\nexport class ChunkedSceneLoadSink implements UnderlyingSink<Uint8Array> {\n    readonly #wasm: WASM;\n    readonly #type: SceneType;\n    readonly #closeParameters: any[];\n    #offset = 0;\n    #requested = 0;\n    #firstChunk = true;\n\n    _loadIndex = -1;\n    sceneIndex = -1;\n\n    /** Pointer to the staging buffer. */\n    #ptr: number = 0;\n    /** Staging buffer size, in **bytes**. */\n    #bufferSize: number = 0;\n\n    /** @overload */\n    constructor(engine: WonderlandEngine, type: SceneType.Prefab, url: string);\n    /** @overload */\n    constructor(engine: WonderlandEngine, type: SceneType.Main, url: string);\n    /** @overload */\n    constructor(\n        engine: WonderlandEngine,\n        type: SceneType.Dependency,\n        url: string,\n        dependentSceneIndex: number\n    );\n    /**\n     * Constructor\n     * @param engine Engine instance\n     * @param type Type of scene to load\n     * @param url URL for the scene creation. Can be empty.\n     * @param closeParameters Parameters for the final function to be called\n     *     during a successful {@link ChunkedSceneLoadSink.close}.\n     */\n    constructor(\n        engine: WonderlandEngine,\n        type: SceneType,\n        url: string,\n        ...closeParameters: any[]\n    ) {\n        this.#wasm = engine.wasm;\n        this.#type = type;\n        this.#closeParameters = closeParameters;\n        this._loadIndex = this.#wasm._wl_scene_create_chunked_start(\n            this.#wasm.tempUTF8(url)\n        );\n        /* Initial buffer for the header chunk */\n        this.#requested = this.#wasm._wl_scene_create_chunked_buffer_size(this._loadIndex);\n        this._resizeBuffer(this.#requested);\n    }\n\n    private _resizeBuffer(size: number) {\n        if (this.#bufferSize > 0) {\n            this.#wasm._free(this.#ptr);\n        }\n        this.#bufferSize = size;\n        this.#ptr = size ? this.#wasm._malloc(size) : 0;\n    }\n\n    private _throwError(reason: string) {\n        this.abort();\n        throw new Error(reason);\n    }\n\n    /**\n     * Write a single blob of data.\n     *\n     * @param blob Data to parse\n     */\n    write(blob: Uint8Array) {\n        let read = 0;\n        while (read < blob.length) {\n            /* Fill the staging buffer */\n            const toRead = Math.min(blob.length - read, this.#bufferSize - this.#offset);\n            /* **Do not** attempt to create a HEAP8 view here, since the next wasm call might\n             * re-allocate the heap, making this view dangling. */\n            this.#wasm.HEAPU8.set(\n                blob.subarray(read, read + toRead),\n                this.#ptr + this.#offset\n            );\n            this.#offset += toRead;\n            read += toRead;\n\n            /* Not enough data, wait for more */\n            if (this.#requested > this.#offset) continue;\n\n            /* Send data. This loads as many chunks as possible and then tells\n             * us how much data it's missing, and how much it has read. The\n             * read count allows us to move incomplete chunk data to the start\n             * of the buffer. This is necessary because the buffer is allocated\n             * with just enough data to hold the largest chunk. */\n            const readSizePtr = this.#wasm._tempMem;\n            const requestedPtr = this.#wasm._tempMem + 4;\n            let success: boolean;\n            try {\n                success = this.#wasm._wl_scene_create_chunked_next(\n                    this._loadIndex,\n                    this.#ptr,\n                    this.#offset,\n                    readSizePtr,\n                    requestedPtr\n                );\n            } catch {\n                /* Catch calls to abort(), e.g. via asserts */\n                success = false;\n            }\n\n            if (!success) {\n                this._throwError('Chunk parsing failed');\n            }\n\n            const sentSize = this.#offset;\n            const readSize = this.#wasm._tempMemUint32[0];\n            this.#requested = this.#wasm._tempMemUint32[1];\n            const extraSize = sentSize - readSize;\n\n            /* #requested == 0 signals end of .bin file */\n            if (extraSize > this.#requested) {\n                this._throwError('Unexpected extra data');\n            }\n\n            /* Not enough data for a chunk, wait for more */\n            if (!readSize) continue;\n\n            if (extraSize > 0) {\n                /* We passed one or more complete chunks plus incomplete extra\n                 * data for the next chunk. Move it to the buffer start. */\n                this.#wasm.HEAPU8.copyWithin(\n                    this.#ptr,\n                    this.#ptr + readSize,\n                    this.#ptr + sentSize\n                );\n            }\n\n            this.#offset = extraSize;\n\n            if (this.#firstChunk) {\n                /* First chunk is the header. At this point we can query for\n                 * the required buffer size for parsing the rest of the .bin.\n                 * The initial buffer is exactly the size of the header chunk\n                 * so #offset should be 0 here since we sent a complete chunk. */\n                this._resizeBuffer(\n                    this.#wasm._wl_scene_create_chunked_buffer_size(this._loadIndex)\n                );\n                this.#firstChunk = false;\n            }\n        }\n    }\n\n    /** Called when all blobs of data have been written */\n    close() {\n        if (this.#requested > 0) {\n            this._throwError('Unexpected end of data');\n        }\n\n        this._resizeBuffer(0);\n        switch (this.#type) {\n            case SceneType.Prefab:\n                this.sceneIndex = this.#wasm._wl_scene_create_chunked_end_prefab(\n                    this._loadIndex\n                );\n                break;\n            case SceneType.Main:\n                this.#wasm._wl_scene_create_chunked_end_main(this._loadIndex);\n                this.sceneIndex = 0;\n                break;\n            case SceneType.Dependency:\n                [this.sceneIndex] = this.#closeParameters;\n                this.#wasm._wl_scene_create_chunked_end_queued(\n                    this._loadIndex,\n                    this.sceneIndex\n                );\n                break;\n            default:\n                this.#wasm._wl_scene_create_chunked_abort(this._loadIndex);\n                break;\n        }\n        this._loadIndex = -1;\n    }\n\n    /** Called when the stream is aborted */\n    abort() {\n        if (this._loadIndex === -1) return;\n        this.#wasm._wl_scene_create_chunked_abort(this._loadIndex);\n        this._loadIndex = -1;\n        this._resizeBuffer(0);\n    }\n\n    /** Staging buffer size */\n    get size() {\n        return this.#bufferSize;\n    }\n}\n\n/**\n * Wonderland Engine (.bin) scene.\n *\n * Wonderland Engine packages two types of scene:\n * - Activatable scene: Contains objects, components, views, resources, and rendering data\n * - Streamable scene: Contains objects, components, and resources\n *\n * #### Activation\n *\n * Some scenes are **activatable**, they can thus be attached to the renderer\n * to be updated and rendered on the canvas.\n *\n * For more information, have a look at the {@link WonderlandEngine.switchTo} method.\n *\n * #### Instantiation\n *\n * Besides activation, a scene can instantiate the content of another scene.\n *\n * For more information, have a look at the {@link Scene#instantiate} method.\n *\n * @category scene\n */\nexport class Scene extends Prefab {\n    /** Called before rendering the scene */\n    readonly onPreRender = new Emitter();\n    /** Called after the scene has been rendered */\n    readonly onPostRender = new Emitter();\n\n    /** Ray hit pointer in WASM heap. @hidden */\n    private _rayHit: number;\n    /** Ray hit. @hidden */\n    private _hit: RayHit;\n\n    /** @hidden */\n    private _environment: Environment;\n\n    constructor(engine: WonderlandEngine, index: number) {\n        super(engine, index);\n        /** `this.engine?` is used for testing. */\n        this._rayHit = this.engine?.wasm._malloc(4 * (3 * 4 + 3 * 4 + 4 + 2) + 4);\n        this._hit = new RayHit(this, this._rayHit);\n        this._environment = new Environment(this);\n    }\n\n    /** @overload */\n    instantiate(scene: PrefabGLTF): InstantiateGltfResult;\n    /**\n     * Instantiate `scene` into this instance.\n     *\n     * Any scene can be instantiated into one another. It's thus possible\n     * to instantiate a {@link PrefabGLTF} into this instance, or another\n     * {@link Scene} instance.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const prefabScene = await engine.loadScene('Prefab.bin');\n     * // Instantiate `prefabScene` into `scene`\n     * engine.scene.instantiate(prefabScene);\n     * ```\n     *\n     * #### Shared Resources\n     *\n     * Instantiating **does not** duplicate resources. Each instance will\n     * reference the same assets stored in the {@link Scene}, e.g.,\n     *\n     * ```js\n     * // `zombie` has one mesh and one material\n     * const zombie = await engine.loadScene('Zombie.bin');\n     *\n     * for (let i = 0; i < 100; ++i) {\n     *     engine.scene.instantiate(zombie);\n     * }\n     *\n     * console.log(engine.meshes.count) // Prints '1'\n     * console.log(engine.materials.count) // Prints '1'\n     * ```\n     *\n     * #### glTF extensions\n     *\n     * Instantiating a prefab loaded from a .glb automatically retargets the extensions\n     * to the created hierarchy:\n     *\n     * ```js\n     * const gltf = await engine.loadGLTF({url: 'Model.glb', extensions: true});\n     * const {root, extensions} = engine.scene.instantiate(gltf);\n     *\n     * // Retrieve Object3D instance from extension nodes list\n     * for (const key in extensions.node) {\n     *     const object3d = engine.scene.wrap(extensions.node[key]);\n     * }\n     * ```\n     *\n     * @param scene The scene to instantiate.\n     * @returns An object containing the instantiated root {@link Object3D}.\n     *     When a glTF is instantiated, the result can contain extra metadata.\n     *     For more information, have a look at the {@link InstantiateResult} type.\n     *\n     * @since 1.2.0\n     */\n    instantiate(prefab: Prefab): InstantiateResult;\n    instantiate(prefab: Prefab): InstantiateResult {\n        if (prefab._index === this._index) {\n            throw new Error(\"Can't instantiate scene into itself\");\n        }\n\n        const wasm = this.engine.wasm;\n        const id = wasm._wl_scene_instantiate(prefab._index, this._index);\n\n        const result: InstantiateResult = {root: this.wrap(id)};\n        if (prefab instanceof PrefabGLTF) {\n            const obj = this.wrap(id);\n            prefab._processInstantiaton(this, obj, result as InstantiateGltfResult);\n        }\n        return result;\n    }\n\n    /** @todo: Add `instantiateBatch` to instantiate multiple chunks in a row. */\n\n    /**\n     * @todo Provide an API to delete all resources linked to a scene.\n     *\n     * Example:\n     *\n     * ```ts\n     * const scene = await engine.loadScene('Scene.bin');\n     * ...\n     * scene.destroy({removeResources: true});\n     * ```\n     */\n\n    /**\n     * Destroy this scene and remove it from the engine.\n     *\n     * @note Destroying a scene **doesn't** remove the materials, meshes,\n     * and textures it references in the engine. Those should be cleaned up either by loading\n     * another main scene via {@link WonderlandEngine.loadMainScene}, or manually using {@link Mesh.destroy}.\n     *\n     * @throws If the scene is currently active.\n     * */\n    destroy() {\n        if (this.isActive) {\n            throw new Error(\n                `Attempt to destroy ${this}, but destroying the active scene is not supported`\n            );\n        }\n\n        /* Store before calling `super.destroy()` since the call\n         * might destroy entirely the prototype. */\n        const wasm = this.engine.wasm;\n        const rayPtr = this._rayHit;\n\n        super.destroy();\n\n        wasm._free(rayPtr);\n    }\n\n    /**\n     * View components.\n     */\n    get views(): ViewComponent[] {\n        return this._components.components(ViewComponent, false);\n    }\n\n    /**\n     * Active view components.\n     */\n    get activeViews(): ViewComponent[] {\n        return this._components.components(ViewComponent, true);\n    }\n\n    /** Main view. */\n    get mainView(): ViewComponent | null {\n        const id = this.engine.wasm._wl_scene_get_mainView(this._index);\n        return this._components.wrapView(id);\n    }\n    /** Set the current non-VR view. */\n    set mainView(view: ViewComponent | null) {\n        if (!view) return;\n        this.assertOrigin(view);\n        this.engine.wasm._wl_scene_set_mainView(view._id);\n    }\n\n    /**\n     * Left eye view.\n     */\n    get leftEyeView(): ViewComponent | null {\n        const id = this.engine.wasm._wl_scene_get_leftView(this._index);\n        return this._components.wrapView(id);\n    }\n\n    /**\n     * Right eye view.\n     */\n    get rightEyeView(): ViewComponent | null {\n        const id = this.engine.wasm._wl_scene_get_rightView(this._index);\n        return this._components.wrapView(id);\n    }\n\n    /**\n     * Set input transformation.\n     *\n     * @hidden\n     */\n    _setInputTransformation(\n        type: InputType,\n        position: Readonly<NumberArray>,\n        orientation: Readonly<NumberArray>\n    ) {\n        const wasm = this.engine.wasm;\n        wasm.requireTempMem(4 * 2 * 4);\n        wasm._tempMemFloat.set(position);\n        wasm._tempMemFloat.set(orientation, 4);\n        wasm._wl_input_set_transformation(this._index, type, wasm._tempMem);\n    }\n\n    /**\n     * Cast a ray through the scene and find intersecting collision components.\n     *\n     * The resulting ray hit will contain **up to 4** closest ray hits,\n     * sorted by increasing distance.\n     *\n     * Example:\n     *\n     * ```js\n     * const hit = engine.scene.rayCast(\n     *     [0, 0, 0],\n     *     [0, 0, 1],\n     *     1 << 0 | 1 << 4, // Only check against components in groups 0 and 4\n     *     25\n     * );\n     * if (hit.hitCount > 0) {\n     *     const locations = hit.getLocations();\n     *     console.log(`Object hit at: ${locations[0][0]}, ${locations[0][1]}, ${locations[0][2]}`);\n     * }\n     * ```\n     *\n     * @param o Ray origin.\n     * @param d Ray direction.\n     * @param groupMask Bitmask of collision groups to filter by: only objects\n     *        that are part of given groups are considered for the raycast.\n     * @param maxDistance Maximum **inclusive** hit distance. Defaults to `100`.\n     *\n     * @returns The {@link RayHit} instance, cached by this class.\n     *\n     * @note The returned {@link RayHit} object is owned by the {@link Scene}\n     *       instance and will be reused with the next {@link Scene#rayCast} call.\n     */\n    rayCast(\n        o: Readonly<NumberArray>,\n        d: Readonly<NumberArray>,\n        groupMask: number,\n        maxDistance = 100.0\n    ): RayHit {\n        this.engine.wasm._wl_scene_ray_cast(\n            this._index,\n            o[0],\n            o[1],\n            o[2],\n            d[0],\n            d[1],\n            d[2],\n            groupMask,\n            this._rayHit,\n            maxDistance\n        );\n        return this._hit;\n    }\n\n    /**\n     * Set the background clear color.\n     *\n     * @param color new clear color (RGBA).\n     * @since 0.8.5\n     */\n    set clearColor(color: number[]) {\n        this.engine.wasm._wl_scene_set_clearColor(color[0], color[1], color[2], color[3]);\n    }\n\n    /**\n     * Set whether to clear the color framebuffer before drawing.\n     *\n     * This function is useful if an external framework (e.g. an AR tracking\n     * framework) is responsible for drawing a camera frame before Wonderland\n     * Engine draws the scene on top of it.\n     *\n     * @param b Whether to enable color clear.\n     * @since 0.9.4\n     */\n    set colorClearEnabled(b: boolean) {\n        this.engine.wasm._wl_scene_enableColorClear(b);\n    }\n\n    /**\n     * Load a scene file (.bin).\n     *\n     * Will replace the currently active scene with the one loaded\n     * from given file. It is assumed that JavaScript components required by\n     * the new scene were registered in advance.\n     *\n     * Once the scene is loaded successfully and initialized,\n     * {@link WonderlandEngine.onSceneLoaded} is notified.\n     *\n     * #### ArrayBuffer\n     *\n     * The `load()` method accepts an in-memory buffer:\n     *\n     * ```js\n     * scene.load({\n     *     buffer: new ArrayBuffer(...),\n     *     baseURL: 'https://my-website/assets'\n     * })\n     * ```\n     *\n     * @note The `baseURL` is mandatory. It's used to fetch images and languages.\n     *\n     * Use {@link Scene.setLoadingProgress} to update the loading progress bar\n     * when using an ArrayBuffer.\n     *\n     * @deprecated Use the new {@link WonderlandEngine.loadMainScene} API.\n     *\n     * @param options Path to the file to load, or an option object.\n     *     For more information about the options, see the {@link SceneLoadOptions} documentation.\n     * @returns Promise that resolves when the scene was loaded.\n     */\n    async load(options: string | SceneLoadOptions): Promise<Scene> {\n        const engine = this.engine;\n\n        /** @todo(2.0.0): Remove this method. */\n        let dispatchReadyEvent = false;\n        let opts: InMemoryLoadOptions;\n        if (isString(options)) {\n            opts = await Scene.loadBuffer(options, (bytes: number, size: number) => {\n                this.engine.log.info(LogTag.Scene, `Scene downloading: ${bytes} / ${size}`);\n                this.engine.setLoadingProgress(bytes / size);\n            });\n        } else {\n            opts = options;\n            dispatchReadyEvent = options.dispatchReadyEvent ?? false;\n        }\n\n        const scene = await engine.loadMainSceneFromBuffer({\n            ...opts,\n            dispatchReadyEvent,\n        });\n        /* Do not use `this`, since `loadMainScene` will destroy it.\n         * `erasePrototypeOnDestroy` would make this instance unusable. */\n        engine.onSceneLoaded.notify();\n        return scene;\n    }\n\n    /**\n     * Append a scene file.\n     *\n     * Loads and parses the file and its images and appends the result\n     * to the currently active scene.\n     *\n     * Supported formats are streamable Wonderland scene files (.bin) and glTF\n     * 3D scenes (.gltf, .glb).\n     *\n     * ```js\n     * WL.scene.append(filename).then(root => {\n     *     // root contains the loaded scene\n     * });\n     * ```\n     *\n     * In case the `loadGltfExtensions` option is set to true, the response\n     * will be an object containing both the root of the loaded scene and\n     * any glTF extensions found on nodes, meshes and the root of the file.\n     *\n     * ```js\n     * WL.scene.append(filename, { loadGltfExtensions: true }).then(({root, extensions}) => {\n     *     // root contains the loaded scene\n     *     // extensions.root contains any extensions at the root of glTF document\n     *     const rootExtensions = extensions.root;\n     *     // extensions.mesh and extensions.node contain extensions indexed by Object id\n     *     const childObject = root.children[0];\n     *     const meshExtensions = root.meshExtensions[childObject.objectId];\n     *     const nodeExtensions = root.nodeExtensions[childObject.objectId];\n     *     // extensions.idMapping contains a mapping from glTF node index to Object id\n     * });\n     * ```\n     *\n     * If the file to be loaded is located in a subfolder, it might be useful\n     * to define the `baseURL` option. This will ensure any bin files\n     * referenced by the loaded bin file are loaded at the correct path.\n     *\n     * ```js\n     * WL.scene.append(filename, { baseURL: 'scenes' }).then(({root, extensions}) => {\n     *     // do stuff\n     * });\n     * ```\n     *\n     * @deprecated Use the new {@link Prefab} and {@link Scene} API.\n     *\n     * @param file The .bin, .gltf or .glb file to append. Should be a URL or\n     *   an `ArrayBuffer` with the file content.\n     * @param options Additional options for loading.\n     * @returns Promise that resolves when the scene was appended.\n     */\n    async append(\n        file: string | ArrayBuffer,\n        options: Partial<SceneAppendParameters> = {}\n    ): Promise<SceneAppendResult> {\n        /** @todo(2.0.0): Remove this method. */\n\n        const {baseURL = isString(file) ? getBaseUrl(file) : this.baseURL} = options;\n\n        const buffer = isString(file) ? await fetchWithProgress(file) : file;\n        const data = new Uint8Array(buffer);\n        const isBinFile =\n            data.byteLength > MAGIC_BIN.length &&\n            data\n                .subarray(0, MAGIC_BIN.length)\n                .every((value, i) => value === MAGIC_BIN.charCodeAt(i));\n\n        const scene = isBinFile\n            ? this.engine.loadPrefabFromBuffer({buffer, baseURL})\n            : this.engine.loadGLTFFromBuffer({\n                  buffer,\n                  baseURL,\n                  extensions: options.loadGltfExtensions,\n              });\n\n        const result = this.instantiate(scene)!;\n        if (scene instanceof PrefabGLTF) {\n            if (!scene.extensions) return result.root;\n            return {\n                root: result.root,\n                extensions: {\n                    ...(result as InstantiateGltfResult).extensions,\n                    root: scene.extensions.root,\n                },\n            } as SceneAppendResultWithExtensions;\n        }\n\n        scene.destroy();\n        return result.root;\n    }\n\n    /**\n     * Update the loading screen progress bar.\n     *\n     * @param value Current loading percentage, in the range [0; 1].\n     *\n     * @deprecated Use {@link WonderlandEngine.setLoadingProgress}.\n     */\n    setLoadingProgress(percentage: number) {\n        this.engine.setLoadingProgress(percentage);\n    }\n\n    /**\n     * Dispatch an event 'wle-scene-ready' in the document.\n     *\n     * @note This is used for automatic testing.\n     */\n    dispatchReadyEvent() {\n        document.dispatchEvent(\n            new CustomEvent('wle-scene-ready', {\n                detail: {filename: this.filename},\n            })\n        );\n    }\n\n    /**\n     * Set the current material to render the sky.\n     *\n     * @note The sky needs to be enabled in the editor when creating the scene.\n     * For more information, please refer to the background [tutorial](https://wonderlandengine.com/tutorials/background-effect/).\n     */\n    set skyMaterial(material: Material | null) {\n        this.engine.wasm._wl_scene_set_sky_material(this._index, material?._id ?? 0);\n    }\n\n    /** Current sky material, or `null` if no sky is set. */\n    get skyMaterial(): Material | null {\n        const index = this.engine.wasm._wl_scene_get_sky_material(this._index);\n        return this.engine.materials.wrap(index);\n    }\n\n    /**\n     * Environment lighting properties.\n     *\n     * @since 1.2.3\n     */\n    get environment(): Environment {\n        return this._environment;\n    }\n\n    /**\n     * Relative url to the js components bundle\n     *\n     * Returns `null` if the scene was built without a components bundle.\n     */\n    get componentsBundle(): string | null {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_scene_get_componentsBundle(this._index);\n        return ptr ? wasm.UTF8ToString(ptr) : null;\n    }\n\n    /**\n     * Reset the scene.\n     *\n     * This method deletes all used and allocated objects, and components.\n     *\n     * @deprecated Load a new scene and activate it instead.\n     */\n    reset() {\n        /** @todo(2.0.0): Remove this method. */\n    }\n\n    /**\n     * Download and apply queued dependency files (.bin).\n     *\n     * @hidden\n     */\n    async _downloadDependency(url: string) {\n        const sink = new ChunkedSceneLoadSink(\n            this.engine,\n            SceneType.Dependency,\n            url,\n            this._index\n        );\n        const stream = await fetchStreamWithProgress(url);\n        return stream.pipeTo(new WritableStream(sink));\n    }\n\n    /**\n     * Download and apply queued dependency files (.bin).\n     *\n     * @hidden\n     */\n    async _downloadDependencies() {\n        const wasm = this.engine.wasm;\n\n        const count = wasm._wl_scene_queued_bin_count(this._index);\n        if (!count) return Promise.resolve();\n\n        const urls = new Array(count).fill(0).map((_, i: number) => {\n            const ptr = wasm._wl_scene_queued_bin_path(this._index, i);\n            const url = wasm.UTF8ToString(ptr);\n            return url;\n        });\n\n        wasm._wl_scene_clear_queued_bin_list(this._index);\n\n        return Promise.all(urls.map((url: string) => this._downloadDependency(url)));\n    }\n}\n", "import {\n    Component,\n    ComponentConstructor,\n    Object as Object3D,\n    Physics,\n    I18N,\n    MorphTargets,\n    Texture,\n    Font,\n    DestroyedPrefabInstance,\n    ParticleEffect,\n} from './wonderland.js';\n\nimport {Emitter, RetainEmitter} from './utils/event.js';\nimport {isString} from './utils/object.js';\nimport {APIVersion, Version} from './version.js';\nimport {WASM} from './wasm.js';\nimport {Logger} from './utils/logger.js';\nimport {clamp} from './utils/misc.js';\nimport {MaterialManager} from './resources/material-manager.js';\nimport {MeshManager} from './resources/mesh-manager.js';\nimport {ResourceManager} from './resources/resource.js';\nimport {needsFlipY, TextureManager} from './resources/texture-manager.js';\nimport {LogTag} from './wonderland.js';\nimport {Constructor, ImageLike, ProgressCallback} from './types.js';\nimport {XRSessionState, WebXR} from './webxr.js';\nimport {Prefab, InMemoryLoadOptions, LoadOptions, StreamLoadOptions} from './prefab.js';\nimport {Scene, ActivateOptions, ChunkedSceneLoadSink, SceneType} from './scene.js';\nimport {PrefabGLTF, GLTFOptions} from './scene-gltf.js';\nimport {ArrayBufferSource, onImageReady} from './utils/fetch.js';\n\n/**\n * Ensures that this API is compatible with the given\n * runtime version.\n *\n * We only enforce compatibility for major and minor components, i.e.,\n * the runtime and the API must both be of the form `x.y.*`.\n *\n * @throws If the major or the minor components are different.\n *\n * @param version The target version\n */\nexport function checkRuntimeCompatibility(version: Version) {\n    const {major, minor} = version;\n\n    let majorDiff = major - APIVersion.major;\n    let minorDiff = minor - APIVersion.minor;\n    /* Same version, so perfectly compatible. */\n    if (!majorDiff && !minorDiff) return;\n\n    const error =\n        'checkRuntimeCompatibility(): Version compatibility mismatch:\\n' +\n        '\\t\u2192 API and runtime compatibility is enforced on a patch level (versions x.y.*)\\n';\n\n    const isRuntimeOlder = majorDiff < 0 || (!majorDiff && minorDiff < 0);\n    if (isRuntimeOlder) {\n        /* Runtime is out of date. */\n        throw new Error(\n            `${error}\\t\u2192 Please use a Wonderland Engine editor version >= ${APIVersion.major}.${APIVersion.minor}.*`\n        );\n    }\n    /* API is out of date. */\n    throw new Error(\n        `${error}\\t\u2192 Please use a new API version >= ${version.major}.${version.minor}.*`\n    );\n}\n\n/**\n * Reload the browser tab.\n *\n * @note This method first ensures the XR session is terminated,\n * to avoid blocking the Oculus Quest page.\n *\n * @param engine The engine instance\n */\nfunction reloadPage(engine: WonderlandEngine) {\n    /* End XR session for Oculus Quest blocking reload otherwise */\n    const session = engine.xr?.session ?? null;\n    if (!session) {\n        location.reload();\n        return;\n    }\n    session.end().then(() => location.reload());\n}\n\n/**\n * Main Wonderland Engine instance.\n *\n * Controls the canvas, rendering, and JS <-> WASM communication.\n */\nexport class WonderlandEngine {\n    /**\n     * {@link Emitter} for WebXR session end events.\n     *\n     * Usage from within a component:\n     *\n     * ```js\n     * this.engine.onXRSessionEnd.add(() => console.log(\"XR session ended.\"));\n     * ```\n     */\n    get onXRSessionEnd(): Emitter {\n        return this.#webxr.onSessionEnd;\n    }\n\n    /**\n     * {@link RetainEmitter} for WebXR session start events.\n     *\n     * Usage from within a component:\n     *\n     * ```js\n     * this.engine.onXRSessionStart.add((session, mode) => console.log(session, mode));\n     * ```\n     *\n     * By default, this emitter is retained and will automatically call any callback added\n     * while a session is already started:\n     *\n     * ```js\n     * // XR session is already active.\n     * this.engine.onXRSessionStart.add((session, mode) => {\n     *     console.log(session, mode); // Triggered immediately.\n     * });\n     * ```\n     */\n    get onXRSessionStart(): Emitter<[XRSession, XRSessionMode]> {\n        return this.#webxr.onSessionStart;\n    }\n\n    /**\n     * {@link Emitter} for canvas / main framebuffer resize events.\n     *\n     * Usage from within a component:\n     *\n     * ```js\n     * this.engine.onResize.add(() => {\n     *     const canvas = this.engine.canvas;\n     *     console.log(`New Size: ${canvas.width}, ${canvas.height}`);\n     * });\n     * ```\n     *\n     * @note The size of the canvas is in physical pixels, and is set via {@link WonderlandEngine.resize}.\n     */\n    readonly onResize: Emitter = new Emitter();\n\n    /** Whether AR is supported by the browser. */\n    get arSupported(): boolean {\n        return this.#webxr.arSupported;\n    }\n\n    /** Whether VR is supported by the browser. */\n    get vrSupported(): boolean {\n        return this.#webxr.vrSupported;\n    }\n\n    /**\n     * {@link RetainEmitter} signalling the end of the loading screen.\n     *\n     * Listeners get notified when the first call to {@link Scene#load()} is\n     * invoked. At this point the new scene has not become active, and none of\n     * its resources or components are initialized.\n     *\n     * Compared to {@link onSceneLoaded}, this does not wait for all components\n     * to be fully initialized and activated. Any handler added inside\n     * {@link Component#init()}, {@link Component#start()} or\n     * {@link Component#onActivate()} will be called immediately.\n     *\n     * Usage:\n     *\n     * ```js\n     * this.engine.onLoadingScreenEnd.add(() => console.log(\"Wait is over!\"));\n     * ```\n     */\n    readonly onLoadingScreenEnd = new RetainEmitter();\n\n    /**\n     * {@link Emitter} for scene loaded events.\n     *\n     * Listeners get notified when a call to {@link Scene#load()} finishes. At\n     * this point all resources are loaded and all components had their\n     * {@link Component#init()} as well as (if active)\n     * {@link Component#start()} and {@link Component#onActivate()} methods\n     * called.\n     *\n     * Usage from within a component:\n     *\n     * ```js\n     * this.engine.onSceneLoaded.add(() => console.log(\"Scene switched!\"));\n     * ```\n     *\n     * @deprecated Use {@link onSceneActivated} instead.\n     */\n    readonly onSceneLoaded = new Emitter();\n\n    /**\n     * {@link Emitter} for scene activated events.\n     *\n     * This listener is notified with the old scene as first parameter, and\n     * the new scene as second.\n     *\n     * This listener is notified after all resources are loaded and all components had their\n     * {@link Component#init()} as well as (if active)\n     * {@link Component#start()} and {@link Component#onActivate()} methods\n     * called.\n     *\n     * Usage from within a component:\n     *\n     * ```js\n     * this.engine.onSceneActivated.add((oldScene, newScene) => {\n     *     console.log(`Scene switch from ${oldScene.filename} to ${newScene.filename}`);\n     * });\n     * ```\n     */\n    readonly onSceneActivated = new Emitter<[Scene, Scene]>();\n\n    /**\n     * Triggered when a hot reload is requested.\n     *\n     * When using the Wonderland Editor, this will be triggered when packaging\n     * the project.\n     *\n     * @note When {@link autoHotReload} is `true`, the emitter is notified after the\n     * scene is reloaded.\n     *\n     * To customize the hot reload behavior, set the {@link autoHotReload} to `false`,\n     * and use this emitter:\n     *\n     * ```js\n     * this.engine.onHotReloadRequest.add(async (filename: string) => {\n     *     // This handler can be used to re-download a scene, download components,\n     *     // fetch an API, anything!\n     *     await this.loadMainScene(filename);\n     * });\n     * ```\n     */\n    readonly onHotReloadRequest: Emitter<[string]> = new Emitter();\n\n    /**\n     * Access to internationalization.\n     */\n    readonly i18n: I18N = new I18N(this);\n\n    /**\n     * WebXR related state, `null` if no XR session is active.\n     */\n    get xr(): XRSessionState | null {\n        return this.#webxr.sessionState;\n    }\n\n    /**\n     * If `true`, {@link Texture}, {@link Object3D}, and {@link Component}\n     * instances have their prototype erased upon destruction.\n     *\n     * #### Object\n     *\n     * ```js\n     * engine.erasePrototypeOnDestroy = true;\n     *\n     * const obj = engine.scene.addObject();\n     * obj.name = 'iamalive';\n     * console.log(obj.name); // Prints 'iamalive'\n     *\n     * obj.destroy();\n     * console.log(obj.name); // Throws an error\n     * ```\n     *\n     * #### Component\n     *\n     * Components will also be affected:\n     *\n     * ```js\n     * class MyComponent extends Component {\n     *     static TypeName = 'my-component';\n     *     static Properties = {\n     *         alive: Property.bool(true)\n     *     };\n     *\n     *     start() {\n     *         this.destroy();\n     *         console.log(this.alive) // Throws an error\n     *     }\n     * }\n     * ```\n     *\n     * A component is also destroyed if its ancestor gets destroyed:\n     *\n     * ```js\n     * class MyComponent extends Component {\n     *     ...\n     *     start() {\n     *         this.object.parent.destroy();\n     *         console.log(this.alive) // Throws an error\n     *     }\n     * }\n     * ```\n     *\n     * @note Native components will not be erased if destroyed via object destruction:\n     *\n     * ```js\n     * const mesh = obj.addComponent('mesh');\n     * obj.destroy();\n     * console.log(mesh.active) // Doesn't throw even if the mesh is destroyed\n     * ```\n     *\n     * @since 1.1.1\n     */\n    erasePrototypeOnDestroy = false;\n\n    /**\n     * If `true`, the materials will be wrapped in a proxy to support pre-1.2.0\n     * material access, i.e.,\n     *\n     * ```js\n     * const material = new Material(engine, 'Phong Opaque');\n     * material.diffuseColor = [1.0, 0.0, 0.0, 1.0];\n     * ```\n     *\n     * If `false`, property accessors will not be available and material\n     * properties should be accessed via methods, i.e.,\n     *\n     * ```js\n     * const PhongOpaque = engine.materials.getTemplate('Phong Opaque');\n     * const material = new PhongOpaque();\n     * material.setDiffuseColor([1.0, 0.0, 0.0, 1.0]);\n     * ...\n     * const diffuse = material.getDiffuseColor();\n     * ```\n     *\n     * When disabled, reading/writing to materials is slightly more efficient on the CPU.\n     */\n    legacyMaterialSupport = true;\n\n    /**\n     * If `true`, automatically reloads the scene sent by the editor socket.\n     *\n     * @note The {@link onHotReloadRequest} emitter is notified **after** the scene is re-loaded.\n     *\n     * To use custom hot-reload code, set this boolean to `false` and add the reloading code\n     *\n     */\n    autoHotReload = true;\n\n    /**\n     * If `true`, uncompressed images will be automatically converted\n     * to `ImageBitmap` before upload to the GPU.\n     *\n     * For more information, have a look at the\n     * [ImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap) documentation.\n     */\n    loadUncompressedImagesAsBitmap = false;\n\n    /**\n     * Scene cache in scene manager.\n     *\n     * @hidden\n     */\n    _scenes: (Prefab | null)[] = [];\n\n    /**\n     * Currently active scene.\n     *\n     * @hidden\n     */\n    _scene: Scene;\n\n    /** Incremented every time a new main scene is loaded. */\n    _mainSceneVersion: number = 0;\n\n    /** @hidden */\n    private _textures!: TextureManager;\n    /** @hidden */\n    private _materials!: MaterialManager;\n    /** @hidden */\n    private _meshes!: MeshManager;\n    /** @hidden */\n    private _morphTargets!: ResourceManager<MorphTargets>;\n    /** @hidden */\n    private _fonts!: ResourceManager<Font>;\n    /** @hidden */\n    private _particleEffects!: ResourceManager<ParticleEffect>;\n    /**\n     * Current loading uncompressed images.\n     *\n     * @note Indexed by js image index.\n     *\n     * @hidden\n     */\n    private _uncompressedPromises: Promise<void>[] = [];\n\n    /**\n     * WebAssembly bridge.\n     *\n     * @hidden\n     */\n    #wasm: WASM;\n\n    /**\n     * Physics manager, only available when physx is enabled in the runtime.\n     *\n     * @hidden\n     */\n    #physics: Physics | null = null;\n\n    /**\n     * WebXR library.\n     *\n     * @hidden\n     */\n    #webxr: WebXR;\n\n    /**\n     * Resize observer to track for canvas size changes.\n     *\n     * @hidden\n     */\n    #resizeObserver: ResizeObserver | null = null;\n\n    /**\n     * Whether a components bundle has already been loaded or not.\n     *\n     * @hidden\n     */\n    #bundleCache: Set<string> = new Set();\n\n    /**\n     * Create a new engine instance.\n     *\n     * @param wasm Wasm bridge instance\n     * @param loadingScreen Loading screen .bin file data\n     *\n     * @hidden\n     */\n    constructor(wasm: WASM, loadingScreen: ArrayBuffer | null, withRenderer: boolean) {\n        this.#wasm = wasm;\n        this.#wasm['_setEngine'](this); /* String lookup to bypass private. */\n        this.#wasm._loadingScreen = loadingScreen;\n\n        const version = this.runtimeVersion;\n        let versionString = `${version.major}.${version.minor}.${version.patch}`;\n        if (version.rc > 0) {\n            versionString += `-rc${version.rc}`;\n        }\n        this.log.info(LogTag.Engine, 'Wonderland Engine runtime version:', versionString);\n\n        this.#webxr = new WebXR(this);\n\n        checkRuntimeCompatibility(this.#wasm.runtimeVersion);\n\n        /* Setup the error handler. This is used to to manage native errors. */\n        this.#wasm._wl_set_error_callback(\n            this.#wasm.addFunction((messagePtr: number) => {\n                throw new Error(this.#wasm.UTF8ToString(messagePtr));\n            }, 'vi')\n        );\n\n        this.#wasm._wl_application_create();\n\n        this.#physics = null;\n\n        if (this.#wasm.withPhysX) {\n            this.#physics = new Physics(this);\n        }\n\n        this._init(withRenderer);\n\n        this._scene = this._reload(0);\n\n        this.canvas.addEventListener(\n            'webglcontextlost',\n            (e) => this.log.error(LogTag.Engine, 'Context lost:', e),\n            false\n        );\n    }\n\n    /**\n     * Start the engine if it's not already running.\n     *\n     * When using the {@link loadRuntime} function, this method is called\n     * automatically.\n     */\n    start(): void {\n        this.wasm._wl_application_start();\n    }\n\n    /**\n     * Destroy the engine explicitly.\n     * @since 1.4.6\n     */\n    destroy(): void {\n        this.wasm._wl_application_exit();\n        requestAnimationFrame(() => {\n            this.wasm._wl_application_destroy();\n        });\n    }\n\n    /**\n     * Register a custom JavaScript component type.\n     *\n     * You can register a component directly using a class inheriting from {@link Component}:\n     *\n     * ```js\n     * import { Component, Type } from '@wonderlandengine/api';\n     *\n     * export class MyComponent extends Component {\n     *     static TypeName = 'my-component';\n     *     static Properties = {\n     *         myParam: {type: Type.Float, default: 42.0},\n     *     };\n     *     init() {}\n     *     start() {}\n     *     update(dt) {}\n     *     onActivate() {}\n     *     onDeactivate() {}\n     *     onDestroy() {}\n     * });\n     *\n     * // Here, we assume we have an engine already instantiated.\n     * // In general, the registration occurs in the `index.js` file in your\n     * // final application.\n     * engine.registerComponent(MyComponent);\n     * ```\n     *\n     * {@label CLASSES}\n     * @param classes Custom component(s) extending {@link Component}.\n     *\n     * @since 1.0.0\n     */\n    registerComponent(...classes: ComponentConstructor[]) {\n        for (const arg of classes) {\n            this.wasm._registerComponent(arg);\n        }\n    }\n\n    /**\n     * Register a component bundle\n     *\n     * The module must be of the form:\n     *\n     * ```js\n     * export default function(engine) {\n     *     engine.registerComponent(MyComponent);\n     *     ...\n     * }\n     * ```\n     *\n     * Alternatively, you can manually register a component bundle:\n     *\n     * ```js\n     * const registerBundle = (await import(url)).default;\n     * registerBundle(engine);\n     * ```\n     *\n     * @param url The URL of the module to register.\n     * @param nocache If `true`, force browser to re-download the file.\n     */\n    async registerBundle(url: string, nocache = false) {\n        if (!nocache && this.#bundleCache.has(url)) return;\n        this.#bundleCache.add(url);\n\n        if (nocache) url += `?t=${Date.now()}`;\n        const register = (await import(url)).default;\n        if (typeof register !== 'function') {\n            throw new Error(\n                `The bundle '${url}' doesn't have a default exported registration function`\n            );\n        }\n        register(this);\n    }\n\n    /**\n     * Update the loading screen progress bar.\n     *\n     * @param value Current loading percentage, in the range [0; 1].\n     *\n     * @since 1.2.1\n     */\n    setLoadingProgress(percentage: number) {\n        this.wasm._wl_set_loading_screen_progress(clamp(percentage, 0, 1));\n    }\n\n    /**\n     * Switch the current active scene.\n     *\n     * Once active, the scene will be updated and rendered on the canvas.\n     *\n     * The currently active scene is accessed via {@link WonderlandEngine.scene}:\n     *\n     * ```js\n     * import {Component} from '@wonderlandengine/api';\n     *\n     * class MyComponent extends Component{\n     *     start() {\n     *         console.log(this.scene === this.engine.scene); // Prints `true`\n     *     }\n     * }\n     * ```\n     *\n     * @note This method will throw if the scene isn't activatable.\n     *\n     * #### Component Lifecycle\n     *\n     * Marking a scene as active will:\n     * * Call {@link Component#onDeactivate} for all active components of the previous scene\n     * * Call {@link Component#onActivate} for all active components of the new scene\n     *\n     * #### Usage\n     *\n     * ```js\n     * const scene = await engine.loadScene('Scene.bin');\n     * engine.switchTo(scene);\n     * ```\n     *\n     * @returns A promise that resolves once the scene is ready.\n     *\n     * @since 1.2.0\n     */\n    async switchTo(scene: Scene, opts: ActivateOptions = {}) {\n        this.wasm._wl_deactivate_activeScene();\n\n        /* Switch reference on engine **just** before activating, to allow\n         * component to use `this.engine.scene` in `onActivate()`/`start()`. */\n        const previous = this.scene;\n        this._preactivate(scene);\n\n        this.wasm._wl_scene_activate(scene._index);\n\n        /* Enable/disable required views */\n        this.#webxr.updateViewState(undefined);\n\n        /* We loaded new views, update WebXR projection parameters */\n        this.#webxr.updateProjectionParams(undefined, undefined);\n\n        if (!this.onLoadingScreenEnd.isDataRetained) {\n            this.onLoadingScreenEnd.notify();\n        }\n\n        /* For now, we always automatically download dependencies for\n         * the user, i.e., separate textures.bin and languages.bin.\n         *\n         * In the future, we can eventually expose this in the chunk API\n         * to give more control to the user if needed.\n         *\n         * We do not make the user wait until the textures download is complete. */\n        const promise = scene._downloadDependencies();\n\n        await this.i18n.setLanguage(this.i18n.languageCode(0));\n\n        const {dispatchReadyEvent = false, waitForDependencies = false} = opts;\n\n        if (waitForDependencies) await promise;\n\n        this.onSceneActivated.notify(previous, scene);\n\n        if (dispatchReadyEvent) scene.dispatchReadyEvent();\n    }\n\n    /**\n     * Load the scene from a URL, as the main scene of a new {@link Scene}.\n     *\n     * #### Usage\n     *\n     * ```js\n     * // The method returns the main scene\n     * const scene = await engine.loadMainScene();\n     * ```\n     *\n     * #### Destruction\n     *\n     * Loading a new main scene entirely resets the state of the engine, and destroys:\n     * - All loaded scenes, prefabs, and gltf files\n     * - Meshes\n     * - Textures\n     * - Materials\n     *\n     * @note This method can only load Wonderland Engine `.bin` files.\n     *\n     * @param options The URL pointing to the scene to load or an object\n     *     holding additional loading options.\n     * @param progress Optional progress callback. When setting a custom\n     *     callback, you need to manually call {@link setLoadingProgress} to\n     *     get progress updates in the loading screen.\n     * @returns The main scene of the new {@link Scene}.\n     */\n    async loadMainScene(\n        options: LoadOptions & ActivateOptions,\n        progress?: ProgressCallback\n    ) {\n        /**\n         * @todo: It's currently possible to put the runtime in a limbo\n         * state using hot-reload: Multiple reload requests are sent, and scene loading\n         * ends up being interleaved.\n         *\n         * Add a system to cancel the last loading, if any.\n         */\n\n        progress ??= (bytes: number, size: number) => {\n            this.log.info(LogTag.Scene, `Scene downloading: ${bytes} / ${size}`);\n            this.setLoadingProgress(bytes / size);\n        };\n\n        const opts = Prefab.makeUrlLoadOptions(options);\n        const {streamed = true, nocache = false} = opts;\n        if (streamed) {\n            const options = await Scene.loadStream(opts, progress);\n            const {stream, url} = Prefab.validateStreamOptions(options);\n            return this._loadMainScene(stream, url, nocache, options as ActivateOptions);\n        } else {\n            const options = await Scene.loadBuffer(opts, progress);\n            return this.loadMainSceneFromBuffer(options);\n        }\n    }\n\n    /**\n     * Similar to {@link WonderlandEngine.loadMainScene}, but loading is done\n     * from an `ArrayBuffer`.\n     *\n     * @param options An object containing the buffer and extra metadata.\n     * @returns The main scene of the new {@link Scene}.\n     */\n    async loadMainSceneFromBuffer(options: InMemoryLoadOptions & ActivateOptions) {\n        const {nocache = false} = options;\n        const {buffer, url} = Prefab.validateBufferOptions(options);\n        return this._loadMainScene(buffer, url, nocache, options);\n    }\n\n    /**\n     * Load a {@link Prefab} from a URL.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const prefab = await engine.loadPrefab('Prefab.bin');\n     * ```\n     *\n     * @note This method can only load Wonderland Engine `.bin` files.\n     * @note This method is a wrapper around {@link WonderlandEngine.loadPrefabFromBuffer}.\n     *\n     * @param url The URL pointing to the prefab to load.\n     * @param progress Optional progress callback.\n     * @returns The loaded {@link Prefab}.\n     */\n    async loadPrefab(options: LoadOptions, progress?: ProgressCallback) {\n        const opts = Prefab.makeUrlLoadOptions(options);\n        const {streamed = true} = opts;\n        if (streamed) {\n            const options = await Scene.loadStream(opts, progress);\n            const scene = await this._loadSceneFromStream(Prefab, options);\n            this._validateLoadedPrefab(scene);\n            scene._initialize();\n            return scene;\n        } else {\n            const options = await Scene.loadBuffer(opts, progress);\n            return this.loadPrefabFromBuffer(options);\n        }\n    }\n\n    /**\n     * Similar to {@link WonderlandEngine.loadPrefab}, but loading is done from\n     * an `ArrayBuffer`.\n     *\n     * @param options An object containing the buffer and extra metadata.\n     * @returns A new loaded {@link Prefab}.\n     */\n    loadPrefabFromBuffer(options: InMemoryLoadOptions) {\n        const scene = this._loadSceneFromBuffer(Prefab, options);\n        this._validateLoadedPrefab(scene);\n        scene._initialize();\n        return scene;\n    }\n\n    /**\n     * Load a scene from a URL.\n     *\n     * At the opposite of {@link WonderlandEngine.loadMainScene}, the scene loaded\n     * will be added to the list of existing scenes, and its resources will be made\n     * available for other scenes/prefabs/gltf to use.\n     *\n     * #### Resources Sharing\n     *\n     * Upon loading, the scene resources are added in the engine, and references\n     * to those resources are updated.\n     *\n     * It's impossible for a scene loaded with this method to import pipelines.\n     * Thus, the loaded scene will reference existing pipelines in the main scene,\n     * based on their names.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const scene = await engine.loadScene('Scene.bin');\n     * ```\n     *\n     * @note This method can only load Wonderland Engine `.bin` files.\n     *\n     * @param options The URL pointing to the scene to load or an object\n     *     holding additional loading options.\n     * @param progress Optional progress callback.\n     * @returns A new loaded {@link Scene}.\n     */\n    async loadScene(options: LoadOptions, progress?: ProgressCallback) {\n        const opts = Prefab.makeUrlLoadOptions(options);\n        const {streamed = true} = opts;\n        if (streamed) {\n            const options = await Scene.loadStream(opts, progress);\n            const scene = await this._loadSceneFromStream(Scene, options);\n            this._validateLoadedScene(scene);\n            scene._initialize();\n            return scene;\n        } else {\n            const options = await Scene.loadBuffer(opts, progress);\n            return this.loadSceneFromBuffer(options);\n        }\n    }\n\n    /**\n     * Create a glTF scene from a URL.\n     *\n     * @note Loading glTF files requires `enableRuntimeGltf` to be checked in\n     *     the editor Project Settings.\n     *\n     * @note This method is a wrapper around {@link WonderlandEngine.loadGLTFFromBuffer}.\n     *\n     * @param options The URL pointing to the scene to load or an object\n     *     holding additional loading options, optionally including\n     *     {@link GLTFOptions}. {@link LoadOptions.streamed} is ignored as\n     *     streamed glTF parsing isn't supported.\n     * @param progress Optional progress callback.\n     * @returns A new loaded {@link PrefabGLTF}.\n     */\n    async loadGLTF(opts: LoadOptions & GLTFOptions, progress?: ProgressCallback) {\n        const memOptions = await Scene.loadBuffer(opts, progress);\n        const options = isString(opts) ? memOptions : {...opts, ...memOptions};\n        return this.loadGLTFFromBuffer(options);\n    }\n\n    /**\n     * Similar to {@link WonderlandEngine.loadScene}, but loading is done from\n     * an `ArrayBuffer`.\n     *\n     * @throws If the scene is streamable.\n     *\n     * @param options An object containing the buffer and extra metadata.\n     * @returns A new loaded {@link Scene}.\n     */\n    loadSceneFromBuffer(options: InMemoryLoadOptions) {\n        const scene = this._loadSceneFromBuffer(Scene, options);\n        this._validateLoadedScene(scene);\n        scene._initialize();\n        return scene;\n    }\n\n    /**\n     * Similar to {@link WonderlandEngine.loadGLTF}, but loading is done from\n     * an `ArrayBuffer`.\n     *\n     * @note Loading glTF files requires `enableRuntimeGltf` to be checked in\n     *     the editor Project Settings.\n     *\n     * @param options An object containing the buffer and extra glTF metadata.\n     * @returns A new loaded {@link PrefabGLTF}.\n     */\n    loadGLTFFromBuffer(options: InMemoryLoadOptions & GLTFOptions) {\n        Scene.validateBufferOptions(options);\n        const {buffer, extensions = false} = options;\n\n        const wasm = this.wasm;\n\n        if (!wasm._wl_glTF_scene_create) {\n            throw new Error(\n                'Loading .gltf files requires `enableRuntimeGltf` to be checked in the editor Project Settings.'\n            );\n        }\n\n        const ptr = wasm.copyBufferToHeap(buffer);\n\n        try {\n            const index = wasm._wl_glTF_scene_create(extensions, ptr, buffer.byteLength);\n            const scene = new PrefabGLTF(this, index);\n            this._scenes[scene._index] = scene;\n            /* Start downloading uncompressed textures as soon as possible */\n            if (this.runtimeVersion.patch) {\n                this._loadUncompressedImages(scene._index);\n            }\n            return scene;\n        } finally {\n            /* Catch calls to abort(), e.g. via asserts */\n            wasm._free(ptr);\n        }\n    }\n\n    /**\n     * Checks whether the given component is registered or not.\n     *\n     * @param typeOrClass A string representing the component typename (e.g., `'cursor-component'`),\n     *     or a component class (e.g., `CursorComponent`).\n     * @returns `true` if the component is registered, `false` otherwise.\n     */\n    isRegistered(typeOrClass: string | ComponentConstructor) {\n        return this.#wasm.isRegistered(\n            isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName\n        );\n    }\n\n    /**\n     * Retrieve the registered component from its type name.\n     *\n     * @param typename The component {@link Component.TypeName} property\n     * @returns The class if a component was registered with given name, `null` otherwise.\n     */\n    getComponentClass<T extends Component>(\n        typename: string\n    ): ComponentConstructor<T> | null {\n        const index = this.wasm._componentTypeIndices[typename];\n        if (index === undefined) return null;\n        return this.wasm._componentTypes[index] as ComponentConstructor<T>;\n    }\n\n    /**\n     * Resize the canvas and the rendering context.\n     *\n     * @note The `width` and `height` parameters will be scaled by the\n     * `devicePixelRatio` value. By default, the pixel ratio used is\n     * [window.devicePixelRatio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio).\n     *\n     * @param width The width, in CSS pixels.\n     * @param height The height, in CSS pixels.\n     * @param devicePixelRatio The pixel ratio factor.\n     */\n    resize(width: number, height: number, devicePixelRatio = window.devicePixelRatio) {\n        width = width * devicePixelRatio;\n        height = height * devicePixelRatio;\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.wasm._wl_application_resize(width, height);\n        this.onResize.notify();\n    }\n\n    /**\n     * Run the next frame.\n     *\n     * @param fixedDelta The elapsed time between this frame and the previous one.\n     *\n     * @note The engine automatically schedules next frames. You should only\n     * use this method for testing.\n     */\n    nextFrame(fixedDelta: number = 0) {\n        this.#wasm._wl_nextFrame(fixedDelta);\n    }\n\n    /**\n     * Request an XR session.\n     *\n     * @note Please use this call instead of directly calling `navigator.xr.requestSession()`.\n     * Wonderland Engine requires to be aware that a session is started, and this\n     * is done through this call.\n     *\n     * @param mode The XR mode.\n     * @param features An array of required features, e.g., `['local-floor', 'hit-test']`.\n     * @param optionalFeatures An array of optional features, e.g., `['bounded-floor', 'depth-sensing']`.\n     * @returns A promise resolving with the `XRSession`, a string error message otherwise.\n     */\n    requestXRSession(\n        mode: XRSessionMode,\n        features: string[],\n        optionalFeatures: string[] = []\n    ): Promise<XRSession> {\n        return this.#webxr.requestSession(mode, features, optionalFeatures);\n    }\n\n    /**\n     * Offer an XR session.\n     *\n     * Adds an interactive UI element to the browser interface to start an XR\n     * session. Browser support is optional, so it's advised to still allow\n     * requesting a session with a UI element on the website itself.\n     *\n     * @note Please use this call instead of directly calling `navigator.xr.offerSession()`.\n     * Wonderland Engine requires to be aware that a session is started, and this\n     * is done through this call.\n     *\n     * @param mode The XR mode.\n     * @param features An array of required features, e.g., `['local-floor', 'hit-test']`.\n     * @param optionalFeatures An array of optional features, e.g., `['bounded-floor', 'depth-sensing']`.\n     * @returns A promise resolving with the `XRSession`, a string error message otherwise.\n     *\n     * @since 1.1.5\n     */\n    offerXRSession(\n        mode: XRSessionMode,\n        features: string[],\n        optionalFeatures: string[] = []\n    ): Promise<XRSession> {\n        return this.#webxr.offerSession(mode, features, optionalFeatures);\n    }\n\n    /**\n     * Wrap an object ID using {@link Object}.\n     *\n     * @note This method performs caching and will return the same\n     * instance on subsequent calls.\n     *\n     * @param objectId ID of the object to create.\n     * @returns The object\n     *\n     * @deprecated Use {@link Scene#wrap} instead.\n     *\n     */\n    wrapObject(objectId: number): Object3D {\n        return this.scene.wrap(objectId);\n    }\n\n    toString() {\n        return 'engine';\n    }\n\n    /* Public Getters & Setter */\n\n    /** Currently active scene. */\n    get scene(): Scene {\n        return this._scene;\n    }\n\n    /**\n     * WebAssembly bridge.\n     *\n     * @note Use with care. This object is used to communicate\n     * with the WebAssembly code throughout the api.\n     *\n     * @hidden\n     */\n    get wasm(): WASM {\n        return this.#wasm;\n    }\n\n    /**\n     * WebXR api.\n     *\n     * @hidden\n     */\n    get webxr(): WebXR {\n        return this.#webxr;\n    }\n\n    /** Canvas element that Wonderland Engine renders to. */\n    get canvas(): HTMLCanvasElement {\n        return this.#wasm.canvas;\n    }\n\n    /**\n     * Current WebXR session or `null` if no session active.\n     *\n     * @deprecated Use {@link XRSessionState.session} on the {@link xr}\n     * object instead.\n     */\n    get xrSession(): XRSession | null {\n        return this.xr?.session ?? null;\n    }\n\n    /**\n     * Current WebXR frame or `null` if no session active.\n     *\n     * @deprecated Use {@link XRSessionState.frame} on the {@link xr}\n     * object instead.\n     */\n    get xrFrame(): XRFrame | null {\n        return this.xr?.frame ?? null;\n    }\n\n    /**\n     * Current WebXR base layer or `null` if no session active.\n     *\n     * @deprecated Use {@link XRSessionState.baseLayer} on the {@link xr}\n     * object instead.\n     */\n    get xrBaseLayer(): XRProjectionLayer | XRWebGLLayer | null {\n        return this.xr?.baseLayer ?? null;\n    }\n\n    /**\n     * Current WebXR framebuffer or `null` if no session active.\n     *\n     * @deprecated Use {@link XRSessionState.framebuffers} on the {@link xr}\n     * object instead.\n     */\n    get xrFramebuffer(): WebGLFramebuffer | null {\n        return this.xr?.framebuffers[0] ?? null;\n    }\n\n    /**\n     * WebXR framebuffer scale factor.\n     */\n    get xrFramebufferScaleFactor() {\n        return this.#webxr.framebufferScaleFactor;\n    }\n\n    set xrFramebufferScaleFactor(value: number) {\n        this.#webxr.framebufferScaleFactor = value;\n    }\n\n    /** Physics manager, only available when physx is enabled in the runtime. */\n    get physics() {\n        return this.#physics;\n    }\n\n    /** Texture resources */\n    get textures() {\n        return this._textures;\n    }\n\n    /** Material resources */\n    get materials() {\n        return this._materials;\n    }\n\n    /** Mesh resources */\n    get meshes() {\n        return this._meshes;\n    }\n\n    /** Morph target set resources */\n    get morphTargets() {\n        return this._morphTargets;\n    }\n\n    /** Font resources */\n    get fonts() {\n        return this._fonts;\n    }\n\n    /** Particle effect resources */\n    get particleEffects() {\n        return this._particleEffects;\n    }\n\n    /** Get all uncompressed images. */\n    get images(): ImageLike[] {\n        const wasm = this.wasm;\n        const max = wasm._tempMemSize >> 1;\n        const count = wasm._wl_get_images(wasm._tempMem, max);\n        const result = new Array(count);\n        for (let i = 0; i < count; ++i) {\n            const index = wasm._tempMemUint16[i];\n            result[i] = wasm._images[index];\n        }\n        return result;\n    }\n\n    /**\n     * Promise that resolve once all uncompressed images are loaded.\n     *\n     * This is equivalent to calling {@link WonderlandEngine.images}, and wrapping each\n     * `load` listener into a promise.\n     */\n    get imagesPromise(): Promise<ImageLike[]> {\n        const wasm = this.wasm;\n        const max = wasm._tempMemSize >> 1;\n        const count = wasm._wl_get_images(wasm._tempMem, max);\n        const result = new Array(count);\n        for (let i = 0; i < count; ++i) {\n            const index = wasm._tempMemUint16[i];\n            const loading = this._uncompressedPromises[index];\n            result[i] = (loading ?? Promise.resolve()).then(() => wasm._images[index]);\n        }\n        return Promise.all(result);\n    }\n\n    /**\n     * `true` if the texture streaming is currently idle, i.e.,\n     * not attempting to upload any textures.\n     *\n     * @hidden\n     */\n    get isTextureStreamingIdle() {\n        return !!this.wasm._wl_renderer_streaming_idle();\n    }\n\n    /**\n     * `true` if reverse-Z rendering is supported and enabled.\n     *\n     * @hidden\n     */\n    get isReverseZEnabled() {\n        return !!this.wasm._wl_renderer_isReverseZEnabled();\n    }\n\n    /*\n     * Enable or disable the mechanism to automatically resize the canvas.\n     *\n     * Internally, the engine uses a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver).\n     * Changing the canvas css will thus automatically be tracked by the engine.\n     */\n    set autoResizeCanvas(flag: boolean) {\n        const state = !!this.#resizeObserver;\n        if (state === flag) return;\n\n        if (!flag) {\n            this.#resizeObserver?.unobserve(this.canvas);\n            this.#resizeObserver = null;\n            return;\n        }\n        this.#resizeObserver = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                if (entry.target === this.canvas) {\n                    this.resize(entry.contentRect.width, entry.contentRect.height);\n                }\n            }\n        });\n        this.#resizeObserver.observe(this.canvas);\n    }\n\n    /** `true` if the canvas is automatically resized by the engine. */\n    get autoResizeCanvas() {\n        return this.#resizeObserver !== null;\n    }\n\n    /** Retrieves the runtime version. */\n    get runtimeVersion(): Version {\n        return this.#wasm.runtimeVersion;\n    }\n\n    /** Engine {@link Logger}. Use it to turn on / off logging. */\n    get log(): Logger {\n        return this.#wasm._log;\n    }\n\n    /* Internal-Only Methods */\n\n    /**\n     * Initialize the engine.\n     *\n     * @note Should be called after the WebAssembly is fully loaded.\n     *\n     * @hidden\n     */\n    _init(withRenderer: boolean): boolean {\n        const success = this.#wasm._wl_application_init(withRenderer);\n        if (!success) {\n            throw new Error(`Failed to initializing Wonderland runtime`);\n        }\n\n        this.resize(this.canvas.clientWidth, this.canvas.clientHeight);\n        return true;\n    }\n\n    /**\n     * Reset the runtime state, including:\n     *     - Component cache\n     *     - Images\n     *     - Callbacks\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _reset() {\n        this.wasm.reset();\n        this._scenes.length = 0;\n        this._scene = this._reload(0);\n        this.#bundleCache.clear();\n        return this.switchTo(this._scene);\n    }\n\n    /**\n     * Attempt to hot reload the engine.\n     *\n     * @param filename URL of the file to use for the reload.\n     *     If `null`, forces a full page reload.\n     *\n     * @hidden\n     */\n    async _reloadRequest(filename: string | null) {\n        if (filename === null) {\n            reloadPage(this);\n            return;\n        }\n\n        try {\n            if (this.autoHotReload)\n                await this.loadMainScene({url: filename, nocache: true});\n        } catch (e) {\n            console.error('Hot reload request failed to load main scene, reason:', e);\n            setTimeout(() => reloadPage(this), 1000);\n            return;\n        }\n\n        this.onHotReloadRequest.notify(filename);\n    }\n\n    /**\n     * Add an empty scene.\n     *\n     * @returns The newly created scene\n     *\n     * @hidden\n     */\n    _createEmpty(): Scene {\n        const wasm = this.wasm;\n        const index = wasm._wl_scene_create_empty();\n        const scene = new Scene(this, index);\n        this._scenes[index] = scene;\n        return scene;\n    }\n\n    /** @hidden */\n    _destroyScene(instance: Prefab) {\n        const wasm = this.wasm;\n        wasm._wl_scene_destroy(instance._index);\n\n        const index = instance._index;\n        (instance._index as number) = -1;\n        if (this.erasePrototypeOnDestroy) {\n            Object.setPrototypeOf(instance, DestroyedPrefabInstance);\n        }\n\n        this._scenes[index] = null;\n    }\n\n    /**\n     * Reload the state of the engine with a new main scene.\n     *\n     * @param index Scene index.\n     *\n     * @hidden\n     */\n    private _reload(index: number) {\n        const scene = new Scene(this, index);\n        this._scenes[index] = scene;\n\n        this._textures = new TextureManager(this);\n        this._materials = new MaterialManager(this);\n        this._meshes = new MeshManager(this);\n        this._morphTargets = new ResourceManager(this, MorphTargets);\n        this._fonts = new ResourceManager(this, Font);\n        this._particleEffects = new ResourceManager(this, ParticleEffect);\n        this._uncompressedPromises.length = 0;\n\n        return scene;\n    }\n\n    /**\n     * Helper to load a main scene from an `ArrayBuffer` or `ReadableStream`.\n     *\n     * @param data Buffer or stream.\n     * @param url Base URL.\n     * @param nocache If `true`, force a browser reload of files to download.\n     *     Only affects components loading for now.\n     * @param options Activation options.\n     * @returns The loaded main scene.\n     *\n     * @hidden\n     */\n    private async _loadMainScene(\n        data: ArrayBuffer | ReadableStream<Uint8Array>,\n        url: string,\n        nocache: boolean,\n        options: ActivateOptions\n    ) {\n        if (nocache) url += `?t=${Date.now()}`;\n\n        const wasm = this.#wasm;\n\n        /*\n         * - Deactivate currently active scene\n         * - Destroy all scenes\n         * - Mark all resources as destroyed\n         * - Activation of main scene to prevent the runtime to be in limbo\n         */\n\n        const isLoadingScreen = this._mainSceneVersion === 0;\n        ++this._mainSceneVersion;\n\n        /* If this is the loading screen, keep it active until the first main\n         * scene got loaded. Otherwise the progress bar won't update. This\n         * assumes the loading screen has no components that need onDestroy(). */\n        if (!isLoadingScreen) {\n            wasm._wl_deactivate_activeScene();\n\n            /* Only destroy all scenes once the current active one is disabled */\n            for (let i = this._scenes.length - 1; i >= 0; --i) {\n                const scene = this._scenes[i];\n                if (scene) scene.destroy();\n            }\n        }\n\n        /* Mark all resources as destroyed */\n        this._textures._clear();\n        this._materials._clear();\n        this._meshes._clear();\n        this._morphTargets._clear();\n        this._uncompressedPromises.length = 0;\n\n        const stream =\n            data instanceof ReadableStream\n                ? data\n                : new ReadableStream(new ArrayBufferSource(data));\n        const sink = new ChunkedSceneLoadSink(this, SceneType.Main, url);\n        await stream.pipeTo(new WritableStream(sink));\n\n        const mainScene = this._reload(sink.sceneIndex);\n        /* Start downloading uncompressed textures as soon as possible */\n        this._loadUncompressedImages(mainScene._index);\n\n        /**\n         * @todo(2.0.0)\n         *\n         * Backward compatibility: We need to set this instance reference on the\n         * engine **before** component creation occurs, since users have been accessing\n         * the scene with `this.engine.scene` in `init()`.\n         */\n        this._preactivate(mainScene);\n\n        const componentsBundle = mainScene.componentsBundle;\n        if (componentsBundle) {\n            /* Relative URL are resolved from the script that imports, and **not** from\n             * the document. We assume that the components bundle is located alongside\n             * other resources, relative to the .bin.\n             *\n             * @note: `componentsBundle` already contains the same baseURL as the .bin. */\n            const bundleURL = new URL(componentsBundle, document.baseURI);\n            const url = nocache ? bundleURL.href.split('?')[0] : bundleURL.href;\n            await this.registerBundle(url, nocache);\n        }\n        mainScene._initialize();\n\n        await this.switchTo(mainScene, options);\n\n        return mainScene;\n    }\n\n    /**\n     * Helper to load prefab and activatable scene from an `ArrayBuffer`.\n     *\n     * @param PrefabClass Scene constructor.\n     * @param options Loading options.\n     * @returns The loaded prefab.\n     *\n     * @hidden\n     */\n    private _loadSceneFromBuffer<T extends Prefab>(\n        PrefabClass: Constructor<T>,\n        options: InMemoryLoadOptions\n    ) {\n        const {buffer, url} = Scene.validateBufferOptions(options);\n\n        const sink = new ChunkedSceneLoadSink(this, SceneType.Prefab, url);\n        sink.write(new Uint8Array(buffer));\n        sink.close();\n        const index = sink.sceneIndex;\n\n        /* The scene was successfully loaded on the wasm side, we need to\n         * add it to the scene cache, since the wasm might read it. */\n        const scene = new PrefabClass(this, index);\n        this._scenes[index] = scene;\n        /* Start downloading uncompressed textures as soon as possible */\n        this._loadUncompressedImages(scene._index);\n\n        return scene;\n    }\n\n    /**\n     * Helper to load prefab and activatable scene from a `ReadableStream`.\n     *\n     * @param PrefabClass Scene constructor.\n     * @param options Loading options.\n     * @returns The loaded prefab.\n     *\n     * @hidden\n     */\n    private async _loadSceneFromStream<T extends Prefab>(\n        PrefabClass: Constructor<T>,\n        options: StreamLoadOptions\n    ) {\n        const {stream, url} = Scene.validateStreamOptions(options);\n        const sink = new ChunkedSceneLoadSink(this, SceneType.Prefab, url);\n        await stream.pipeTo(new WritableStream(sink));\n        const index = sink.sceneIndex;\n\n        /* The scene was successfully loaded on the wasm side, we need to\n         * add it to the scene cache, since the wasm might read it. */\n        const scene = new PrefabClass(this, index);\n        this._scenes[index] = scene;\n        /* Start downloading uncompressed textures as soon as possible */\n        this._loadUncompressedImages(scene._index);\n\n        return scene;\n    }\n\n    /**\n     * Checks if the loaded scene is a prefab and throws an error if not.\n     *\n     * @param scene The loaded scene\n     *\n     * @hidden\n     */\n    private _validateLoadedPrefab(scene: Prefab) {\n        if (this.wasm._wl_scene_activatable(scene._index)) {\n            this.wasm._wl_scene_destroy(scene._index);\n            throw new Error(\n                'File is not a prefab. To load a scene, use loadScene() instead'\n            );\n        }\n    }\n\n    /**\n     * Checks if the loaded scene is a scene (and not a prefab) and throws an\n     * error if not.\n     *\n     * @param scene The loaded scene\n     *\n     * @hidden\n     */\n    private _validateLoadedScene(scene: Scene) {\n        if (!this.wasm._wl_scene_activatable(scene._index)) {\n            this.wasm._wl_scene_destroy(scene._index);\n            throw new Error(\n                'File is not a scene. To load a prefab, use loadPrefab() instead'\n            );\n        }\n    }\n\n    /**\n     * Set the scene data on the engine, before the activation occurs.\n     *\n     * @hidden\n     */\n    private _preactivate(scene: Scene) {\n        this._scene = scene;\n        /* Update the current active scene in the physx manager */\n        if (this.physics) (this.physics._hit._scene as Scene) = scene;\n    }\n\n    /**\n     * Notify the runtime when images are ready to be uploaded.\n     *\n     * @param sceneIndex Index of the scene where the image originated\n     * @hidden\n     */\n    private _loadUncompressedImages(sceneIndex: number) {\n        const mainSceneVersion = this._mainSceneVersion;\n        const wasm = this.wasm;\n\n        const bitmapOptions: ImageBitmapOptions = {\n            colorSpaceConversion: 'none',\n        };\n\n        const imageCount = wasm._wl_image_count();\n        for (let i = 0; i < imageCount; ++i) {\n            if (wasm._wl_image_originalScene(i) !== sceneIndex) continue;\n\n            const jsImageIndex = wasm._wl_image_get_jsImage_index(i);\n\n            const image = wasm._images[jsImageIndex];\n            if (!image) continue;\n\n            let promise: Promise<ImageLike> = onImageReady(image);\n            if (this.loadUncompressedImagesAsBitmap) {\n                promise = promise.then((img) => createImageBitmap(img, bitmapOptions));\n            }\n            this._uncompressedPromises[jsImageIndex] = promise\n                .then((img) => {\n                    /* Discard the promise if the main scene has been reloaded */\n                    if (this._mainSceneVersion === mainSceneVersion) {\n                        wasm._wl_image_markReady(i, img.width, img.height, needsFlipY(img));\n                    }\n                })\n                .catch((e) => {\n                    /* Discard the promise if the main scene has been reloaded */\n                    if (this._mainSceneVersion === mainSceneVersion) {\n                        this.log.error(\n                            LogTag.Scene,\n                            'Failed to load uncompressed image',\n                            e\n                        );\n                    }\n                });\n        }\n    }\n}\n", "/**\n * Assert that the given bit index is less than 32.\n *\n * @param bit The bit to test.\n */\nfunction assert(bit: number): void {\n    if (bit >= 32) {\n        throw new Error(`BitSet.enable(): Value ${bit} is over 31`);\n    }\n}\n\n/**\n * Stores a bit pattern to quickly test if an index is enabled / disabled.\n *\n * This class can store up to **32** different values in the range [0; 31].\n *\n * #### Usage\n *\n * ```js\n * const bitset = new BitSet();\n * bitset.enable(10); // Enable bit at index `10`.\n * console.log(bitset.enabled(10)); // Prints 'true'.\n * ```\n *\n * #### TypeScript\n *\n * The set can be typed over an enum:\n *\n * ```ts\n * enum Tag {\n *     First = 0,\n *     Second = 1,\n * }\n *\n * const bitset = new BitSet<Tag>();\n * bitset.enable(Tag.First);\n * ```\n */\nexport class BitSet<T extends number = number> {\n    /** Enabled bits. @hidden */\n    private _bits: number = 0;\n\n    /**\n     * Enable the bit at the given index.\n     *\n     * @param bits A spread of all the bits to enable.\n     * @returns Reference to self (for method chaining).\n     */\n    enable(...bits: T[]) {\n        for (const bit of bits) {\n            assert(bit);\n            /* Casts the result to an unsigned integer */\n            this._bits |= (1 << bit) >>> 0;\n        }\n        return this;\n    }\n\n    /**\n     * Enable all bits.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    enableAll() {\n        this._bits = ~0;\n        return this;\n    }\n\n    /**\n     * Disable the bit at the given index.\n     *\n     * @param bits A spread of all the bits to disable.\n     * @returns Reference to self (for method chaining).\n     */\n    disable(...bits: T[]) {\n        for (const bit of bits) {\n            assert(bit);\n            /* Casts the result to an unsigned integer */\n            this._bits &= ~((1 << bit) >>> 0);\n        }\n        return this;\n    }\n\n    /**\n     * Disable all bits.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    disableAll() {\n        this._bits = 0;\n        return this;\n    }\n\n    /**\n     * Checker whether the bit is set or not.\n     *\n     * @param bit The bit to check.\n     * @returns `true` if it's enabled, `false` otherwise.\n     */\n    enabled(bit: T) {\n        return !!(this._bits & ((1 << bit) >>> 0));\n    }\n}\n", "import {BitSet} from './bitset.js';\nimport {Emitter} from './event.js';\n\n/**\n * Logging levels supported by {@link Logger}.\n */\nexport enum LogLevel {\n    Info = 0,\n    Warn = 1,\n    Error = 2,\n}\n\n/**\n * Logging wrapper.\n *\n * This is used to allow turning on/off:\n *     - `console.log`\n *     - `console.warn`\n *     - `console.error`\n *\n * #### Usage\n *\n * ```js\n * import {Logger, LogLevel, LogTag} from '@wonderlandengine/api';\n *\n * // Create a logger with only the \"error\" and \"warn\" levels activated\n * const logger = new Logger(LogLevel.Warn, LogLevel.Error);\n *\n * // Only the \"error\" and \"warn\" levels are activated,\n * // this message isn't logged.\n * logger.info(LogTag.Component, 'This message is shushed')\n *\n * // Prints 'Hello Error!'\n * logger.error(LogTag.Component, 'Hello Error!');\n *\n * // Prints 'Hello Warning!'\n * logger.warn(LogTag.Component, 'Hello Warning!');\n * ```\n *\n * The log levels can be changed at anytime using the {@link BitSet} api:\n *\n * ```js\n * // Enable the \"info\" level\n * logger.levels.enable(LogLevel.Info);\n * * // Disable the \"warn\" level\n * logger.levels.disable(LogLevel.Warn);\n * ```\n *\n * #### Tags\n *\n * In addition, the logger supports tagging messages:\n *\n * ```js\n * import {Logger, LogLevel, LogTag} from '@wonderlandengine/api';\n *\n * const logger = new Logger(LogLevel.Info);\n *\n * logger.tags.disableAll();\n *\n * // All tags are off, this message isn't logged\n * logger.info(LogTag.Component, 'This message is shushed');\n *\n * logger.tags.enable(LogTag.Component);\n * logger.info(LogTag.Component, 'Hello World!') // Prints 'Hello World!'\n * ```\n *\n * The tagging system gives another layer of control to enable / disable\n * some specific logs.\n */\nexport class Logger {\n    /**\n     * Bitset of enabled levels.\n     *\n     * @hidden\n     */\n    levels: BitSet<LogLevel> = new BitSet();\n\n    /**\n     * Bitset of enabled tags.\n     *\n     * @hidden\n     */\n    tags: BitSet = new BitSet().enableAll();\n\n    /**\n     * Notified when an `info`, `warn`, or `error` message is logged.\n     *\n     * @note The emitter is always notified, even if the logger levels\n     * and tags are disabled.\n     *\n     * @note The message is passed as an array, similar to `console.log`.\n     *\n     * #### Usage\n     *\n     * ```js\n     * import {LogLevel} from '@wonderlandengine/api';\n     *\n     * engine.logger.onLog.add((level, messages, tag) => {\n     *     // Only process error messages\n     *     if (level !== LogLevel.Error) return;\n     *\n     *     // Only process engine logs\n     *     if (tag !== LogTag.Engine) return;\n     *\n     *     const str = messages.join(' ');\n     *     sendAnalytics(str);\n     * });\n     * ```\n     */\n    onLog: Emitter<[LogLevel, unknown[], number]> = new Emitter();\n\n    /**\n     * Create a new logger instance.\n     *\n     * @param levels Default set of levels to enable.\n     */\n    constructor(...levels: LogLevel[]) {\n        this.levels.enable(...levels);\n    }\n\n    /**\n     * Log the message(s) using `console.log`.\n     *\n     * @param tag Tag represented by a positive integer.\n     * @param msg A spread of message to log.\n     * @returns Reference to self (for method chaining).\n     */\n    info(tag: number, ...msg: unknown[]): this {\n        if (this.levels.enabled(LogLevel.Info) && this.tags.enabled(tag)) {\n            console.log(...msg);\n        }\n        this.onLog.notify(LogLevel.Info, msg, tag);\n        return this;\n    }\n\n    /**\n     * Log the message(s) using `console.warn`.\n     *\n     * @param tag Tag represented by a positive integer.\n     * @param msg A spread of message to log.\n     * @returns Reference to self (for method chaining).\n     */\n    warn(tag: number, ...msg: unknown[]): this {\n        if (this.levels.enabled(LogLevel.Warn) && this.tags.enabled(tag)) {\n            console.warn(...msg);\n        }\n        this.onLog.notify(LogLevel.Warn, msg, tag);\n        return this;\n    }\n\n    /**\n     * Log the message(s) using `console.error`.\n     *\n     * @param tag Tag represented by a positive integer.\n     * @param msg A spread of message to log.\n     * @returns Reference to self (for method chaining).\n     */\n    error(tag: number, ...msg: unknown[]): this {\n        if (this.levels.enabled(LogLevel.Error) && this.tags.enabled(tag)) {\n            console.error(...msg);\n        }\n        this.onLog.notify(LogLevel.Error, msg, tag);\n        return this;\n    }\n}\n", "import {Version} from './version.js';\nimport {WonderlandEngine} from './engine.js';\nimport {ComponentProperty, Type, defaultPropertyCloner} from './property.js';\nimport {CBORReader, CBORType, getType} from './utils/cbor.js';\nimport {Logger} from './utils/logger.js';\nimport {\n    inheritProperties,\n    Component,\n    ComponentConstructor,\n    ComponentProto,\n    BrokenComponent,\n    AnimationComponent,\n    LogTag,\n} from './wonderland.js';\nimport {ImageLike} from './types.js';\nimport {Scene} from './scene.js';\nimport {Prefab} from './prefab.js';\nimport {ComponentPropertyDecoder, setupComponentClass} from './component.js';\n\n/**\n * Low-level wrapper to interact with the WebAssembly code.\n *\n * @hidden\n */\nexport class WASM {\n    /**\n     * Emscripten wasm field.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly wasm: ArrayBuffer = null!;\n\n    /**\n     * Emscripten canvas.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly canvas: HTMLCanvasElement = null!;\n\n    /**\n     * WebGPU device.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly preinitializedWebGPUDevice: any = null;\n\n    /**\n     * Convert a WASM memory view to a JavaScript string.\n     *\n     * @param ptr Pointer start\n     * @param ptrEnd Pointer end\n     * @returns JavaScript string\n     */\n    UTF8ViewToString: (ptr: number, ptrEnd: number) => string;\n\n    /** Logger instance. */\n    readonly _log: Logger = new Logger();\n\n    /** If `true`, logs will not spam the console on error. */\n    _deactivate_component_on_error: boolean = false;\n\n    /** Temporary memory pointer. */\n    _tempMem: number = null!;\n    /** Temporary memory size. */\n    _tempMemSize: number = 0;\n    /** Temporary float memory view. */\n    _tempMemFloat: Float32Array = null!;\n    /** Temporary int memory view. */\n    _tempMemInt: Int32Array = null!;\n    /** Temporary uint8 memory view. */\n    _tempMemUint8: Uint8Array = null!;\n    /** Temporary uint32 memory view. */\n    _tempMemUint32: Uint32Array = null!;\n    /** Temporary uint16 memory view. */\n    _tempMemUint16: Uint16Array = null!;\n\n    /** Loading screen .bin file data */\n    _loadingScreen: ArrayBuffer | null = null;\n\n    /** List of callbacks triggered when the scene is loaded. */\n    readonly _sceneLoadedCallback: any[] = [];\n\n    /** Image cache. */\n    _images: (ImageLike | null)[] = [null];\n\n    /** Component instances. */\n    private _components: Component[] = null!;\n\n    /** Component Type info. */\n    _componentTypes: ComponentConstructor[] = [];\n\n    /** Index per component type name. */\n    _componentTypeIndices: Record<string, number> = {};\n\n    /** Wonderland engine instance. */\n    private _engine: WonderlandEngine = null!;\n\n    /**\n     * `true` if this runtime is using physx.\n     *\n     * @note This api is meant to be used internally.\n     */\n    private _withPhysX: boolean = false;\n\n    /** Decoder for UTF8 `ArrayBuffer` to JavaScript string. */\n    private readonly _utf8Decoder = new TextDecoder('utf8');\n\n    /**\n     * Registration index of {@link BrokenComponent}.\n     *\n     * This is used to return dummy instances when a component\n     * isn't registered.\n     *\n     * @hidden\n     */\n    private readonly _brokenComponentIndex = 0;\n\n    /**\n     * Create a new instance of the WebAssembly <> API bridge.\n     *\n     * @param threads `true` if the runtime used has threads support\n     */\n    constructor(threads: boolean) {\n        if (threads) {\n            this.UTF8ViewToString = (s: number, e: number) => {\n                if (!s) return '';\n                return this._utf8Decoder.decode(this.HEAPU8.slice(s, e));\n            };\n        } else {\n            this.UTF8ViewToString = (s: number, e: number) => {\n                if (!s) return '';\n                return this._utf8Decoder.decode(this.HEAPU8.subarray(s, e));\n            };\n        }\n\n        (this._brokenComponentIndex as number) = this._registerComponent(BrokenComponent);\n    }\n\n    /** Retrieves the runtime version. */\n    get runtimeVersion(): Version {\n        /** We cannot use _tempMem because we are meant to be called before it's initialized */\n        const tempBuf = this._malloc(4 * 2);\n        const tempVersion = new Uint16Array(this.HEAP8.buffer, tempBuf, 4);\n        this._wl_runtime_version(tempBuf);\n        const version = {\n            major: tempVersion[0],\n            minor: tempVersion[1],\n            patch: tempVersion[2],\n            rc: tempVersion[3],\n        };\n        this._free(tempBuf);\n        return version;\n    }\n\n    /**\n     * Reset the cache of the library.\n     *\n     * @note Should only be called when tearing down the runtime.\n     */\n    reset() {\n        /* Called first to perform cleanup. */\n        this._wl_reset();\n\n        this._components = null!;\n        this._images.length = 1;\n        this.allocateTempMemory(1024);\n\n        this._componentTypes = [];\n        this._componentTypeIndices = {};\n        (this._brokenComponentIndex as number) = this._registerComponent(BrokenComponent);\n    }\n\n    /**\n     * Checks whether the given component is registered or not.\n     *\n     * @param ctor  A string representing the component typename (e.g., `'cursor-component'`).\n     * @returns `true` if the component is registered, `false` otherwise.\n     */\n    isRegistered(type: string) {\n        return type in this._componentTypeIndices;\n    }\n\n    /**\n     * Register a legacy component in this Emscripten instance.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @param typeName The name of the component.\n     * @param params An object containing the parameters (properties).\n     * @param object The object's prototype.\n     * @returns The registration index\n     */\n    _registerComponentLegacy(\n        typeName: string,\n        params: Record<string, ComponentProperty>,\n        object: ComponentProto\n    ) {\n        const ctor = class CustomComponent extends Component {};\n        ctor.TypeName = typeName;\n        ctor.Properties = params;\n        Object.assign(ctor.prototype, object);\n        return this._registerComponent(ctor);\n    }\n\n    /**\n     * Register a class component in this Emscripten instance.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @param ctor The class to register.\n     * @returns The registration index.\n     */\n    _registerComponent(ctor: ComponentConstructor) {\n        if (!ctor.TypeName) throw new Error('no name provided for component.');\n        if (!ctor.prototype._triggerInit) {\n            throw new Error(\n                `registerComponent(): Component ${ctor.TypeName} must extend Component`\n            );\n        }\n\n        setupComponentClass(ctor);\n\n        const typeIndex =\n            ctor.TypeName in this._componentTypeIndices\n                ? this._componentTypeIndices[ctor.TypeName]\n                : this._componentTypes.length;\n        this._componentTypes[typeIndex] = ctor;\n        this._componentTypeIndices[ctor.TypeName] = typeIndex;\n\n        if (ctor === BrokenComponent) return typeIndex;\n\n        this._log.info(\n            LogTag.Engine,\n            'Registered component',\n            ctor.TypeName,\n            `(class ${ctor.name})`,\n            'with index',\n            typeIndex\n        );\n\n        if (ctor.onRegister) ctor.onRegister(this._engine);\n\n        return typeIndex;\n    }\n\n    /**\n     * Allocate the requested amount of temporary memory\n     * in this WASM instance.\n     *\n     * @param size The number of bytes to allocate\n     */\n    allocateTempMemory(size: number) {\n        this._log.info(LogTag.Engine, 'Allocating temp mem:', size);\n        this._tempMemSize = size;\n        if (this._tempMem) this._free(this._tempMem);\n        this._tempMem = this._malloc(this._tempMemSize);\n        this.updateTempMemory();\n    }\n\n    /**\n     * @todo: Delete this and only keep `allocateTempMemory`\n     *\n     * @param size Number of bytes to allocate\n     */\n    requireTempMem(size: number) {\n        if (this._tempMemSize >= size) return;\n        /* Grow in 1kb increments */\n        this.allocateTempMemory(Math.ceil(size / 1024) * 1024);\n    }\n\n    /**\n     * Update the temporary memory views. This must be called whenever the\n     * temporary memory address changes.\n     *\n     * @note This api is meant to be used internally.\n     */\n    updateTempMemory() {\n        this._tempMemFloat = new Float32Array(\n            this.HEAP8.buffer,\n            this._tempMem,\n            this._tempMemSize >> 2\n        );\n        this._tempMemInt = new Int32Array(\n            this.HEAP8.buffer,\n            this._tempMem,\n            this._tempMemSize >> 2\n        );\n        this._tempMemUint32 = new Uint32Array(\n            this.HEAP8.buffer,\n            this._tempMem,\n            this._tempMemSize >> 2\n        );\n        this._tempMemUint16 = new Uint16Array(\n            this.HEAP8.buffer,\n            this._tempMem,\n            this._tempMemSize >> 1\n        );\n        this._tempMemUint8 = new Uint8Array(\n            this.HEAP8.buffer,\n            this._tempMem,\n            this._tempMemSize\n        );\n    }\n\n    /**\n     * Returns a uint8 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required\n     * @returns A {@link TypedArray} over the WASM memory\n     */\n    getTempBufferU8(count: number): Uint8Array {\n        this.requireTempMem(count);\n        return this._tempMemUint8;\n    }\n\n    /**\n     * Returns a uint16 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required\n     * @returns A {@link TypedArray} over the WASM memory\n     */\n    getTempBufferU16(count: number): Uint16Array {\n        this.requireTempMem(count * 2);\n        return this._tempMemUint16;\n    }\n\n    /**\n     * Returns a uint32 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required.\n     * @returns A {@link TypedArray} over the WASM memory.\n     */\n    getTempBufferU32(count: number): Uint32Array {\n        this.requireTempMem(count * 4);\n        return this._tempMemUint32;\n    }\n\n    /**\n     * Returns a int32 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required.\n     * @returns A {@link TypedArray} over the WASM memory.\n     */\n    getTempBufferI32(count: number): Int32Array {\n        this.requireTempMem(count * 4);\n        return this._tempMemInt;\n    }\n\n    /**\n     * Returns a float32 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required.\n     * @returns A {@link TypedArray} over the WASM memory.\n     */\n    getTempBufferF32(count: number): Float32Array {\n        this.requireTempMem(count * 4);\n        return this._tempMemFloat;\n    }\n\n    /**\n     * Copy the string into temporary WASM memory and retrieve the pointer.\n     *\n     * @note This method will compute the strlen and append a `\\0`.\n     *\n     * @note The result should be used **directly** otherwise it might get\n     * overridden by any next call modifying the temporary memory.\n     *\n     * @param str The string to write to temporary memory\n     * @param byteOffset The starting byte offset in the temporary memory at which\n     *     the string should be written. This is useful when using multiple temporaries.\n     * @return The temporary pointer onto the WASM memory\n     */\n    tempUTF8(str: string, byteOffset = 0): number {\n        const strLen = this.lengthBytesUTF8(str) + 1;\n        this.requireTempMem(strLen + byteOffset);\n        const ptr = this._tempMem + byteOffset;\n        this.stringToUTF8(str, ptr, strLen);\n        return ptr;\n    }\n\n    /**\n     * Copy the buffer into the WASM heap.\n     *\n     * @note The returned pointer must be freed.\n     *\n     * @param buffer The buffer to copy into the heap.\n     * @returns An allocated pointer, that must be free after use.\n     */\n    copyBufferToHeap(buffer: ArrayBuffer): number {\n        const size = buffer.byteLength;\n        const ptr = this._malloc(size);\n        this.HEAPU8.set(new Uint8Array(buffer), ptr);\n        return ptr;\n    }\n\n    /**\n     * Returns `true` if the runtime supports physx or not.\n     */\n    get withPhysX(): boolean {\n        return this._withPhysX;\n    }\n\n    /**\n     * Set the engine instance holding this bridge.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @param engine The engine instance.\n     */\n    protected _setEngine(engine: WonderlandEngine): void {\n        this._engine = engine;\n    }\n\n    /* WebAssembly to JS call bridge. */\n\n    protected _wljs_reload(filenamePtr: number) {\n        const filename = filenamePtr ? this.UTF8ToString(filenamePtr) : null;\n        this._engine._reloadRequest(filename);\n    }\n    protected _wljs_init(withPhysX: boolean) {\n        this._withPhysX = withPhysX;\n\n        /* Target memory for JS API functions that return arrays */\n        this.allocateTempMemory(1024);\n    }\n    protected _wljs_scene_switch(index: number) {\n        const scene = this._engine._scenes[index] as Scene | null;\n        /* Scene can be null during testing with `engine.reset()` */\n        this._components = scene?._jsComponents ?? null!;\n    }\n    protected _wljs_destroy_image(index: number) {\n        const img = this._images[index];\n        if (!img) return;\n\n        this._images[index] = null;\n\n        if ((img as HTMLImageElement).src !== undefined) {\n            (img as HTMLImageElement).src = '';\n        }\n        if ((img as HTMLImageElement).onload !== undefined) {\n            (img as HTMLImageElement).onload = null;\n        }\n        if ((img as HTMLImageElement).onerror !== undefined) {\n            (img as HTMLImageElement).onerror = null;\n        }\n    }\n    protected _wljs_objects_markDestroyed(\n        sceneIndex: number,\n        idsPtr: number,\n        count: number\n    ) {\n        const scene = this._engine._scenes[sceneIndex] as Scene;\n        const start = idsPtr >>> 1;\n        for (let i = 0; i < count; ++i) {\n            const id = this.HEAPU16[start + i];\n            scene._destroyObject(id);\n        }\n    }\n    protected _wljs_scene_initialize(\n        sceneIndex: number,\n        idsPtr: number,\n        idsEnd: number,\n        paramDataPtr: number,\n        paramDataEndPtr: number,\n        offsetsPtr: number,\n        offsetsEndPtr: number\n    ) {\n        const cborEncoded = this.HEAPU8.subarray(paramDataPtr, paramDataEndPtr);\n        const offsets = this.HEAPU32.subarray(offsetsPtr >>> 2, offsetsEndPtr >>> 2);\n        const ids = this.HEAPU16.subarray(idsPtr >>> 1, idsEnd >>> 1);\n\n        const engine = this._engine;\n        const scene = engine._scenes[sceneIndex] as Scene;\n        const components = scene._jsComponents;\n\n        const cbor = new CBORReader(cborEncoded);\n\n        let componentsCount = 0;\n        {\n            const typeInfo = cbor.readTypeInfo();\n            if (getType(typeInfo) !== CBORType.Array) {\n                this._log.error(LogTag.Engine, 'Parameters data must be an array');\n                return;\n            }\n            componentsCount = cbor.readArrayLength(typeInfo) as number;\n        }\n        if (componentsCount !== ids.length) {\n            this._log.error(\n                LogTag.Engine,\n                `Parameters set for ${componentsCount} components, but expected ${ids.length}`\n            );\n            return;\n        }\n\n        const decoder = new ComponentPropertyDecoder(scene, offsets);\n        for (let i = 0; i < componentsCount; ++i) {\n            const id = Component._pack(sceneIndex, ids[i]);\n            const index = this._wl_get_js_component_index_for_id(id);\n            const component = components[index];\n            decoder.decode(cbor, component);\n        }\n    }\n\n    protected _wljs_set_component_param_translation(\n        scene: number,\n        component: number,\n        param: number,\n        valuePtr: number,\n        valueEndPtr: number\n    ) {\n        const components = (this._engine._scenes[scene] as Scene)._jsComponents;\n        const comp = components[component];\n\n        const value = this.UTF8ViewToString(valuePtr, valueEndPtr);\n        const ctor = comp.constructor as ComponentConstructor;\n        const paramName = ctor._propertyOrder[param];\n        (comp as Record<string, any>)[paramName] = value;\n    }\n\n    protected _wljs_get_component_type_index(namePtr: number, nameEndPtr: number) {\n        const typename = this.UTF8ViewToString(namePtr, nameEndPtr);\n        const index = this._componentTypeIndices[typename];\n        if (index === undefined) {\n            return this._brokenComponentIndex;\n        }\n        return index;\n    }\n    protected _wljs_component_create(\n        sceneIndex: number,\n        index: number,\n        id: number,\n        type: number,\n        object: number\n    ) {\n        const scene = this._engine._scenes[sceneIndex] as Scene;\n        scene._components.createJs(index, id, type, object);\n    }\n    protected _wljs_component_init(scene: number, component: number) {\n        const components = (this._engine._scenes[scene] as Scene)._jsComponents;\n        const c = components[component];\n        c._triggerInit();\n    }\n    protected _wljs_component_update(component: number, dt: number) {\n        const c = this._components[component];\n        c._triggerUpdate(dt);\n    }\n    protected _wljs_component_onActivate(component: number) {\n        const c = this._components[component];\n        c._triggerOnActivate();\n    }\n    protected _wljs_component_onDeactivate(component: number) {\n        const c = this._components[component];\n        c._triggerOnDeactivate();\n    }\n    protected _wljs_component_markDestroyed(\n        sceneIndex: number,\n        manager: number,\n        componentId: number\n    ) {\n        const scene = this._engine._scenes[sceneIndex] as Prefab;\n        scene._destroyComponent(manager, componentId);\n    }\n    protected _wljs_swap(scene: number, a: number, b: number) {\n        const components = (this._engine._scenes[scene] as Scene)._jsComponents;\n        const componentA = components[a];\n        components[a] = components[b];\n        components[b] = componentA;\n    }\n    protected _wljs_copy(\n        srcSceneIndex: number,\n        srcIndex: number,\n        dstSceneIndex: number,\n        dstIndex: number,\n        offsetsPtr: number,\n        copyInfoPtr: number\n    ) {\n        const srcScene = this._engine._scenes[srcSceneIndex] as Scene;\n        const dstScene = this._engine._scenes[dstSceneIndex] as Scene;\n        const destComp = dstScene._jsComponents[dstIndex];\n        const srcComp = srcScene._jsComponents[srcIndex];\n        destComp._copy(srcComp, offsetsPtr, copyInfoPtr);\n    }\n    /**\n     * Forward an animation event to a corresponding\n     * {@link AnimationComponent}\n     *\n     * @note This api is meant to be used internally. Please have a look at\n     * {@link AnimationComponent.onEvent} instead.\n     *\n     * @param componentId Component id in the manager\n     * @param namePtr Pointer to UTF8 event name\n     * @param nameEndPtr Pointer to end of UTF8 event name\n     */\n    protected _wljs_trigger_animationEvent(\n        componentId: number,\n        namePtr: number,\n        nameEndPtr: number\n    ) {\n        const scene = this._engine.scene;\n        const comp = scene._components.wrapAnimation(componentId);\n        const nameStr = this.UTF8ViewToString(namePtr, nameEndPtr);\n        comp.onEvent.notify(nameStr);\n    }\n}\n\n/* Extends the WASM class with the WebAssembly typings */\n\nexport interface WASM {\n    HEAP8: Int8Array;\n    HEAPU8: Uint8Array;\n    HEAPU16: Uint16Array;\n    HEAP16: Int16Array;\n    HEAPU32: Uint32Array;\n    HEAP32: Int32Array;\n    HEAPF32: Float32Array;\n    HEAPF64: Float64Array;\n\n    GL: {\n        framebuffers: WebGLFramebuffer[];\n    };\n\n    assert: (condition: boolean, msg?: string) => void;\n    _free: (ptr: number) => void;\n    _malloc: (size: number) => number;\n    lengthBytesUTF8: (str: string) => number;\n    stringToUTF8: (str: string, outPtr: number, len: number) => void;\n    UTF8ToString: (ptr: number) => string;\n    addFunction: (func: Function, sig: string) => number;\n    removeFunction: (ptr: number) => void;\n\n    _wl_runtime_version: (out: number) => void;\n    _wl_set_error_callback: (cbPtr: number) => void;\n    _wl_application_create: () => void;\n    _wl_application_init: (withRenderer: boolean) => boolean;\n    _wl_application_exit: () => void;\n    _wl_application_destroy: () => void;\n    _wl_application_start: () => void;\n    _wl_application_stop: () => void;\n    _wl_application_redraw: () => void;\n    _wl_application_resize: (width: number, height: number) => void;\n\n    _wl_nextUpdate: (delta: number) => void;\n    _wl_nextFrame: (delta: number) => void;\n    _wl_reset: () => void;\n    _wl_reset_context: () => void;\n    _wl_xr_init: (viewCount: number, useLayers: boolean) => void;\n    _wl_xr_focus: () => void;\n    _wl_xr_blur: () => void;\n    _wl_xr_hide: () => void;\n    _wl_xr_exit: () => void;\n\n    _wl_deactivate_activeScene: () => void;\n\n    _wl_renderer_set_mesh_layout: (layout: number) => void;\n    _wl_renderer_streaming_reset: () => void;\n    _wl_renderer_streaming_idle: () => number;\n    _wl_renderer_isReverseZEnabled: () => number;\n\n    _wl_load_main_scene: (ptr: number, size: number, url: number) => number;\n    _wl_get_images: (out: number, max: number) => number;\n    _wl_get_material_definition_count: () => number;\n    _wl_get_material_definition_index: (ptr: number) => number;\n\n    _wl_scene_get_active: (root: number) => number;\n    _wl_scene_create: (ptr: number, size: number, url: number) => number;\n    _wl_scene_create_chunked_start: (url: number) => number;\n    _wl_scene_create_chunked_buffer_size: (index: number) => number;\n    _wl_scene_create_chunked_next: (\n        index: number,\n        ptr: number,\n        size: number,\n        readSizePtr: number,\n        requiredSizePtr: number\n    ) => boolean;\n    _wl_scene_create_chunked_abort: (index: number) => void;\n    _wl_scene_create_chunked_end_prefab: (index: number) => number;\n    _wl_scene_create_chunked_end_main: (index: number) => void;\n    _wl_scene_create_chunked_end_queued: (\n        index: number,\n        dependentSceneIndex: number\n    ) => void;\n    _wl_scene_create_empty: () => number;\n    _wl_scene_initialize: (index: number) => number;\n    _wl_scene_destroy: (index: number) => void;\n    _wl_scene_instantiate: (src: number, dst: number) => number;\n    _wl_scene_activate: (index: number) => void;\n    _wl_scene_queued_bin_count: (index: number) => number;\n    _wl_scene_queued_bin_path: (sceneIndex: number, index: number) => number;\n    _wl_scene_clear_queued_bin_list: (sceneIndex: number) => void;\n    _wl_scene_load_queued_bin: (index: number, ptr: number, size: number) => boolean;\n    _wl_scene_activatable: (index: number) => boolean;\n    _wl_scene_active: (index: number) => boolean;\n    _wl_scene_get_baseURL: (index: number) => number;\n    _wl_scene_get_filename: (index: number) => number;\n    _wl_scene_get_componentsBundle: (index: number) => number;\n\n    _wl_scene_get_component_manager_count: (scene: number) => number;\n    _wl_scene_get_component_manager_index: (scene: number, ptr: number) => number;\n\n    _wl_scene_get_mainView: (scene: number) => number;\n    _wl_scene_set_mainView: (viewId: number) => number;\n    _wl_scene_get_leftView: (scene: number) => number;\n    _wl_scene_get_rightView: (scene: number) => number;\n    _wl_scene_get_components: (\n        scene: number,\n        typeIndex: number,\n        subTypeIndex: number,\n        active: boolean,\n        offset: number,\n        count: number,\n        ptr: number\n    ) => number;\n    _wl_scene_get_component: (scene: number, typeIndex: number, index: number) => number;\n\n    _wl_scene_ray_cast: (\n        scene: number,\n        x: number,\n        y: number,\n        z: number,\n        dx: number,\n        dy: number,\n        dz: number,\n        groupMask: number,\n        maxDistance: number,\n        outPtr: number\n    ) => void;\n    _wl_scene_add_object: (scene: number, parentId: number) => number;\n    _wl_scene_add_objects: (\n        scene: number,\n        parentId: number,\n        count: number,\n        componentCountHint: number,\n        ptr: number,\n        size: number\n    ) => number;\n    _wl_scene_reserve_objects: (\n        scene: number,\n        objectCount: number,\n        _tempMem: number\n    ) => void;\n    _wl_scene_set_sky_material: (index: number, id: number) => void;\n    _wl_scene_get_sky_material: (index: number) => number;\n    _wl_scene_environment_set_intensity: (index: number, intensity: number) => void;\n    _wl_scene_environment_get_intensity: (index: number) => number;\n    _wl_scene_environment_set_tint: (\n        index: number,\n        r: number,\n        g: number,\n        b: number\n    ) => void;\n    _wl_scene_environment_get_tint: (index: number, ptr: number) => void;\n    _wl_scene_environment_set_coefficients: (\n        index: number,\n        ptr: number,\n        count: number\n    ) => void;\n    _wl_scene_environment_get_coefficients: (index: number, ptr: number) => void;\n    _wl_scene_set_clearColor: (r: number, g: number, b: number, a: number) => void;\n    _wl_scene_enableColorClear: (b: boolean) => void;\n\n    _wl_set_loading_screen_progress: (ratio: number) => void;\n\n    _wl_glTF_scene_create: (extensions: boolean, ptr: number, ptrEnd: number) => number;\n    _wl_glTF_scene_get_extensions: (index: number) => number;\n    _wl_glTF_scene_extensions_gltfIndex_to_id: (\n        gltfScene: number,\n        destScene: number,\n        objectIndex: number,\n        gltfIndex: number\n    ) => number;\n\n    _wl_component_get_object: (manager: number, id: number) => number;\n    _wl_component_setActive: (manager: number, id: number, active: boolean) => void;\n    _wl_component_isActive: (manager: number, id: number) => number;\n    _wl_component_remove: (manager: number, id: number) => void;\n\n    _wl_collision_component_get_collider: (id: number) => number;\n    _wl_collision_component_set_collider: (id: number, collider: number) => void;\n    _wl_collision_component_get_extents: (id: number) => number;\n    _wl_collision_component_get_group: (id: number) => number;\n    _wl_collision_component_set_group: (id: number, group: number) => void;\n    _wl_collision_component_query_overlaps: (\n        id: number,\n        outPtr: number,\n        outCount: number\n    ) => number;\n    _wl_text_component_get_horizontal_alignment: (id: number) => number;\n    _wl_text_component_set_horizontal_alignment: (id: number, alignment: number) => void;\n    _wl_text_component_get_vertical_alignment: (id: number) => number;\n    _wl_text_component_set_vertical_alignment: (\n        id: number,\n        verticalAlignment: number\n    ) => void;\n    _wl_text_component_get_justified: (id: number) => number;\n    _wl_text_component_set_justified: (id: number, justified: boolean) => void;\n    _wl_text_component_get_character_spacing: (id: number) => number;\n    _wl_text_component_set_character_spacing: (id: number, spacing: number) => void;\n    _wl_text_component_get_line_spacing: (id: number) => number;\n    _wl_text_component_set_line_spacing: (id: number, spacing: number) => void;\n    _wl_text_component_get_effect: (id: number) => number;\n    _wl_text_component_get_effectOffset: (id: number, outPtr: number) => void;\n    _wl_text_component_set_effect: (id: number, effect: number) => void;\n    _wl_text_component_set_effectOffset: (id: number, offsetPtr: number) => void;\n    _wl_text_component_get_wrapMode: (id: number) => number;\n    _wl_text_component_set_wrapMode: (id: number, mode: number) => void;\n    _wl_text_component_get_wrapWidth: (id: number) => number;\n    _wl_text_component_set_wrapWidth: (id: number, width: number) => void;\n    _wl_text_component_get_text: (id: number) => number;\n    _wl_text_component_set_text: (id: number, ptr: number) => void;\n    _wl_text_component_set_material: (id: number, materialId: number) => void;\n    _wl_text_component_get_material: (id: number) => number;\n    _wl_text_component_get_boundingBox: (\n        id: number,\n        textPtr: number,\n        resultPtr: number\n    ) => number;\n    _wl_view_component_get_projectionType: (id: number) => number;\n    _wl_view_component_set_projectionType: (id: number, type: number) => void;\n    _wl_view_component_get_projectionMatrix: (id: number, ptr: number) => void;\n    _wl_view_component_set_projectionMatrix: (id: number, ptr: number) => void;\n    _wl_view_component_remapProjectionMatrix: (\n        id: number,\n        inverseDepth: boolean,\n        depthZeroToOne: boolean\n    ) => void;\n    _wl_view_component_generate_projectionMatrix: (id: number) => void;\n    _wl_view_component_get_near: (id: number) => number;\n    _wl_view_component_set_near: (id: number, near: number) => void;\n    _wl_view_component_get_far: (id: number) => number;\n    _wl_view_component_set_far: (id: number, far: number) => void;\n    _wl_view_component_get_fov: (id: number) => number;\n    _wl_view_component_set_fov: (id: number, fov: number) => void;\n    _wl_view_component_get_viewport: (id: number) => number;\n    _wl_view_component_set_viewport: (\n        id: number,\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    ) => void;\n    _wl_view_component_get_extent: (id: number) => number;\n    _wl_view_component_set_extent: (id: number, fov: number) => void;\n    _wl_view_component_set_externalFramebuffer: (id: number, fb: number) => void;\n    _wl_input_component_get_type: (id: number) => number;\n    _wl_input_component_set_type: (id: number, type: number) => void;\n    _wl_input_set_transformation: (sceneIndex: number, type: number, ptr: number) => void;\n    _wl_light_component_get_color: (id: number) => number;\n    _wl_light_component_get_type: (id: number) => number;\n    _wl_light_component_set_type: (id: number, type: number) => void;\n    _wl_light_component_get_intensity: (id: number) => number;\n    _wl_light_component_set_intensity: (id: number, intensity: number) => void;\n    _wl_light_component_get_outerAngle: (id: number) => number;\n    _wl_light_component_set_outerAngle: (id: number, angle: number) => void;\n    _wl_light_component_get_innerAngle: (id: number) => number;\n    _wl_light_component_set_innerAngle: (id: number, angle: number) => void;\n    _wl_light_component_get_shadows: (id: number) => number;\n    _wl_light_component_set_shadows: (id: number, shadows: boolean) => void;\n    _wl_light_component_get_shadowRange: (id: number) => number;\n    _wl_light_component_set_shadowRange: (id: number, range: number) => void;\n    _wl_light_component_get_shadowBias: (id: number) => number;\n    _wl_light_component_set_shadowBias: (id: number, bias: number) => void;\n    _wl_light_component_get_shadowNormalBias: (id: number) => number;\n    _wl_light_component_set_shadowNormalBias: (id: number, bias: number) => void;\n    _wl_light_component_get_shadowTexelSize: (id: number) => number;\n    _wl_light_component_set_shadowTexelSize: (id: number, size: number) => void;\n    _wl_light_component_get_cascadeCount: (id: number) => number;\n    _wl_light_component_set_cascadeCount: (id: number, count: number) => void;\n    _wl_animation_component_get_animation: (id: number) => number;\n    _wl_animation_component_get_animationGraph: (id: number) => number;\n    _wl_animation_component_set_animation: (id: number, animId: number) => void;\n    _wl_animation_component_set_animationGraph: (id: number, animGraphId: number) => void;\n    _wl_animation_component_get_playCount: (id: number) => number;\n    _wl_animation_component_set_playCount: (id: number, count: number) => void;\n    _wl_animation_component_get_speed: (id: number) => number;\n    _wl_animation_component_set_speed: (id: number, speed: number) => void;\n    _wl_animation_component_play: (id: number) => void;\n    _wl_animation_component_stop: (id: number) => void;\n    _wl_animation_component_pause: (id: number) => void;\n    _wl_animation_component_state: (id: number) => number;\n    _wl_animation_component_getGraphParamValue: (\n        id: number,\n        paramIndex: number,\n        outPtr: number\n    ) => number;\n    _wl_animation_component_setGraphParamValue: (\n        id: number,\n        paramIndex: number,\n        valuePtr: number\n    ) => void;\n    _wl_animation_component_get_rootMotionMode: (id: number) => number;\n    _wl_animation_component_set_rootMotionMode: (id: number, value: number) => void;\n    _wl_animation_component_get_rootMotion_translation: (\n        id: number,\n        outPtr: number\n    ) => number;\n    _wl_animation_component_get_rootMotion_rotation: (id: number, outPtr: number) => number;\n    _wl_animation_component_getGraphParamIndex: (id: number, paramName: number) => number;\n    _wl_animation_component_get_iteration: (id: number) => number;\n    _wl_animation_component_get_position: (id: number) => number;\n    _wl_animation_component_get_duration: (id: number) => number;\n    _wl_mesh_component_get_material: (id: number) => number;\n    _wl_mesh_component_set_material: (id: number, materialId: number) => void;\n    _wl_mesh_component_get_mesh: (id: number) => number;\n    _wl_mesh_component_set_mesh: (id: number, meshId: number) => void;\n    _wl_mesh_component_get_skin: (id: number) => number;\n    _wl_mesh_component_set_skin: (id: number, skinId: number) => void;\n    _wl_mesh_component_get_morph_targets: (id: number) => number;\n    _wl_mesh_component_set_morph_targets: (id: number, morphTargetSetId: number) => void;\n    _wl_mesh_component_get_morph_target_weight: (id: number, index: number) => number;\n    _wl_mesh_component_get_morph_target_weights: (id: number, ptr: number) => number;\n    _wl_mesh_component_set_morph_target_weight: (\n        id: number,\n        index: number,\n        weight: number\n    ) => void;\n    _wl_mesh_component_set_morph_target_weights: (\n        id: number,\n        ptr: number,\n        count: number\n    ) => void;\n    _wl_particleEffect_component_get_particleEffect: (id: number) => number;\n    _wl_particleEffect_component_set_particleEffect: (\n        id: number,\n        particleEffectId: number\n    ) => void;\n    _wl_physx_component_get_static: (id: number) => number;\n    _wl_physx_component_set_static: (id: number, flag: boolean) => void;\n    _wl_physx_component_get_kinematic: (id: number) => number;\n    _wl_physx_component_set_kinematic: (id: number, kinematic: boolean) => void;\n    _wl_physx_component_get_gravity: (id: number) => number;\n    _wl_physx_component_set_gravity: (id: number, gravity: boolean) => void;\n    _wl_physx_component_get_simulate: (id: number) => number;\n    _wl_physx_component_set_simulate: (id: number, simulation: boolean) => void;\n    _wl_physx_component_get_allowSimulation: (id: number) => number;\n    _wl_physx_component_set_allowSimulation: (id: number, allowSimulation: boolean) => void;\n    _wl_physx_component_get_allowQuery: (id: number) => number;\n    _wl_physx_component_set_allowQuery: (id: number, allowQuery: boolean) => void;\n    _wl_physx_component_get_trigger: (id: number) => number;\n    _wl_physx_component_set_trigger: (id: number, trigger: boolean) => void;\n    _wl_physx_component_get_shape: (id: number) => number;\n    _wl_physx_component_set_shape: (id: number, shape: number) => void;\n    _wl_physx_component_get_shape_data: (id: number) => number;\n    _wl_physx_component_set_shape_data: (id: number, shapeIndex: number) => void;\n    _wl_physx_component_get_extents: (id: number) => number;\n    _wl_physx_component_get_staticFriction: (id: number) => number;\n    _wl_physx_component_set_staticFriction: (id: number, value: number) => void;\n    _wl_physx_component_get_dynamicFriction: (id: number) => number;\n    _wl_physx_component_set_dynamicFriction: (id: number, value: number) => void;\n    _wl_physx_component_get_bounciness: (id: number) => number;\n    _wl_physx_component_set_bounciness: (id: number, value: number) => void;\n    _wl_physx_component_get_linearDamping: (id: number) => number;\n    _wl_physx_component_set_linearDamping: (id: number, value: number) => void;\n    _wl_physx_component_get_angularDamping: (id: number) => number;\n    _wl_physx_component_set_angularDamping: (id: number, value: number) => void;\n    _wl_physx_component_get_linearVelocity: (id: number, ptr: number) => number;\n    _wl_physx_component_set_linearVelocity: (\n        id: number,\n        x: number,\n        y: number,\n        z: number\n    ) => void;\n    _wl_physx_component_get_angularVelocity: (id: number, ptr: number) => number;\n    _wl_physx_component_set_angularVelocity: (\n        id: number,\n        x: number,\n        y: number,\n        z: number\n    ) => void;\n    _wl_physx_component_get_groupsMask: (id: number) => number;\n    _wl_physx_component_set_groupsMask: (id: number, flags: number) => void;\n    _wl_physx_component_get_blocksMask: (id: number) => number;\n    _wl_physx_component_set_blocksMask: (id: number, flags: number) => void;\n    _wl_physx_component_get_linearLockAxis: (id: number) => number;\n    _wl_physx_component_set_linearLockAxis: (id: number, lock: number) => void;\n    _wl_physx_component_get_angularLockAxis: (id: number) => number;\n    _wl_physx_component_set_angularLockAxis: (id: number, lock: number) => void;\n    _wl_physx_component_get_mass: (id: number) => number;\n    _wl_physx_component_set_mass: (id: number, value: number) => void;\n    _wl_physx_component_get_offsetTranslation: (id: number, out: number) => void;\n    _wl_physx_component_get_offsetTransform: (id: number) => number;\n    _wl_physx_component_set_offsetTranslation: (\n        id: number,\n        x: number,\n        y: number,\n        z: number\n    ) => void;\n    _wl_physx_component_set_offsetRotation: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        w: number\n    ) => void;\n    _wl_physx_component_set_sleepOnActivate: (id: number, flag: boolean) => void;\n    _wl_physx_component_get_sleepOnActivate: (id: number) => number;\n    _wl_physx_component_set_massSpaceInertiaTensor: (\n        id: number,\n        x: number,\n        y: number,\n        z: number\n    ) => void;\n    _wl_physx_component_addForce: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        mode: number,\n        localForce: boolean\n    ) => void;\n    _wl_physx_component_addForceAt: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        mode: number,\n        localForce: boolean,\n        posX: number,\n        posY: number,\n        posZ: number,\n        local: boolean\n    ) => void;\n    _wl_physx_component_addTorque: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        mode: number\n    ) => void;\n    _wl_physx_component_addCallback: (id: number, otherId: number) => number;\n    _wl_physx_component_removeCallback: (id: number, callbackId: number) => number;\n    _wl_physx_update_global_pose: (object: number, component: number) => void;\n    _wl_physx_ray_cast: (\n        scene: number,\n        x: number,\n        y: number,\n        z: number,\n        dx: number,\n        dy: number,\n        dz: number,\n        groupMask: number,\n        outPtr: number,\n        maxDistance: number\n    ) => void;\n    _wl_physx_set_collision_callback: (callback: number) => void;\n    _wl_mesh_create: (\n        indicesPtr: number,\n        indicesSize: number,\n        indexType: number,\n        vertexCount: number,\n        skinningType: number\n    ) => number;\n    _wl_mesh_get_vertexCount: (index: number) => number;\n    _wl_mesh_get_indexData: (index: number, outPtr: number, count: number) => number;\n    _wl_mesh_update: (index: number) => void;\n    _wl_mesh_get_boundingSphere: (index: number, outPtr: number) => void;\n    _wl_mesh_get_attribute: (index: number, attribute: number, outPtr: number) => void;\n    _wl_mesh_destroy: (index: number) => void;\n    _wl_mesh_get_attribute_values: (\n        attribute: number,\n        srcFormatSize: number,\n        srcPtr: number,\n        srcStride: number,\n        dstFormatSize: number,\n        destPtr: number,\n        dstSize: number\n    ) => void;\n    _wl_mesh_set_attribute_values: (\n        attribute: number,\n        srcFormatSize: number,\n        srcPtr: number,\n        srcSize: number,\n        dstFormatSize: number,\n        destPtr: number,\n        destStride: number\n    ) => void;\n    _wl_font_get_emHeight: (index: number) => number;\n    _wl_font_get_capHeight: (index: number) => number;\n    _wl_font_get_xHeight: (index: number) => number;\n    _wl_font_get_outlineSize: (index: number) => number;\n    _wl_material_create: (definitionIndex: number) => number;\n    _wl_material_get_definition: (index: number) => number;\n    _wl_material_definition_get_param_count: (index: number) => number;\n    _wl_material_definition_get_param_name: (index: number, paramIndex: number) => number;\n    _wl_material_definition_get_param_type: (index: number, paramIndex: number) => number;\n    _wl_material_get_pipeline: (index: number) => number;\n    _wl_material_clone: (index: number) => number;\n    _wl_material_get_param_index: (index: number, namePtr: number) => number;\n    _wl_material_get_param_type: (index: number, paramIndex: number) => number;\n    _wl_material_get_param_value: (\n        index: number,\n        paramIndex: number,\n        outPtr: number\n    ) => number;\n    _wl_material_set_param_value_uint: (\n        index: number,\n        paramId: number,\n        valueId: number\n    ) => void;\n    _wl_material_set_param_value_float: (\n        index: number,\n        paramId: number,\n        ptr: number,\n        count: number\n    ) => void;\n    _wl_image_create: (jsImage: number) => number;\n    _wl_image_size: (index: number, out: number) => number;\n    _wl_image_get_jsImage_index: (index: number) => number;\n    _wl_image_compressed: (index: number) => number;\n    _wl_image_originalScene: (index: number) => number;\n    _wl_image_markDirty: (index: number) => void;\n    _wl_image_markReady: (\n        index: number,\n        width: number,\n        height: number,\n        flipY: number\n    ) => void;\n    _wl_image_count: () => number;\n\n    _wl_texture_create: (image: number) => number;\n    _wl_texture_get_image_index: (index: number) => number;\n    _wl_texture_destroy: (id: number) => void;\n\n    _wl_renderer_updateImage: (\n        imageIndex: number,\n        jsImageIndex: number,\n        srcWidth: number,\n        srcHeight: number,\n        xOffset: number,\n        yOffset: number,\n        flipY: boolean\n    ) => number;\n\n    _wl_animation_get_duration: (id: number) => number;\n    _wl_animation_get_trackCount: (id: number) => number;\n    _wl_animation_retargetToSkin: (id: number, targetId: number) => number;\n    _wl_animation_retarget: (id: number, ptr: number) => number;\n    _wl_particleEffect_clone: (index: number) => number;\n    _wl_object_id: (scene: number, index: number) => number;\n    _wl_object_index: (id: number) => number;\n    _wl_object_name: (id: number) => number;\n    _wl_object_set_name: (id: number, ptr: number) => void;\n    _wl_object_remove: (id: number) => void;\n    _wl_object_markedDestroyed: (id: number) => boolean;\n    _wl_object_parent: (id: number) => number;\n    _wl_object_get_children_count: (id: number) => number;\n    _wl_object_get_children: (id: number, outPtr: number, count: number) => number;\n    _wl_object_set_parent: (id: number, parentId: number) => void;\n    _wl_object_clone: (id: number, parentId: number) => number;\n    _wl_object_reset_scaling: (id: number) => void;\n    _wl_object_reset_translation_rotation: (id: number) => void;\n    _wl_object_reset_rotation: (id: number) => void;\n    _wl_object_reset_translation: (id: number) => void;\n    _wl_object_translate: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_translate_obj: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_translate_world: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_rotate_axis_angle: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        deg: number\n    ) => void;\n    _wl_object_rotate_axis_angle_rad: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        rad: number\n    ) => void;\n    _wl_object_rotate_axis_angle_obj: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        deg: number\n    ) => void;\n    _wl_object_rotate_axis_angle_rad_obj: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        rad: number\n    ) => void;\n    _wl_object_rotate_quat: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        w: number\n    ) => void;\n    _wl_object_rotate_quat_obj: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        w: number\n    ) => void;\n    _wl_object_scale: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_trans_local: (id: number) => number;\n    _wl_object_get_translation_local: (id: number, outPtr: number) => void;\n    _wl_object_set_translation_local: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_get_translation_world: (id: number, outPtr: number) => void;\n    _wl_object_set_translation_world: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_trans_world: (id: number) => number;\n    _wl_object_trans_world_to_local: (id: number) => number;\n    _wl_object_scaling_local: (id: number) => number;\n    _wl_object_scaling_world: (id: number) => number;\n    _wl_object_set_scaling_local: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_set_scaling_world: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_scaling_world_to_local: (id: number) => number;\n    _wl_object_set_rotation_local: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        w: number\n    ) => void;\n    _wl_object_set_rotation_world: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        w: number\n    ) => void;\n    _wl_object_transformVectorWorld: (id: number, ptr: number) => number;\n    _wl_object_transformVectorLocal: (id: number, ptr: number) => number;\n    _wl_object_transformPointWorld: (id: number, ptr: number) => number;\n    _wl_object_transformPointLocal: (id: number, ptr: number) => number;\n    _wl_object_transformVectorInverseWorld: (id: number, ptr: number) => number;\n    _wl_object_transformVectorInverseLocal: (id: number, ptr: number) => number;\n    _wl_object_transformPointInverseWorld: (id: number, ptr: number) => number;\n    _wl_object_transformPointInverseLocal: (id: number, ptr: number) => number;\n    _wl_object_toWorldSpaceTransform: (id: number, ptr: number) => number;\n    _wl_object_toObjectSpaceTransform: (id: number, ptr: number) => number;\n    _wl_object_lookAt: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        upX: number,\n        upY: number,\n        upZ: number\n    ) => void;\n    _wl_object_set_dirty: (id: number) => void;\n    _wl_get_js_component_index: (id: number, outPtr: number, count: number) => number;\n    _wl_get_js_component_index_for_id: (id: number) => number;\n    _wl_get_component_id: (id: number, managerId: number, index: number) => number;\n    _wl_object_get_components: (id: number, outPtr: number, count: number) => number;\n    _wl_object_get_component_types: (id: number, outPtr: number, count: number) => void;\n    _wl_object_add_js_component: (id: number, typeId: number) => number;\n    _wl_object_add_component: (id: number, typeId: number) => number;\n    _wl_object_is_changed: (id: number) => number;\n    _wl_object_findByName: (\n        obj: number,\n        name: number,\n        indexPtr: number,\n        childPtr: number,\n        outPtr: number,\n        count: number\n    ) => number;\n    _wl_object_findByNameRecursive: (\n        obj: number,\n        name: number,\n        indexPtr: number,\n        outPtr: number,\n        count: number\n    ) => number;\n    _wl_component_manager_name: (scene: number, id: number) => number;\n    _wl_skin_get_joint_count: (id: number) => number;\n    _wl_skin_joint_ids: (id: number) => number;\n    _wl_skin_inverse_bind_transforms: (id: number) => number;\n    _wl_skin_inverse_bind_scalings: (id: number) => number;\n    _wl_morph_targets_get_target_count: (id: number) => number;\n    _wl_morph_targets_get_target_name: (id: number, target: number) => number;\n    _wl_morph_targets_get_target_index: (id: number, namePtr: number) => number;\n    _wl_morph_target_weights_get_weight: (id: number, target: number) => number;\n    _wl_morph_target_weights_set_weight: (\n        id: number,\n        target: number,\n        weight: number\n    ) => void;\n    _wl_math_cubicHermite: (\n        a: number,\n        b: number,\n        c: number,\n        d: number,\n        f: number,\n        e: number,\n        isQuat: boolean\n    ) => void;\n    _wl_i18n_setLanguage: (ptr: number) => void;\n    _wl_i18n_currentLanguage: () => number;\n    _wl_i18n_currentLanguageIndex: () => number;\n    _wl_i18n_translate: (ptr: number) => number;\n    _wl_i18n_languageCount: () => number;\n    _wl_i18n_languageIndex: (ptr: number) => number;\n    _wl_i18n_languageCode: (index: number) => number;\n    _wl_i18n_languageName: (index: number) => number;\n    _wl_i18n_languageFile: (index: number) => number;\n}\n\n/*\n * Api <> Runtime compatibility.\n *\n * Some features exposed in the API are only available from a specific\n * runtime version.\n *\n * Every added feature must throw by default. If the runtime loaded\n * has the specific feature, the method will be overwritten by Emscripten\n * upon loading.\n */\n\n/**\n * Throwing function used for features added in a patch version.\n *\n * #### Usage\n *\n * ```ts\n * const requireRuntime1_1_1 = throwInvalidRuntime('1.1.1');\n * WASM.prototype._wl_new_function = requireRuntime1_1_1;\n * ```\n *\n * @param version The version in which the feature was added.\n * @returns A function that will throw when called.\n */\nfunction throwInvalidRuntime(version: string) {\n    return function () {\n        throw new Error(\n            `Feature added in version ${version}.` +\n                `\\n\\t\u2192 Please use a Wonderland Engine editor version >= ${version}`\n        );\n    };\n}\n\nconst requireRuntime1_4_3 = throwInvalidRuntime('1.4.3');\nWASM.prototype._wl_scene_set_mainView = requireRuntime1_4_3;\nconst requireRuntime1_4_6 = throwInvalidRuntime('1.4.6');\nWASM.prototype._wl_animation_component_get_animationGraph = requireRuntime1_4_6;\nWASM.prototype._wl_animation_component_set_animationGraph = requireRuntime1_4_6;\nWASM.prototype._wl_application_exit = requireRuntime1_4_6;\nWASM.prototype._wl_application_destroy = requireRuntime1_4_6;\n", "import {threads} from 'wasm-feature-detect';\nimport {WonderlandEngine} from './engine.js';\nimport {XROfferSessionOptions} from './webxr.js';\nimport {LogLevel} from './utils/logger.js';\nimport {WASM} from './wasm.js';\n\nimport {getBaseUrl} from './utils/fetch.js';\n\nexport * from './utils/index.js';\nexport * from './decorators.js';\nexport {NativeComponents} from './component.js';\nexport * from './wonderland.js';\nexport * from './engine.js';\nexport * from './webxr.js';\nexport * from './property.js';\nexport * from './prefab.js';\nexport * from './scene.js';\nexport * from './scene-gltf.js';\nexport * from './resources/resource.js';\nexport * from './resources/material-manager.js';\nexport * from './resources/mesh-manager.js';\nexport {TextureManager} from './resources/texture-manager.js';\nexport * from './types.js';\nexport * from './version.js';\nexport * from './wasm.js';\n\n/** Relative default path for the loading screen. */\nconst LOADING_SCREEN_PATH = 'WonderlandRuntime-LoadingScreen.bin';\n\nfunction loadScript(scriptURL: string): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        const s = document.createElement('script');\n        const node = document.body.appendChild(s);\n        s.onload = () => {\n            document.body.removeChild(node);\n            resolve();\n        };\n        s.onerror = (e) => {\n            document.body.removeChild(node);\n            reject(e);\n        };\n        s.src = scriptURL;\n    });\n}\n\n/**\n * Checks for support of WebAssembly features.\n *\n * @returns An object containing booleans for supported features.\n */\nasync function detectFeatures(): Promise<{\n    threadsSupported: boolean;\n}> {\n    let threadsSupported = await threads();\n    if (threadsSupported) {\n        if (self.crossOriginIsolated) {\n            console.log('WASM Threads is supported');\n        } else {\n            console.warn(\n                'WASM Threads is supported, but the page is not crossOriginIsolated, therefore thread support is disabled.'\n            );\n        }\n    } else {\n        console.warn('WASM Threads is not supported');\n    }\n\n    threadsSupported = threadsSupported && self.crossOriginIsolated;\n    return {\n        threadsSupported,\n    };\n}\n\n/**\n * Options to forward to {@link loadRuntime}\n */\nexport interface LoadRuntimeOptions {\n    /**\n     * @deprecated Ignored, SIMD in the runtime is always enabled as it's supported on\n     * all modern browsers.\n     */\n    simd: boolean;\n    /**\n     * If `true`, forces the runtime to load the threads-compatible version.\n     * If `undefined`, performs browser feature detection to check whether threads are supported or not.\n     */\n    threads: boolean;\n    /**\n     * If `true`, forces the runtime to load the webgpu-compatible version.\n     */\n    webgpu: boolean;\n    /**\n     * If `true`, forces the runtime to load a physx-compatible version.\n     *\n     * **Note**: If your scene uses physx, you **must** enable this option.\n     */\n    physx: boolean;\n    /**\n     * If `true`, forces the runtime to load a loader-compatible version.\n     *\n     * This option allows to load gltf data at runtime.\n     */\n    loader: boolean;\n\n    /**\n     * Whether to instantiate the runtime with a renderer.\n     *\n     * Disabling this is mostly meant for testing purposes (increased speed).\n     *\n     * @hidden\n     */\n    renderer: boolean;\n\n    /**\n     * Path to the loading screen. If `undefined`, defaults to 'WonderlandRuntime-LoadingScreen.bin'.\n     * Beware that these are special .bin files signed by Wonderland. Customizing\n     * requires an enterprise license, please reach out for more information.\n     */\n    loadingScreen: string;\n\n    /**\n     * Default framebuffer scale factor. This can later be changed using\n     * {@link WonderlandEngine.xrFramebufferScaleFactor}\n     */\n    xrFramebufferScaleFactor: number;\n\n    /**\n     * Whether to advertise AR/VR session support to the browser.\n     *\n     * Adds an interactive UI element to the browser interface to start an XR\n     * session. Browser support is optional, so it's advised to still allow\n     * requesting a session with a UI element on the website itself.\n     *\n     * If `undefined`, no XR session is automatically offered to the browser.\n     *\n     * @since 1.1.5\n     */\n    xrOfferSession: XROfferSessionOptions;\n\n    /**\n     * Canvas id or element. If this is `undefined`, looks for a canvas with id 'canvas'.\n     */\n    canvas: string;\n\n    /**\n     * Logging level(s) to enable.\n     *\n     * By default, all levels are enabled.\n     */\n    logs: LogLevel[];\n}\n\n/**\n * Load the runtime using the WASM and JS files.\n *\n * @param runtime The runtime base string, e.g,: `WonderlandRuntime-loader-physx`.\n * @param options Options to modify the loading behaviour.\n *\n * @returns A promise that resolves when the engine is ready to be used.\n */\nexport async function loadRuntime(\n    runtime: string,\n    options: Partial<LoadRuntimeOptions> = {}\n): Promise<WonderlandEngine> {\n    const baseURL = getBaseUrl(runtime);\n\n    const {threadsSupported} = await detectFeatures();\n    const {\n        threads = threadsSupported,\n        webgpu = false,\n        physx = false,\n        loader = false,\n        renderer = true,\n        xrFramebufferScaleFactor = 1.0,\n        xrOfferSession = null,\n        loadingScreen = baseURL ? `${baseURL}/${LOADING_SCREEN_PATH}` : LOADING_SCREEN_PATH,\n        canvas = 'canvas',\n        logs = [LogLevel.Info, LogLevel.Warn, LogLevel.Error],\n    } = options;\n\n    const variant = [];\n    if (loader) variant.push('loader');\n    if (physx) variant.push('physx');\n    if (threads) variant.push('threads');\n    if (webgpu) variant.push('webgpu');\n\n    const variantStr = variant.join('-');\n\n    let filename = runtime;\n    if (variantStr) filename = `${filename}-${variantStr}`;\n\n    const download = function (\n        filename: string,\n        errorMessage: string\n    ): Promise<ArrayBuffer> {\n        return fetch(filename)\n            .then((r) => {\n                if (!r.ok) return Promise.reject(errorMessage);\n                return r.arrayBuffer();\n            })\n            .catch((_) => Promise.reject(errorMessage));\n    };\n\n    const [wasmData, loadingScreenData] = await Promise.all([\n        download(`${filename}.wasm`, `Failed to fetch runtime .wasm file: ${filename}`),\n        download(loadingScreen, 'Failed to fetch loading screen file'),\n    ]);\n\n    const canvasElement = document.getElementById(canvas) as HTMLCanvasElement;\n    if (!canvasElement) {\n        throw new Error(`loadRuntime(): Failed to find canvas with id '${canvas}'`);\n    }\n    if (!(canvasElement instanceof HTMLCanvasElement)) {\n        throw new Error(`loadRuntime(): HTML element '${canvas}' must be a canvas`);\n    }\n\n    const wasm = new WASM(threads);\n    (wasm.wasm as ArrayBuffer) = wasmData;\n    (wasm.canvas as HTMLCanvasElement) = canvasElement;\n    wasm._log.levels.enable(...logs);\n\n    if (!window._WL) {\n        window._WL = {runtimes: {}};\n    }\n    const runtimes = window._WL.runtimes;\n\n    /* Global identifier of this runtime in `window`. */\n    const runtimeGlobalId = variantStr ? variantStr : 'default';\n    /* Only load the runtime if not previously loaded in the page */\n    if (!runtimes[runtimeGlobalId]) {\n        await loadScript(`${filename}.js`);\n        runtimes[runtimeGlobalId] = window.instantiateWonderlandRuntime!;\n        window.instantiateWonderlandRuntime = undefined;\n    }\n    await runtimes[runtimeGlobalId](wasm);\n\n    if (webgpu) {\n        const WebGPU = (wasm as any).WebGPU;\n        const adapter = await (navigator as any).gpu.requestAdapter();\n        const adapterId = WebGPU.mgrAdapter.create(adapter);\n        const desc = {\n            requiredFeatures: ['texture-compression-bc', 'depth32float-stencil8'],\n        };\n        const device = await adapter.requestDevice(desc);\n        const deviceId = WebGPU.mgrDevice.create(adapter);\n        (wasm.preinitializedWebGPUDevice as any) = device;\n\n        const context = canvasElement.getContext('webgpu')! as any;\n\n        context.configure({\n            device: device,\n            format: (navigator as any).gpu.getPreferredCanvasFormat(),\n            alphaMode: 'premultiplied',\n        });\n    }\n\n    const engine = new WonderlandEngine(wasm, loadingScreenData, renderer);\n\n    await engine.webxr.init(xrFramebufferScaleFactor, xrOfferSession);\n\n    engine.autoResizeCanvas = true;\n    engine.start();\n\n    return engine;\n}\n"],
  "mappings": "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",
  "names": ["Type", "CBORType", "ptr", "property", "Object3D", "createDestroyedProxy", "LogTag", "Collider", "Alignment", "VerticalAlignment", "TextEffect", "TextWrapMode", "InputType", "ProjectionType", "LightType", "AnimationState", "RootMotionMode", "ForceMode", "CollisionEventType", "Shape", "MeshAttribute", "createDestroyedProxy", "Component", "property", "LockAxis", "MeshIndexType", "MeshSkinningType", "index", "Object3D", "MaterialParamType", "SceneType", "version", "options", "url", "LogLevel", "threads", "version", "Component", "threads", "filename"]
}
